
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Baixa
 * 
 */
export type Baixa = $Result.DefaultSelection<Prisma.$BaixaPayload>
/**
 * Model Cliente
 * 
 */
export type Cliente = $Result.DefaultSelection<Prisma.$ClientePayload>
/**
 * Model Compras
 * 
 */
export type Compras = $Result.DefaultSelection<Prisma.$ComprasPayload>
/**
 * Model ComprasItens
 * 
 */
export type ComprasItens = $Result.DefaultSelection<Prisma.$ComprasItensPayload>
/**
 * Model Condicionais
 * 
 */
export type Condicionais = $Result.DefaultSelection<Prisma.$CondicionaisPayload>
/**
 * Model CondicionaisItens
 * 
 */
export type CondicionaisItens = $Result.DefaultSelection<Prisma.$CondicionaisItensPayload>
/**
 * Model HistoricoStatus
 * 
 */
export type HistoricoStatus = $Result.DefaultSelection<Prisma.$HistoricoStatusPayload>
/**
 * Model Roupas
 * 
 */
export type Roupas = $Result.DefaultSelection<Prisma.$RoupasPayload>
/**
 * Model Usuarios
 * 
 */
export type Usuarios = $Result.DefaultSelection<Prisma.$UsuariosPayload>
/**
 * Model Vendas
 * 
 */
export type Vendas = $Result.DefaultSelection<Prisma.$VendasPayload>
/**
 * Model VendasItens
 * 
 */
export type VendasItens = $Result.DefaultSelection<Prisma.$VendasItensPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Status: {
  disponivel: 'disponivel',
  em_condicional: 'em_condicional',
  vendido: 'vendido'
};

export type Status = (typeof Status)[keyof typeof Status]

}

export type Status = $Enums.Status

export const Status: typeof $Enums.Status

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Baixas
 * const baixas = await prisma.baixa.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Baixas
   * const baixas = await prisma.baixa.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.baixa`: Exposes CRUD operations for the **Baixa** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Baixas
    * const baixas = await prisma.baixa.findMany()
    * ```
    */
  get baixa(): Prisma.BaixaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cliente`: Exposes CRUD operations for the **Cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.cliente.findMany()
    * ```
    */
  get cliente(): Prisma.ClienteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.compras`: Exposes CRUD operations for the **Compras** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Compras
    * const compras = await prisma.compras.findMany()
    * ```
    */
  get compras(): Prisma.ComprasDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comprasItens`: Exposes CRUD operations for the **ComprasItens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ComprasItens
    * const comprasItens = await prisma.comprasItens.findMany()
    * ```
    */
  get comprasItens(): Prisma.ComprasItensDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.condicionais`: Exposes CRUD operations for the **Condicionais** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Condicionais
    * const condicionais = await prisma.condicionais.findMany()
    * ```
    */
  get condicionais(): Prisma.CondicionaisDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.condicionaisItens`: Exposes CRUD operations for the **CondicionaisItens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CondicionaisItens
    * const condicionaisItens = await prisma.condicionaisItens.findMany()
    * ```
    */
  get condicionaisItens(): Prisma.CondicionaisItensDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.historicoStatus`: Exposes CRUD operations for the **HistoricoStatus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HistoricoStatuses
    * const historicoStatuses = await prisma.historicoStatus.findMany()
    * ```
    */
  get historicoStatus(): Prisma.HistoricoStatusDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.roupas`: Exposes CRUD operations for the **Roupas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roupas
    * const roupas = await prisma.roupas.findMany()
    * ```
    */
  get roupas(): Prisma.RoupasDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.usuarios`: Exposes CRUD operations for the **Usuarios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuarios.findMany()
    * ```
    */
  get usuarios(): Prisma.UsuariosDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.vendas`: Exposes CRUD operations for the **Vendas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vendas
    * const vendas = await prisma.vendas.findMany()
    * ```
    */
  get vendas(): Prisma.VendasDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.vendasItens`: Exposes CRUD operations for the **VendasItens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VendasItens
    * const vendasItens = await prisma.vendasItens.findMany()
    * ```
    */
  get vendasItens(): Prisma.VendasItensDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.15.0
   * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Baixa: 'Baixa',
    Cliente: 'Cliente',
    Compras: 'Compras',
    ComprasItens: 'ComprasItens',
    Condicionais: 'Condicionais',
    CondicionaisItens: 'CondicionaisItens',
    HistoricoStatus: 'HistoricoStatus',
    Roupas: 'Roupas',
    Usuarios: 'Usuarios',
    Vendas: 'Vendas',
    VendasItens: 'VendasItens'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "baixa" | "cliente" | "compras" | "comprasItens" | "condicionais" | "condicionaisItens" | "historicoStatus" | "roupas" | "usuarios" | "vendas" | "vendasItens"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Baixa: {
        payload: Prisma.$BaixaPayload<ExtArgs>
        fields: Prisma.BaixaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BaixaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaixaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BaixaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaixaPayload>
          }
          findFirst: {
            args: Prisma.BaixaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaixaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BaixaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaixaPayload>
          }
          findMany: {
            args: Prisma.BaixaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaixaPayload>[]
          }
          create: {
            args: Prisma.BaixaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaixaPayload>
          }
          createMany: {
            args: Prisma.BaixaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BaixaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaixaPayload>
          }
          update: {
            args: Prisma.BaixaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaixaPayload>
          }
          deleteMany: {
            args: Prisma.BaixaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BaixaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BaixaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaixaPayload>
          }
          aggregate: {
            args: Prisma.BaixaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBaixa>
          }
          groupBy: {
            args: Prisma.BaixaGroupByArgs<ExtArgs>
            result: $Utils.Optional<BaixaGroupByOutputType>[]
          }
          count: {
            args: Prisma.BaixaCountArgs<ExtArgs>
            result: $Utils.Optional<BaixaCountAggregateOutputType> | number
          }
        }
      }
      Cliente: {
        payload: Prisma.$ClientePayload<ExtArgs>
        fields: Prisma.ClienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClienteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClienteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findFirst: {
            args: Prisma.ClienteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClienteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findMany: {
            args: Prisma.ClienteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>[]
          }
          create: {
            args: Prisma.ClienteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          createMany: {
            args: Prisma.ClienteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ClienteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          update: {
            args: Prisma.ClienteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          deleteMany: {
            args: Prisma.ClienteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClienteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClienteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          aggregate: {
            args: Prisma.ClienteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCliente>
          }
          groupBy: {
            args: Prisma.ClienteGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClienteCountArgs<ExtArgs>
            result: $Utils.Optional<ClienteCountAggregateOutputType> | number
          }
        }
      }
      Compras: {
        payload: Prisma.$ComprasPayload<ExtArgs>
        fields: Prisma.ComprasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ComprasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComprasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ComprasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComprasPayload>
          }
          findFirst: {
            args: Prisma.ComprasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComprasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ComprasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComprasPayload>
          }
          findMany: {
            args: Prisma.ComprasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComprasPayload>[]
          }
          create: {
            args: Prisma.ComprasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComprasPayload>
          }
          createMany: {
            args: Prisma.ComprasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ComprasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComprasPayload>
          }
          update: {
            args: Prisma.ComprasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComprasPayload>
          }
          deleteMany: {
            args: Prisma.ComprasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ComprasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ComprasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComprasPayload>
          }
          aggregate: {
            args: Prisma.ComprasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompras>
          }
          groupBy: {
            args: Prisma.ComprasGroupByArgs<ExtArgs>
            result: $Utils.Optional<ComprasGroupByOutputType>[]
          }
          count: {
            args: Prisma.ComprasCountArgs<ExtArgs>
            result: $Utils.Optional<ComprasCountAggregateOutputType> | number
          }
        }
      }
      ComprasItens: {
        payload: Prisma.$ComprasItensPayload<ExtArgs>
        fields: Prisma.ComprasItensFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ComprasItensFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComprasItensPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ComprasItensFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComprasItensPayload>
          }
          findFirst: {
            args: Prisma.ComprasItensFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComprasItensPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ComprasItensFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComprasItensPayload>
          }
          findMany: {
            args: Prisma.ComprasItensFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComprasItensPayload>[]
          }
          create: {
            args: Prisma.ComprasItensCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComprasItensPayload>
          }
          createMany: {
            args: Prisma.ComprasItensCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ComprasItensDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComprasItensPayload>
          }
          update: {
            args: Prisma.ComprasItensUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComprasItensPayload>
          }
          deleteMany: {
            args: Prisma.ComprasItensDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ComprasItensUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ComprasItensUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComprasItensPayload>
          }
          aggregate: {
            args: Prisma.ComprasItensAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComprasItens>
          }
          groupBy: {
            args: Prisma.ComprasItensGroupByArgs<ExtArgs>
            result: $Utils.Optional<ComprasItensGroupByOutputType>[]
          }
          count: {
            args: Prisma.ComprasItensCountArgs<ExtArgs>
            result: $Utils.Optional<ComprasItensCountAggregateOutputType> | number
          }
        }
      }
      Condicionais: {
        payload: Prisma.$CondicionaisPayload<ExtArgs>
        fields: Prisma.CondicionaisFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CondicionaisFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CondicionaisPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CondicionaisFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CondicionaisPayload>
          }
          findFirst: {
            args: Prisma.CondicionaisFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CondicionaisPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CondicionaisFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CondicionaisPayload>
          }
          findMany: {
            args: Prisma.CondicionaisFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CondicionaisPayload>[]
          }
          create: {
            args: Prisma.CondicionaisCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CondicionaisPayload>
          }
          createMany: {
            args: Prisma.CondicionaisCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CondicionaisDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CondicionaisPayload>
          }
          update: {
            args: Prisma.CondicionaisUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CondicionaisPayload>
          }
          deleteMany: {
            args: Prisma.CondicionaisDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CondicionaisUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CondicionaisUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CondicionaisPayload>
          }
          aggregate: {
            args: Prisma.CondicionaisAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCondicionais>
          }
          groupBy: {
            args: Prisma.CondicionaisGroupByArgs<ExtArgs>
            result: $Utils.Optional<CondicionaisGroupByOutputType>[]
          }
          count: {
            args: Prisma.CondicionaisCountArgs<ExtArgs>
            result: $Utils.Optional<CondicionaisCountAggregateOutputType> | number
          }
        }
      }
      CondicionaisItens: {
        payload: Prisma.$CondicionaisItensPayload<ExtArgs>
        fields: Prisma.CondicionaisItensFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CondicionaisItensFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CondicionaisItensPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CondicionaisItensFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CondicionaisItensPayload>
          }
          findFirst: {
            args: Prisma.CondicionaisItensFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CondicionaisItensPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CondicionaisItensFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CondicionaisItensPayload>
          }
          findMany: {
            args: Prisma.CondicionaisItensFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CondicionaisItensPayload>[]
          }
          create: {
            args: Prisma.CondicionaisItensCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CondicionaisItensPayload>
          }
          createMany: {
            args: Prisma.CondicionaisItensCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CondicionaisItensDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CondicionaisItensPayload>
          }
          update: {
            args: Prisma.CondicionaisItensUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CondicionaisItensPayload>
          }
          deleteMany: {
            args: Prisma.CondicionaisItensDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CondicionaisItensUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CondicionaisItensUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CondicionaisItensPayload>
          }
          aggregate: {
            args: Prisma.CondicionaisItensAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCondicionaisItens>
          }
          groupBy: {
            args: Prisma.CondicionaisItensGroupByArgs<ExtArgs>
            result: $Utils.Optional<CondicionaisItensGroupByOutputType>[]
          }
          count: {
            args: Prisma.CondicionaisItensCountArgs<ExtArgs>
            result: $Utils.Optional<CondicionaisItensCountAggregateOutputType> | number
          }
        }
      }
      HistoricoStatus: {
        payload: Prisma.$HistoricoStatusPayload<ExtArgs>
        fields: Prisma.HistoricoStatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HistoricoStatusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoStatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HistoricoStatusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoStatusPayload>
          }
          findFirst: {
            args: Prisma.HistoricoStatusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoStatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HistoricoStatusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoStatusPayload>
          }
          findMany: {
            args: Prisma.HistoricoStatusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoStatusPayload>[]
          }
          create: {
            args: Prisma.HistoricoStatusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoStatusPayload>
          }
          createMany: {
            args: Prisma.HistoricoStatusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.HistoricoStatusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoStatusPayload>
          }
          update: {
            args: Prisma.HistoricoStatusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoStatusPayload>
          }
          deleteMany: {
            args: Prisma.HistoricoStatusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HistoricoStatusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HistoricoStatusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoStatusPayload>
          }
          aggregate: {
            args: Prisma.HistoricoStatusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHistoricoStatus>
          }
          groupBy: {
            args: Prisma.HistoricoStatusGroupByArgs<ExtArgs>
            result: $Utils.Optional<HistoricoStatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.HistoricoStatusCountArgs<ExtArgs>
            result: $Utils.Optional<HistoricoStatusCountAggregateOutputType> | number
          }
        }
      }
      Roupas: {
        payload: Prisma.$RoupasPayload<ExtArgs>
        fields: Prisma.RoupasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoupasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoupasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoupasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoupasPayload>
          }
          findFirst: {
            args: Prisma.RoupasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoupasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoupasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoupasPayload>
          }
          findMany: {
            args: Prisma.RoupasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoupasPayload>[]
          }
          create: {
            args: Prisma.RoupasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoupasPayload>
          }
          createMany: {
            args: Prisma.RoupasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RoupasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoupasPayload>
          }
          update: {
            args: Prisma.RoupasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoupasPayload>
          }
          deleteMany: {
            args: Prisma.RoupasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoupasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RoupasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoupasPayload>
          }
          aggregate: {
            args: Prisma.RoupasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoupas>
          }
          groupBy: {
            args: Prisma.RoupasGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoupasGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoupasCountArgs<ExtArgs>
            result: $Utils.Optional<RoupasCountAggregateOutputType> | number
          }
        }
      }
      Usuarios: {
        payload: Prisma.$UsuariosPayload<ExtArgs>
        fields: Prisma.UsuariosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuariosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuariosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload>
          }
          findFirst: {
            args: Prisma.UsuariosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuariosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload>
          }
          findMany: {
            args: Prisma.UsuariosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload>[]
          }
          create: {
            args: Prisma.UsuariosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload>
          }
          createMany: {
            args: Prisma.UsuariosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UsuariosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload>
          }
          update: {
            args: Prisma.UsuariosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload>
          }
          deleteMany: {
            args: Prisma.UsuariosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuariosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsuariosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload>
          }
          aggregate: {
            args: Prisma.UsuariosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuarios>
          }
          groupBy: {
            args: Prisma.UsuariosGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuariosGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuariosCountArgs<ExtArgs>
            result: $Utils.Optional<UsuariosCountAggregateOutputType> | number
          }
        }
      }
      Vendas: {
        payload: Prisma.$VendasPayload<ExtArgs>
        fields: Prisma.VendasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VendasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VendasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendasPayload>
          }
          findFirst: {
            args: Prisma.VendasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VendasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendasPayload>
          }
          findMany: {
            args: Prisma.VendasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendasPayload>[]
          }
          create: {
            args: Prisma.VendasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendasPayload>
          }
          createMany: {
            args: Prisma.VendasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.VendasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendasPayload>
          }
          update: {
            args: Prisma.VendasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendasPayload>
          }
          deleteMany: {
            args: Prisma.VendasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VendasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VendasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendasPayload>
          }
          aggregate: {
            args: Prisma.VendasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVendas>
          }
          groupBy: {
            args: Prisma.VendasGroupByArgs<ExtArgs>
            result: $Utils.Optional<VendasGroupByOutputType>[]
          }
          count: {
            args: Prisma.VendasCountArgs<ExtArgs>
            result: $Utils.Optional<VendasCountAggregateOutputType> | number
          }
        }
      }
      VendasItens: {
        payload: Prisma.$VendasItensPayload<ExtArgs>
        fields: Prisma.VendasItensFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VendasItensFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendasItensPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VendasItensFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendasItensPayload>
          }
          findFirst: {
            args: Prisma.VendasItensFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendasItensPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VendasItensFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendasItensPayload>
          }
          findMany: {
            args: Prisma.VendasItensFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendasItensPayload>[]
          }
          create: {
            args: Prisma.VendasItensCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendasItensPayload>
          }
          createMany: {
            args: Prisma.VendasItensCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.VendasItensDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendasItensPayload>
          }
          update: {
            args: Prisma.VendasItensUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendasItensPayload>
          }
          deleteMany: {
            args: Prisma.VendasItensDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VendasItensUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VendasItensUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendasItensPayload>
          }
          aggregate: {
            args: Prisma.VendasItensAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVendasItens>
          }
          groupBy: {
            args: Prisma.VendasItensGroupByArgs<ExtArgs>
            result: $Utils.Optional<VendasItensGroupByOutputType>[]
          }
          count: {
            args: Prisma.VendasItensCountArgs<ExtArgs>
            result: $Utils.Optional<VendasItensCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    baixa?: BaixaOmit
    cliente?: ClienteOmit
    compras?: ComprasOmit
    comprasItens?: ComprasItensOmit
    condicionais?: CondicionaisOmit
    condicionaisItens?: CondicionaisItensOmit
    historicoStatus?: HistoricoStatusOmit
    roupas?: RoupasOmit
    usuarios?: UsuariosOmit
    vendas?: VendasOmit
    vendasItens?: VendasItensOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ClienteCountOutputType
   */

  export type ClienteCountOutputType = {
    Condicionais: number
  }

  export type ClienteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Condicionais?: boolean | ClienteCountOutputTypeCountCondicionaisArgs
  }

  // Custom InputTypes
  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteCountOutputType
     */
    select?: ClienteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountCondicionaisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CondicionaisWhereInput
  }


  /**
   * Count Type ComprasCountOutputType
   */

  export type ComprasCountOutputType = {
    ComprasItens: number
  }

  export type ComprasCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ComprasItens?: boolean | ComprasCountOutputTypeCountComprasItensArgs
  }

  // Custom InputTypes
  /**
   * ComprasCountOutputType without action
   */
  export type ComprasCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComprasCountOutputType
     */
    select?: ComprasCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ComprasCountOutputType without action
   */
  export type ComprasCountOutputTypeCountComprasItensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComprasItensWhereInput
  }


  /**
   * Count Type CondicionaisCountOutputType
   */

  export type CondicionaisCountOutputType = {
    CondicionaisItens: number
  }

  export type CondicionaisCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CondicionaisItens?: boolean | CondicionaisCountOutputTypeCountCondicionaisItensArgs
  }

  // Custom InputTypes
  /**
   * CondicionaisCountOutputType without action
   */
  export type CondicionaisCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CondicionaisCountOutputType
     */
    select?: CondicionaisCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CondicionaisCountOutputType without action
   */
  export type CondicionaisCountOutputTypeCountCondicionaisItensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CondicionaisItensWhereInput
  }


  /**
   * Count Type RoupasCountOutputType
   */

  export type RoupasCountOutputType = {
    Baixa: number
    ComprasItens: number
    CondicionaisItens: number
    HistoricoStatus: number
    VendasItens: number
  }

  export type RoupasCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Baixa?: boolean | RoupasCountOutputTypeCountBaixaArgs
    ComprasItens?: boolean | RoupasCountOutputTypeCountComprasItensArgs
    CondicionaisItens?: boolean | RoupasCountOutputTypeCountCondicionaisItensArgs
    HistoricoStatus?: boolean | RoupasCountOutputTypeCountHistoricoStatusArgs
    VendasItens?: boolean | RoupasCountOutputTypeCountVendasItensArgs
  }

  // Custom InputTypes
  /**
   * RoupasCountOutputType without action
   */
  export type RoupasCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoupasCountOutputType
     */
    select?: RoupasCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoupasCountOutputType without action
   */
  export type RoupasCountOutputTypeCountBaixaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BaixaWhereInput
  }

  /**
   * RoupasCountOutputType without action
   */
  export type RoupasCountOutputTypeCountComprasItensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComprasItensWhereInput
  }

  /**
   * RoupasCountOutputType without action
   */
  export type RoupasCountOutputTypeCountCondicionaisItensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CondicionaisItensWhereInput
  }

  /**
   * RoupasCountOutputType without action
   */
  export type RoupasCountOutputTypeCountHistoricoStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoricoStatusWhereInput
  }

  /**
   * RoupasCountOutputType without action
   */
  export type RoupasCountOutputTypeCountVendasItensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VendasItensWhereInput
  }


  /**
   * Count Type UsuariosCountOutputType
   */

  export type UsuariosCountOutputType = {
    Roupas: number
  }

  export type UsuariosCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Roupas?: boolean | UsuariosCountOutputTypeCountRoupasArgs
  }

  // Custom InputTypes
  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuariosCountOutputType
     */
    select?: UsuariosCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeCountRoupasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoupasWhereInput
  }


  /**
   * Count Type VendasCountOutputType
   */

  export type VendasCountOutputType = {
    VendasItens: number
  }

  export type VendasCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    VendasItens?: boolean | VendasCountOutputTypeCountVendasItensArgs
  }

  // Custom InputTypes
  /**
   * VendasCountOutputType without action
   */
  export type VendasCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendasCountOutputType
     */
    select?: VendasCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VendasCountOutputType without action
   */
  export type VendasCountOutputTypeCountVendasItensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VendasItensWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Baixa
   */

  export type AggregateBaixa = {
    _count: BaixaCountAggregateOutputType | null
    _avg: BaixaAvgAggregateOutputType | null
    _sum: BaixaSumAggregateOutputType | null
    _min: BaixaMinAggregateOutputType | null
    _max: BaixaMaxAggregateOutputType | null
  }

  export type BaixaAvgAggregateOutputType = {
    id: number | null
    roupa_id: number | null
    quantidade: number | null
  }

  export type BaixaSumAggregateOutputType = {
    id: number | null
    roupa_id: number | null
    quantidade: number | null
  }

  export type BaixaMinAggregateOutputType = {
    id: number | null
    roupa_id: number | null
    quantidade: number | null
    data_baixa: Date | null
    motivo: string | null
  }

  export type BaixaMaxAggregateOutputType = {
    id: number | null
    roupa_id: number | null
    quantidade: number | null
    data_baixa: Date | null
    motivo: string | null
  }

  export type BaixaCountAggregateOutputType = {
    id: number
    roupa_id: number
    quantidade: number
    data_baixa: number
    motivo: number
    _all: number
  }


  export type BaixaAvgAggregateInputType = {
    id?: true
    roupa_id?: true
    quantidade?: true
  }

  export type BaixaSumAggregateInputType = {
    id?: true
    roupa_id?: true
    quantidade?: true
  }

  export type BaixaMinAggregateInputType = {
    id?: true
    roupa_id?: true
    quantidade?: true
    data_baixa?: true
    motivo?: true
  }

  export type BaixaMaxAggregateInputType = {
    id?: true
    roupa_id?: true
    quantidade?: true
    data_baixa?: true
    motivo?: true
  }

  export type BaixaCountAggregateInputType = {
    id?: true
    roupa_id?: true
    quantidade?: true
    data_baixa?: true
    motivo?: true
    _all?: true
  }

  export type BaixaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Baixa to aggregate.
     */
    where?: BaixaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baixas to fetch.
     */
    orderBy?: BaixaOrderByWithRelationInput | BaixaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BaixaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baixas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baixas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Baixas
    **/
    _count?: true | BaixaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BaixaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BaixaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BaixaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BaixaMaxAggregateInputType
  }

  export type GetBaixaAggregateType<T extends BaixaAggregateArgs> = {
        [P in keyof T & keyof AggregateBaixa]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBaixa[P]>
      : GetScalarType<T[P], AggregateBaixa[P]>
  }




  export type BaixaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BaixaWhereInput
    orderBy?: BaixaOrderByWithAggregationInput | BaixaOrderByWithAggregationInput[]
    by: BaixaScalarFieldEnum[] | BaixaScalarFieldEnum
    having?: BaixaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BaixaCountAggregateInputType | true
    _avg?: BaixaAvgAggregateInputType
    _sum?: BaixaSumAggregateInputType
    _min?: BaixaMinAggregateInputType
    _max?: BaixaMaxAggregateInputType
  }

  export type BaixaGroupByOutputType = {
    id: number
    roupa_id: number
    quantidade: number
    data_baixa: Date
    motivo: string
    _count: BaixaCountAggregateOutputType | null
    _avg: BaixaAvgAggregateOutputType | null
    _sum: BaixaSumAggregateOutputType | null
    _min: BaixaMinAggregateOutputType | null
    _max: BaixaMaxAggregateOutputType | null
  }

  type GetBaixaGroupByPayload<T extends BaixaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BaixaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BaixaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BaixaGroupByOutputType[P]>
            : GetScalarType<T[P], BaixaGroupByOutputType[P]>
        }
      >
    >


  export type BaixaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roupa_id?: boolean
    quantidade?: boolean
    data_baixa?: boolean
    motivo?: boolean
    Roupa?: boolean | RoupasDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["baixa"]>



  export type BaixaSelectScalar = {
    id?: boolean
    roupa_id?: boolean
    quantidade?: boolean
    data_baixa?: boolean
    motivo?: boolean
  }

  export type BaixaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "roupa_id" | "quantidade" | "data_baixa" | "motivo", ExtArgs["result"]["baixa"]>
  export type BaixaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Roupa?: boolean | RoupasDefaultArgs<ExtArgs>
  }

  export type $BaixaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Baixa"
    objects: {
      Roupa: Prisma.$RoupasPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      roupa_id: number
      quantidade: number
      data_baixa: Date
      motivo: string
    }, ExtArgs["result"]["baixa"]>
    composites: {}
  }

  type BaixaGetPayload<S extends boolean | null | undefined | BaixaDefaultArgs> = $Result.GetResult<Prisma.$BaixaPayload, S>

  type BaixaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BaixaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BaixaCountAggregateInputType | true
    }

  export interface BaixaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Baixa'], meta: { name: 'Baixa' } }
    /**
     * Find zero or one Baixa that matches the filter.
     * @param {BaixaFindUniqueArgs} args - Arguments to find a Baixa
     * @example
     * // Get one Baixa
     * const baixa = await prisma.baixa.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BaixaFindUniqueArgs>(args: SelectSubset<T, BaixaFindUniqueArgs<ExtArgs>>): Prisma__BaixaClient<$Result.GetResult<Prisma.$BaixaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Baixa that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BaixaFindUniqueOrThrowArgs} args - Arguments to find a Baixa
     * @example
     * // Get one Baixa
     * const baixa = await prisma.baixa.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BaixaFindUniqueOrThrowArgs>(args: SelectSubset<T, BaixaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BaixaClient<$Result.GetResult<Prisma.$BaixaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Baixa that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BaixaFindFirstArgs} args - Arguments to find a Baixa
     * @example
     * // Get one Baixa
     * const baixa = await prisma.baixa.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BaixaFindFirstArgs>(args?: SelectSubset<T, BaixaFindFirstArgs<ExtArgs>>): Prisma__BaixaClient<$Result.GetResult<Prisma.$BaixaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Baixa that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BaixaFindFirstOrThrowArgs} args - Arguments to find a Baixa
     * @example
     * // Get one Baixa
     * const baixa = await prisma.baixa.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BaixaFindFirstOrThrowArgs>(args?: SelectSubset<T, BaixaFindFirstOrThrowArgs<ExtArgs>>): Prisma__BaixaClient<$Result.GetResult<Prisma.$BaixaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Baixas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BaixaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Baixas
     * const baixas = await prisma.baixa.findMany()
     * 
     * // Get first 10 Baixas
     * const baixas = await prisma.baixa.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const baixaWithIdOnly = await prisma.baixa.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BaixaFindManyArgs>(args?: SelectSubset<T, BaixaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BaixaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Baixa.
     * @param {BaixaCreateArgs} args - Arguments to create a Baixa.
     * @example
     * // Create one Baixa
     * const Baixa = await prisma.baixa.create({
     *   data: {
     *     // ... data to create a Baixa
     *   }
     * })
     * 
     */
    create<T extends BaixaCreateArgs>(args: SelectSubset<T, BaixaCreateArgs<ExtArgs>>): Prisma__BaixaClient<$Result.GetResult<Prisma.$BaixaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Baixas.
     * @param {BaixaCreateManyArgs} args - Arguments to create many Baixas.
     * @example
     * // Create many Baixas
     * const baixa = await prisma.baixa.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BaixaCreateManyArgs>(args?: SelectSubset<T, BaixaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Baixa.
     * @param {BaixaDeleteArgs} args - Arguments to delete one Baixa.
     * @example
     * // Delete one Baixa
     * const Baixa = await prisma.baixa.delete({
     *   where: {
     *     // ... filter to delete one Baixa
     *   }
     * })
     * 
     */
    delete<T extends BaixaDeleteArgs>(args: SelectSubset<T, BaixaDeleteArgs<ExtArgs>>): Prisma__BaixaClient<$Result.GetResult<Prisma.$BaixaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Baixa.
     * @param {BaixaUpdateArgs} args - Arguments to update one Baixa.
     * @example
     * // Update one Baixa
     * const baixa = await prisma.baixa.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BaixaUpdateArgs>(args: SelectSubset<T, BaixaUpdateArgs<ExtArgs>>): Prisma__BaixaClient<$Result.GetResult<Prisma.$BaixaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Baixas.
     * @param {BaixaDeleteManyArgs} args - Arguments to filter Baixas to delete.
     * @example
     * // Delete a few Baixas
     * const { count } = await prisma.baixa.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BaixaDeleteManyArgs>(args?: SelectSubset<T, BaixaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Baixas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BaixaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Baixas
     * const baixa = await prisma.baixa.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BaixaUpdateManyArgs>(args: SelectSubset<T, BaixaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Baixa.
     * @param {BaixaUpsertArgs} args - Arguments to update or create a Baixa.
     * @example
     * // Update or create a Baixa
     * const baixa = await prisma.baixa.upsert({
     *   create: {
     *     // ... data to create a Baixa
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Baixa we want to update
     *   }
     * })
     */
    upsert<T extends BaixaUpsertArgs>(args: SelectSubset<T, BaixaUpsertArgs<ExtArgs>>): Prisma__BaixaClient<$Result.GetResult<Prisma.$BaixaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Baixas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BaixaCountArgs} args - Arguments to filter Baixas to count.
     * @example
     * // Count the number of Baixas
     * const count = await prisma.baixa.count({
     *   where: {
     *     // ... the filter for the Baixas we want to count
     *   }
     * })
    **/
    count<T extends BaixaCountArgs>(
      args?: Subset<T, BaixaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BaixaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Baixa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BaixaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BaixaAggregateArgs>(args: Subset<T, BaixaAggregateArgs>): Prisma.PrismaPromise<GetBaixaAggregateType<T>>

    /**
     * Group by Baixa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BaixaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BaixaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BaixaGroupByArgs['orderBy'] }
        : { orderBy?: BaixaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BaixaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBaixaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Baixa model
   */
  readonly fields: BaixaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Baixa.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BaixaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Roupa<T extends RoupasDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoupasDefaultArgs<ExtArgs>>): Prisma__RoupasClient<$Result.GetResult<Prisma.$RoupasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Baixa model
   */
  interface BaixaFieldRefs {
    readonly id: FieldRef<"Baixa", 'Int'>
    readonly roupa_id: FieldRef<"Baixa", 'Int'>
    readonly quantidade: FieldRef<"Baixa", 'Int'>
    readonly data_baixa: FieldRef<"Baixa", 'DateTime'>
    readonly motivo: FieldRef<"Baixa", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Baixa findUnique
   */
  export type BaixaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baixa
     */
    select?: BaixaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Baixa
     */
    omit?: BaixaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaixaInclude<ExtArgs> | null
    /**
     * Filter, which Baixa to fetch.
     */
    where: BaixaWhereUniqueInput
  }

  /**
   * Baixa findUniqueOrThrow
   */
  export type BaixaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baixa
     */
    select?: BaixaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Baixa
     */
    omit?: BaixaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaixaInclude<ExtArgs> | null
    /**
     * Filter, which Baixa to fetch.
     */
    where: BaixaWhereUniqueInput
  }

  /**
   * Baixa findFirst
   */
  export type BaixaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baixa
     */
    select?: BaixaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Baixa
     */
    omit?: BaixaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaixaInclude<ExtArgs> | null
    /**
     * Filter, which Baixa to fetch.
     */
    where?: BaixaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baixas to fetch.
     */
    orderBy?: BaixaOrderByWithRelationInput | BaixaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Baixas.
     */
    cursor?: BaixaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baixas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baixas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Baixas.
     */
    distinct?: BaixaScalarFieldEnum | BaixaScalarFieldEnum[]
  }

  /**
   * Baixa findFirstOrThrow
   */
  export type BaixaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baixa
     */
    select?: BaixaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Baixa
     */
    omit?: BaixaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaixaInclude<ExtArgs> | null
    /**
     * Filter, which Baixa to fetch.
     */
    where?: BaixaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baixas to fetch.
     */
    orderBy?: BaixaOrderByWithRelationInput | BaixaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Baixas.
     */
    cursor?: BaixaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baixas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baixas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Baixas.
     */
    distinct?: BaixaScalarFieldEnum | BaixaScalarFieldEnum[]
  }

  /**
   * Baixa findMany
   */
  export type BaixaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baixa
     */
    select?: BaixaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Baixa
     */
    omit?: BaixaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaixaInclude<ExtArgs> | null
    /**
     * Filter, which Baixas to fetch.
     */
    where?: BaixaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baixas to fetch.
     */
    orderBy?: BaixaOrderByWithRelationInput | BaixaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Baixas.
     */
    cursor?: BaixaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baixas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baixas.
     */
    skip?: number
    distinct?: BaixaScalarFieldEnum | BaixaScalarFieldEnum[]
  }

  /**
   * Baixa create
   */
  export type BaixaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baixa
     */
    select?: BaixaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Baixa
     */
    omit?: BaixaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaixaInclude<ExtArgs> | null
    /**
     * The data needed to create a Baixa.
     */
    data: XOR<BaixaCreateInput, BaixaUncheckedCreateInput>
  }

  /**
   * Baixa createMany
   */
  export type BaixaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Baixas.
     */
    data: BaixaCreateManyInput | BaixaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Baixa update
   */
  export type BaixaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baixa
     */
    select?: BaixaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Baixa
     */
    omit?: BaixaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaixaInclude<ExtArgs> | null
    /**
     * The data needed to update a Baixa.
     */
    data: XOR<BaixaUpdateInput, BaixaUncheckedUpdateInput>
    /**
     * Choose, which Baixa to update.
     */
    where: BaixaWhereUniqueInput
  }

  /**
   * Baixa updateMany
   */
  export type BaixaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Baixas.
     */
    data: XOR<BaixaUpdateManyMutationInput, BaixaUncheckedUpdateManyInput>
    /**
     * Filter which Baixas to update
     */
    where?: BaixaWhereInput
    /**
     * Limit how many Baixas to update.
     */
    limit?: number
  }

  /**
   * Baixa upsert
   */
  export type BaixaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baixa
     */
    select?: BaixaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Baixa
     */
    omit?: BaixaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaixaInclude<ExtArgs> | null
    /**
     * The filter to search for the Baixa to update in case it exists.
     */
    where: BaixaWhereUniqueInput
    /**
     * In case the Baixa found by the `where` argument doesn't exist, create a new Baixa with this data.
     */
    create: XOR<BaixaCreateInput, BaixaUncheckedCreateInput>
    /**
     * In case the Baixa was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BaixaUpdateInput, BaixaUncheckedUpdateInput>
  }

  /**
   * Baixa delete
   */
  export type BaixaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baixa
     */
    select?: BaixaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Baixa
     */
    omit?: BaixaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaixaInclude<ExtArgs> | null
    /**
     * Filter which Baixa to delete.
     */
    where: BaixaWhereUniqueInput
  }

  /**
   * Baixa deleteMany
   */
  export type BaixaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Baixas to delete
     */
    where?: BaixaWhereInput
    /**
     * Limit how many Baixas to delete.
     */
    limit?: number
  }

  /**
   * Baixa without action
   */
  export type BaixaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baixa
     */
    select?: BaixaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Baixa
     */
    omit?: BaixaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaixaInclude<ExtArgs> | null
  }


  /**
   * Model Cliente
   */

  export type AggregateCliente = {
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  export type ClienteAvgAggregateOutputType = {
    id: number | null
  }

  export type ClienteSumAggregateOutputType = {
    id: number | null
  }

  export type ClienteMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    cpf: string | null
    criado_em: Date | null
    telefone: string | null
    endereco: string | null
  }

  export type ClienteMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    cpf: string | null
    criado_em: Date | null
    telefone: string | null
    endereco: string | null
  }

  export type ClienteCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    cpf: number
    criado_em: number
    telefone: number
    endereco: number
    _all: number
  }


  export type ClienteAvgAggregateInputType = {
    id?: true
  }

  export type ClienteSumAggregateInputType = {
    id?: true
  }

  export type ClienteMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    cpf?: true
    criado_em?: true
    telefone?: true
    endereco?: true
  }

  export type ClienteMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    cpf?: true
    criado_em?: true
    telefone?: true
    endereco?: true
  }

  export type ClienteCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    cpf?: true
    criado_em?: true
    telefone?: true
    endereco?: true
    _all?: true
  }

  export type ClienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cliente to aggregate.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clientes
    **/
    _count?: true | ClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteMaxAggregateInputType
  }

  export type GetClienteAggregateType<T extends ClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCliente[P]>
      : GetScalarType<T[P], AggregateCliente[P]>
  }




  export type ClienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteWhereInput
    orderBy?: ClienteOrderByWithAggregationInput | ClienteOrderByWithAggregationInput[]
    by: ClienteScalarFieldEnum[] | ClienteScalarFieldEnum
    having?: ClienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteCountAggregateInputType | true
    _avg?: ClienteAvgAggregateInputType
    _sum?: ClienteSumAggregateInputType
    _min?: ClienteMinAggregateInputType
    _max?: ClienteMaxAggregateInputType
  }

  export type ClienteGroupByOutputType = {
    id: number
    nome: string
    email: string
    cpf: string
    criado_em: Date
    telefone: string | null
    endereco: string | null
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  type GetClienteGroupByPayload<T extends ClienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteGroupByOutputType[P]>
        }
      >
    >


  export type ClienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    cpf?: boolean
    criado_em?: boolean
    telefone?: boolean
    endereco?: boolean
    Condicionais?: boolean | Cliente$CondicionaisArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cliente"]>



  export type ClienteSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    cpf?: boolean
    criado_em?: boolean
    telefone?: boolean
    endereco?: boolean
  }

  export type ClienteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "email" | "cpf" | "criado_em" | "telefone" | "endereco", ExtArgs["result"]["cliente"]>
  export type ClienteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Condicionais?: boolean | Cliente$CondicionaisArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ClientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cliente"
    objects: {
      Condicionais: Prisma.$CondicionaisPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      cpf: string
      criado_em: Date
      telefone: string | null
      endereco: string | null
    }, ExtArgs["result"]["cliente"]>
    composites: {}
  }

  type ClienteGetPayload<S extends boolean | null | undefined | ClienteDefaultArgs> = $Result.GetResult<Prisma.$ClientePayload, S>

  type ClienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClienteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClienteCountAggregateInputType | true
    }

  export interface ClienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cliente'], meta: { name: 'Cliente' } }
    /**
     * Find zero or one Cliente that matches the filter.
     * @param {ClienteFindUniqueArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClienteFindUniqueArgs>(args: SelectSubset<T, ClienteFindUniqueArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cliente that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClienteFindUniqueOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClienteFindUniqueOrThrowArgs>(args: SelectSubset<T, ClienteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClienteFindFirstArgs>(args?: SelectSubset<T, ClienteFindFirstArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cliente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClienteFindFirstOrThrowArgs>(args?: SelectSubset<T, ClienteFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.cliente.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.cliente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clienteWithIdOnly = await prisma.cliente.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClienteFindManyArgs>(args?: SelectSubset<T, ClienteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cliente.
     * @param {ClienteCreateArgs} args - Arguments to create a Cliente.
     * @example
     * // Create one Cliente
     * const Cliente = await prisma.cliente.create({
     *   data: {
     *     // ... data to create a Cliente
     *   }
     * })
     * 
     */
    create<T extends ClienteCreateArgs>(args: SelectSubset<T, ClienteCreateArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clientes.
     * @param {ClienteCreateManyArgs} args - Arguments to create many Clientes.
     * @example
     * // Create many Clientes
     * const cliente = await prisma.cliente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClienteCreateManyArgs>(args?: SelectSubset<T, ClienteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cliente.
     * @param {ClienteDeleteArgs} args - Arguments to delete one Cliente.
     * @example
     * // Delete one Cliente
     * const Cliente = await prisma.cliente.delete({
     *   where: {
     *     // ... filter to delete one Cliente
     *   }
     * })
     * 
     */
    delete<T extends ClienteDeleteArgs>(args: SelectSubset<T, ClienteDeleteArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cliente.
     * @param {ClienteUpdateArgs} args - Arguments to update one Cliente.
     * @example
     * // Update one Cliente
     * const cliente = await prisma.cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClienteUpdateArgs>(args: SelectSubset<T, ClienteUpdateArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clientes.
     * @param {ClienteDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClienteDeleteManyArgs>(args?: SelectSubset<T, ClienteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClienteUpdateManyArgs>(args: SelectSubset<T, ClienteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cliente.
     * @param {ClienteUpsertArgs} args - Arguments to update or create a Cliente.
     * @example
     * // Update or create a Cliente
     * const cliente = await prisma.cliente.upsert({
     *   create: {
     *     // ... data to create a Cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cliente we want to update
     *   }
     * })
     */
    upsert<T extends ClienteUpsertArgs>(args: SelectSubset<T, ClienteUpsertArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.cliente.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends ClienteCountArgs>(
      args?: Subset<T, ClienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteAggregateArgs>(args: Subset<T, ClienteAggregateArgs>): Prisma.PrismaPromise<GetClienteAggregateType<T>>

    /**
     * Group by Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteGroupByArgs['orderBy'] }
        : { orderBy?: ClienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cliente model
   */
  readonly fields: ClienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Condicionais<T extends Cliente$CondicionaisArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$CondicionaisArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CondicionaisPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cliente model
   */
  interface ClienteFieldRefs {
    readonly id: FieldRef<"Cliente", 'Int'>
    readonly nome: FieldRef<"Cliente", 'String'>
    readonly email: FieldRef<"Cliente", 'String'>
    readonly cpf: FieldRef<"Cliente", 'String'>
    readonly criado_em: FieldRef<"Cliente", 'DateTime'>
    readonly telefone: FieldRef<"Cliente", 'String'>
    readonly endereco: FieldRef<"Cliente", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Cliente findUnique
   */
  export type ClienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findUniqueOrThrow
   */
  export type ClienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findFirst
   */
  export type ClienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente findFirstOrThrow
   */
  export type ClienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente findMany
   */
  export type ClienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Clientes to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente create
   */
  export type ClienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to create a Cliente.
     */
    data: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
  }

  /**
   * Cliente createMany
   */
  export type ClienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clientes.
     */
    data: ClienteCreateManyInput | ClienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cliente update
   */
  export type ClienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to update a Cliente.
     */
    data: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
    /**
     * Choose, which Cliente to update.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente updateMany
   */
  export type ClienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clientes.
     */
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyInput>
    /**
     * Filter which Clientes to update
     */
    where?: ClienteWhereInput
    /**
     * Limit how many Clientes to update.
     */
    limit?: number
  }

  /**
   * Cliente upsert
   */
  export type ClienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The filter to search for the Cliente to update in case it exists.
     */
    where: ClienteWhereUniqueInput
    /**
     * In case the Cliente found by the `where` argument doesn't exist, create a new Cliente with this data.
     */
    create: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
    /**
     * In case the Cliente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
  }

  /**
   * Cliente delete
   */
  export type ClienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter which Cliente to delete.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente deleteMany
   */
  export type ClienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clientes to delete
     */
    where?: ClienteWhereInput
    /**
     * Limit how many Clientes to delete.
     */
    limit?: number
  }

  /**
   * Cliente.Condicionais
   */
  export type Cliente$CondicionaisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condicionais
     */
    select?: CondicionaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Condicionais
     */
    omit?: CondicionaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CondicionaisInclude<ExtArgs> | null
    where?: CondicionaisWhereInput
    orderBy?: CondicionaisOrderByWithRelationInput | CondicionaisOrderByWithRelationInput[]
    cursor?: CondicionaisWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CondicionaisScalarFieldEnum | CondicionaisScalarFieldEnum[]
  }

  /**
   * Cliente without action
   */
  export type ClienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
  }


  /**
   * Model Compras
   */

  export type AggregateCompras = {
    _count: ComprasCountAggregateOutputType | null
    _avg: ComprasAvgAggregateOutputType | null
    _sum: ComprasSumAggregateOutputType | null
    _min: ComprasMinAggregateOutputType | null
    _max: ComprasMaxAggregateOutputType | null
  }

  export type ComprasAvgAggregateOutputType = {
    id: number | null
    valor_pago: number | null
  }

  export type ComprasSumAggregateOutputType = {
    id: number | null
    valor_pago: number | null
  }

  export type ComprasMinAggregateOutputType = {
    id: number | null
    data_compra: Date | null
    forma_pgto: string | null
    valor_pago: number | null
    fornecendor: string | null
    telefone_forncedor: string | null
  }

  export type ComprasMaxAggregateOutputType = {
    id: number | null
    data_compra: Date | null
    forma_pgto: string | null
    valor_pago: number | null
    fornecendor: string | null
    telefone_forncedor: string | null
  }

  export type ComprasCountAggregateOutputType = {
    id: number
    data_compra: number
    forma_pgto: number
    valor_pago: number
    fornecendor: number
    telefone_forncedor: number
    _all: number
  }


  export type ComprasAvgAggregateInputType = {
    id?: true
    valor_pago?: true
  }

  export type ComprasSumAggregateInputType = {
    id?: true
    valor_pago?: true
  }

  export type ComprasMinAggregateInputType = {
    id?: true
    data_compra?: true
    forma_pgto?: true
    valor_pago?: true
    fornecendor?: true
    telefone_forncedor?: true
  }

  export type ComprasMaxAggregateInputType = {
    id?: true
    data_compra?: true
    forma_pgto?: true
    valor_pago?: true
    fornecendor?: true
    telefone_forncedor?: true
  }

  export type ComprasCountAggregateInputType = {
    id?: true
    data_compra?: true
    forma_pgto?: true
    valor_pago?: true
    fornecendor?: true
    telefone_forncedor?: true
    _all?: true
  }

  export type ComprasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Compras to aggregate.
     */
    where?: ComprasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compras to fetch.
     */
    orderBy?: ComprasOrderByWithRelationInput | ComprasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComprasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Compras
    **/
    _count?: true | ComprasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ComprasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ComprasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComprasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComprasMaxAggregateInputType
  }

  export type GetComprasAggregateType<T extends ComprasAggregateArgs> = {
        [P in keyof T & keyof AggregateCompras]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompras[P]>
      : GetScalarType<T[P], AggregateCompras[P]>
  }




  export type ComprasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComprasWhereInput
    orderBy?: ComprasOrderByWithAggregationInput | ComprasOrderByWithAggregationInput[]
    by: ComprasScalarFieldEnum[] | ComprasScalarFieldEnum
    having?: ComprasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComprasCountAggregateInputType | true
    _avg?: ComprasAvgAggregateInputType
    _sum?: ComprasSumAggregateInputType
    _min?: ComprasMinAggregateInputType
    _max?: ComprasMaxAggregateInputType
  }

  export type ComprasGroupByOutputType = {
    id: number
    data_compra: Date
    forma_pgto: string
    valor_pago: number
    fornecendor: string | null
    telefone_forncedor: string | null
    _count: ComprasCountAggregateOutputType | null
    _avg: ComprasAvgAggregateOutputType | null
    _sum: ComprasSumAggregateOutputType | null
    _min: ComprasMinAggregateOutputType | null
    _max: ComprasMaxAggregateOutputType | null
  }

  type GetComprasGroupByPayload<T extends ComprasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ComprasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComprasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComprasGroupByOutputType[P]>
            : GetScalarType<T[P], ComprasGroupByOutputType[P]>
        }
      >
    >


  export type ComprasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    data_compra?: boolean
    forma_pgto?: boolean
    valor_pago?: boolean
    fornecendor?: boolean
    telefone_forncedor?: boolean
    ComprasItens?: boolean | Compras$ComprasItensArgs<ExtArgs>
    _count?: boolean | ComprasCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["compras"]>



  export type ComprasSelectScalar = {
    id?: boolean
    data_compra?: boolean
    forma_pgto?: boolean
    valor_pago?: boolean
    fornecendor?: boolean
    telefone_forncedor?: boolean
  }

  export type ComprasOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "data_compra" | "forma_pgto" | "valor_pago" | "fornecendor" | "telefone_forncedor", ExtArgs["result"]["compras"]>
  export type ComprasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ComprasItens?: boolean | Compras$ComprasItensArgs<ExtArgs>
    _count?: boolean | ComprasCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ComprasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Compras"
    objects: {
      ComprasItens: Prisma.$ComprasItensPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      data_compra: Date
      forma_pgto: string
      valor_pago: number
      fornecendor: string | null
      telefone_forncedor: string | null
    }, ExtArgs["result"]["compras"]>
    composites: {}
  }

  type ComprasGetPayload<S extends boolean | null | undefined | ComprasDefaultArgs> = $Result.GetResult<Prisma.$ComprasPayload, S>

  type ComprasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ComprasFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ComprasCountAggregateInputType | true
    }

  export interface ComprasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Compras'], meta: { name: 'Compras' } }
    /**
     * Find zero or one Compras that matches the filter.
     * @param {ComprasFindUniqueArgs} args - Arguments to find a Compras
     * @example
     * // Get one Compras
     * const compras = await prisma.compras.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ComprasFindUniqueArgs>(args: SelectSubset<T, ComprasFindUniqueArgs<ExtArgs>>): Prisma__ComprasClient<$Result.GetResult<Prisma.$ComprasPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Compras that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ComprasFindUniqueOrThrowArgs} args - Arguments to find a Compras
     * @example
     * // Get one Compras
     * const compras = await prisma.compras.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ComprasFindUniqueOrThrowArgs>(args: SelectSubset<T, ComprasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ComprasClient<$Result.GetResult<Prisma.$ComprasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Compras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComprasFindFirstArgs} args - Arguments to find a Compras
     * @example
     * // Get one Compras
     * const compras = await prisma.compras.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ComprasFindFirstArgs>(args?: SelectSubset<T, ComprasFindFirstArgs<ExtArgs>>): Prisma__ComprasClient<$Result.GetResult<Prisma.$ComprasPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Compras that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComprasFindFirstOrThrowArgs} args - Arguments to find a Compras
     * @example
     * // Get one Compras
     * const compras = await prisma.compras.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ComprasFindFirstOrThrowArgs>(args?: SelectSubset<T, ComprasFindFirstOrThrowArgs<ExtArgs>>): Prisma__ComprasClient<$Result.GetResult<Prisma.$ComprasPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Compras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComprasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Compras
     * const compras = await prisma.compras.findMany()
     * 
     * // Get first 10 Compras
     * const compras = await prisma.compras.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const comprasWithIdOnly = await prisma.compras.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ComprasFindManyArgs>(args?: SelectSubset<T, ComprasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComprasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Compras.
     * @param {ComprasCreateArgs} args - Arguments to create a Compras.
     * @example
     * // Create one Compras
     * const Compras = await prisma.compras.create({
     *   data: {
     *     // ... data to create a Compras
     *   }
     * })
     * 
     */
    create<T extends ComprasCreateArgs>(args: SelectSubset<T, ComprasCreateArgs<ExtArgs>>): Prisma__ComprasClient<$Result.GetResult<Prisma.$ComprasPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Compras.
     * @param {ComprasCreateManyArgs} args - Arguments to create many Compras.
     * @example
     * // Create many Compras
     * const compras = await prisma.compras.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ComprasCreateManyArgs>(args?: SelectSubset<T, ComprasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Compras.
     * @param {ComprasDeleteArgs} args - Arguments to delete one Compras.
     * @example
     * // Delete one Compras
     * const Compras = await prisma.compras.delete({
     *   where: {
     *     // ... filter to delete one Compras
     *   }
     * })
     * 
     */
    delete<T extends ComprasDeleteArgs>(args: SelectSubset<T, ComprasDeleteArgs<ExtArgs>>): Prisma__ComprasClient<$Result.GetResult<Prisma.$ComprasPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Compras.
     * @param {ComprasUpdateArgs} args - Arguments to update one Compras.
     * @example
     * // Update one Compras
     * const compras = await prisma.compras.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ComprasUpdateArgs>(args: SelectSubset<T, ComprasUpdateArgs<ExtArgs>>): Prisma__ComprasClient<$Result.GetResult<Prisma.$ComprasPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Compras.
     * @param {ComprasDeleteManyArgs} args - Arguments to filter Compras to delete.
     * @example
     * // Delete a few Compras
     * const { count } = await prisma.compras.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ComprasDeleteManyArgs>(args?: SelectSubset<T, ComprasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Compras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComprasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Compras
     * const compras = await prisma.compras.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ComprasUpdateManyArgs>(args: SelectSubset<T, ComprasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Compras.
     * @param {ComprasUpsertArgs} args - Arguments to update or create a Compras.
     * @example
     * // Update or create a Compras
     * const compras = await prisma.compras.upsert({
     *   create: {
     *     // ... data to create a Compras
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Compras we want to update
     *   }
     * })
     */
    upsert<T extends ComprasUpsertArgs>(args: SelectSubset<T, ComprasUpsertArgs<ExtArgs>>): Prisma__ComprasClient<$Result.GetResult<Prisma.$ComprasPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Compras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComprasCountArgs} args - Arguments to filter Compras to count.
     * @example
     * // Count the number of Compras
     * const count = await prisma.compras.count({
     *   where: {
     *     // ... the filter for the Compras we want to count
     *   }
     * })
    **/
    count<T extends ComprasCountArgs>(
      args?: Subset<T, ComprasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComprasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Compras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComprasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComprasAggregateArgs>(args: Subset<T, ComprasAggregateArgs>): Prisma.PrismaPromise<GetComprasAggregateType<T>>

    /**
     * Group by Compras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComprasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComprasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComprasGroupByArgs['orderBy'] }
        : { orderBy?: ComprasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComprasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComprasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Compras model
   */
  readonly fields: ComprasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Compras.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ComprasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ComprasItens<T extends Compras$ComprasItensArgs<ExtArgs> = {}>(args?: Subset<T, Compras$ComprasItensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComprasItensPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Compras model
   */
  interface ComprasFieldRefs {
    readonly id: FieldRef<"Compras", 'Int'>
    readonly data_compra: FieldRef<"Compras", 'DateTime'>
    readonly forma_pgto: FieldRef<"Compras", 'String'>
    readonly valor_pago: FieldRef<"Compras", 'Float'>
    readonly fornecendor: FieldRef<"Compras", 'String'>
    readonly telefone_forncedor: FieldRef<"Compras", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Compras findUnique
   */
  export type ComprasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compras
     */
    select?: ComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compras
     */
    omit?: ComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComprasInclude<ExtArgs> | null
    /**
     * Filter, which Compras to fetch.
     */
    where: ComprasWhereUniqueInput
  }

  /**
   * Compras findUniqueOrThrow
   */
  export type ComprasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compras
     */
    select?: ComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compras
     */
    omit?: ComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComprasInclude<ExtArgs> | null
    /**
     * Filter, which Compras to fetch.
     */
    where: ComprasWhereUniqueInput
  }

  /**
   * Compras findFirst
   */
  export type ComprasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compras
     */
    select?: ComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compras
     */
    omit?: ComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComprasInclude<ExtArgs> | null
    /**
     * Filter, which Compras to fetch.
     */
    where?: ComprasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compras to fetch.
     */
    orderBy?: ComprasOrderByWithRelationInput | ComprasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compras.
     */
    cursor?: ComprasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compras.
     */
    distinct?: ComprasScalarFieldEnum | ComprasScalarFieldEnum[]
  }

  /**
   * Compras findFirstOrThrow
   */
  export type ComprasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compras
     */
    select?: ComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compras
     */
    omit?: ComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComprasInclude<ExtArgs> | null
    /**
     * Filter, which Compras to fetch.
     */
    where?: ComprasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compras to fetch.
     */
    orderBy?: ComprasOrderByWithRelationInput | ComprasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compras.
     */
    cursor?: ComprasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compras.
     */
    distinct?: ComprasScalarFieldEnum | ComprasScalarFieldEnum[]
  }

  /**
   * Compras findMany
   */
  export type ComprasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compras
     */
    select?: ComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compras
     */
    omit?: ComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComprasInclude<ExtArgs> | null
    /**
     * Filter, which Compras to fetch.
     */
    where?: ComprasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compras to fetch.
     */
    orderBy?: ComprasOrderByWithRelationInput | ComprasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Compras.
     */
    cursor?: ComprasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compras.
     */
    skip?: number
    distinct?: ComprasScalarFieldEnum | ComprasScalarFieldEnum[]
  }

  /**
   * Compras create
   */
  export type ComprasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compras
     */
    select?: ComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compras
     */
    omit?: ComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComprasInclude<ExtArgs> | null
    /**
     * The data needed to create a Compras.
     */
    data: XOR<ComprasCreateInput, ComprasUncheckedCreateInput>
  }

  /**
   * Compras createMany
   */
  export type ComprasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Compras.
     */
    data: ComprasCreateManyInput | ComprasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Compras update
   */
  export type ComprasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compras
     */
    select?: ComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compras
     */
    omit?: ComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComprasInclude<ExtArgs> | null
    /**
     * The data needed to update a Compras.
     */
    data: XOR<ComprasUpdateInput, ComprasUncheckedUpdateInput>
    /**
     * Choose, which Compras to update.
     */
    where: ComprasWhereUniqueInput
  }

  /**
   * Compras updateMany
   */
  export type ComprasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Compras.
     */
    data: XOR<ComprasUpdateManyMutationInput, ComprasUncheckedUpdateManyInput>
    /**
     * Filter which Compras to update
     */
    where?: ComprasWhereInput
    /**
     * Limit how many Compras to update.
     */
    limit?: number
  }

  /**
   * Compras upsert
   */
  export type ComprasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compras
     */
    select?: ComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compras
     */
    omit?: ComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComprasInclude<ExtArgs> | null
    /**
     * The filter to search for the Compras to update in case it exists.
     */
    where: ComprasWhereUniqueInput
    /**
     * In case the Compras found by the `where` argument doesn't exist, create a new Compras with this data.
     */
    create: XOR<ComprasCreateInput, ComprasUncheckedCreateInput>
    /**
     * In case the Compras was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComprasUpdateInput, ComprasUncheckedUpdateInput>
  }

  /**
   * Compras delete
   */
  export type ComprasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compras
     */
    select?: ComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compras
     */
    omit?: ComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComprasInclude<ExtArgs> | null
    /**
     * Filter which Compras to delete.
     */
    where: ComprasWhereUniqueInput
  }

  /**
   * Compras deleteMany
   */
  export type ComprasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Compras to delete
     */
    where?: ComprasWhereInput
    /**
     * Limit how many Compras to delete.
     */
    limit?: number
  }

  /**
   * Compras.ComprasItens
   */
  export type Compras$ComprasItensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComprasItens
     */
    select?: ComprasItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComprasItens
     */
    omit?: ComprasItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComprasItensInclude<ExtArgs> | null
    where?: ComprasItensWhereInput
    orderBy?: ComprasItensOrderByWithRelationInput | ComprasItensOrderByWithRelationInput[]
    cursor?: ComprasItensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComprasItensScalarFieldEnum | ComprasItensScalarFieldEnum[]
  }

  /**
   * Compras without action
   */
  export type ComprasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compras
     */
    select?: ComprasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compras
     */
    omit?: ComprasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComprasInclude<ExtArgs> | null
  }


  /**
   * Model ComprasItens
   */

  export type AggregateComprasItens = {
    _count: ComprasItensCountAggregateOutputType | null
    _avg: ComprasItensAvgAggregateOutputType | null
    _sum: ComprasItensSumAggregateOutputType | null
    _min: ComprasItensMinAggregateOutputType | null
    _max: ComprasItensMaxAggregateOutputType | null
  }

  export type ComprasItensAvgAggregateOutputType = {
    id: number | null
    roupas_id: number | null
    compras_id: number | null
    quatidade: number | null
    valor_peça: number | null
  }

  export type ComprasItensSumAggregateOutputType = {
    id: number | null
    roupas_id: number | null
    compras_id: number | null
    quatidade: number | null
    valor_peça: number | null
  }

  export type ComprasItensMinAggregateOutputType = {
    id: number | null
    roupas_id: number | null
    compras_id: number | null
    quatidade: number | null
    valor_peça: number | null
  }

  export type ComprasItensMaxAggregateOutputType = {
    id: number | null
    roupas_id: number | null
    compras_id: number | null
    quatidade: number | null
    valor_peça: number | null
  }

  export type ComprasItensCountAggregateOutputType = {
    id: number
    roupas_id: number
    compras_id: number
    quatidade: number
    valor_peça: number
    _all: number
  }


  export type ComprasItensAvgAggregateInputType = {
    id?: true
    roupas_id?: true
    compras_id?: true
    quatidade?: true
    valor_peça?: true
  }

  export type ComprasItensSumAggregateInputType = {
    id?: true
    roupas_id?: true
    compras_id?: true
    quatidade?: true
    valor_peça?: true
  }

  export type ComprasItensMinAggregateInputType = {
    id?: true
    roupas_id?: true
    compras_id?: true
    quatidade?: true
    valor_peça?: true
  }

  export type ComprasItensMaxAggregateInputType = {
    id?: true
    roupas_id?: true
    compras_id?: true
    quatidade?: true
    valor_peça?: true
  }

  export type ComprasItensCountAggregateInputType = {
    id?: true
    roupas_id?: true
    compras_id?: true
    quatidade?: true
    valor_peça?: true
    _all?: true
  }

  export type ComprasItensAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComprasItens to aggregate.
     */
    where?: ComprasItensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComprasItens to fetch.
     */
    orderBy?: ComprasItensOrderByWithRelationInput | ComprasItensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComprasItensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComprasItens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComprasItens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ComprasItens
    **/
    _count?: true | ComprasItensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ComprasItensAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ComprasItensSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComprasItensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComprasItensMaxAggregateInputType
  }

  export type GetComprasItensAggregateType<T extends ComprasItensAggregateArgs> = {
        [P in keyof T & keyof AggregateComprasItens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComprasItens[P]>
      : GetScalarType<T[P], AggregateComprasItens[P]>
  }




  export type ComprasItensGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComprasItensWhereInput
    orderBy?: ComprasItensOrderByWithAggregationInput | ComprasItensOrderByWithAggregationInput[]
    by: ComprasItensScalarFieldEnum[] | ComprasItensScalarFieldEnum
    having?: ComprasItensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComprasItensCountAggregateInputType | true
    _avg?: ComprasItensAvgAggregateInputType
    _sum?: ComprasItensSumAggregateInputType
    _min?: ComprasItensMinAggregateInputType
    _max?: ComprasItensMaxAggregateInputType
  }

  export type ComprasItensGroupByOutputType = {
    id: number
    roupas_id: number
    compras_id: number
    quatidade: number
    valor_peça: number
    _count: ComprasItensCountAggregateOutputType | null
    _avg: ComprasItensAvgAggregateOutputType | null
    _sum: ComprasItensSumAggregateOutputType | null
    _min: ComprasItensMinAggregateOutputType | null
    _max: ComprasItensMaxAggregateOutputType | null
  }

  type GetComprasItensGroupByPayload<T extends ComprasItensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ComprasItensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComprasItensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComprasItensGroupByOutputType[P]>
            : GetScalarType<T[P], ComprasItensGroupByOutputType[P]>
        }
      >
    >


  export type ComprasItensSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roupas_id?: boolean
    compras_id?: boolean
    quatidade?: boolean
    valor_peça?: boolean
    Compras?: boolean | ComprasDefaultArgs<ExtArgs>
    Roupa?: boolean | RoupasDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comprasItens"]>



  export type ComprasItensSelectScalar = {
    id?: boolean
    roupas_id?: boolean
    compras_id?: boolean
    quatidade?: boolean
    valor_peça?: boolean
  }

  export type ComprasItensOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "roupas_id" | "compras_id" | "quatidade" | "valor_peça", ExtArgs["result"]["comprasItens"]>
  export type ComprasItensInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Compras?: boolean | ComprasDefaultArgs<ExtArgs>
    Roupa?: boolean | RoupasDefaultArgs<ExtArgs>
  }

  export type $ComprasItensPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ComprasItens"
    objects: {
      Compras: Prisma.$ComprasPayload<ExtArgs>
      Roupa: Prisma.$RoupasPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      roupas_id: number
      compras_id: number
      quatidade: number
      valor_peça: number
    }, ExtArgs["result"]["comprasItens"]>
    composites: {}
  }

  type ComprasItensGetPayload<S extends boolean | null | undefined | ComprasItensDefaultArgs> = $Result.GetResult<Prisma.$ComprasItensPayload, S>

  type ComprasItensCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ComprasItensFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ComprasItensCountAggregateInputType | true
    }

  export interface ComprasItensDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ComprasItens'], meta: { name: 'ComprasItens' } }
    /**
     * Find zero or one ComprasItens that matches the filter.
     * @param {ComprasItensFindUniqueArgs} args - Arguments to find a ComprasItens
     * @example
     * // Get one ComprasItens
     * const comprasItens = await prisma.comprasItens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ComprasItensFindUniqueArgs>(args: SelectSubset<T, ComprasItensFindUniqueArgs<ExtArgs>>): Prisma__ComprasItensClient<$Result.GetResult<Prisma.$ComprasItensPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ComprasItens that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ComprasItensFindUniqueOrThrowArgs} args - Arguments to find a ComprasItens
     * @example
     * // Get one ComprasItens
     * const comprasItens = await prisma.comprasItens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ComprasItensFindUniqueOrThrowArgs>(args: SelectSubset<T, ComprasItensFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ComprasItensClient<$Result.GetResult<Prisma.$ComprasItensPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ComprasItens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComprasItensFindFirstArgs} args - Arguments to find a ComprasItens
     * @example
     * // Get one ComprasItens
     * const comprasItens = await prisma.comprasItens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ComprasItensFindFirstArgs>(args?: SelectSubset<T, ComprasItensFindFirstArgs<ExtArgs>>): Prisma__ComprasItensClient<$Result.GetResult<Prisma.$ComprasItensPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ComprasItens that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComprasItensFindFirstOrThrowArgs} args - Arguments to find a ComprasItens
     * @example
     * // Get one ComprasItens
     * const comprasItens = await prisma.comprasItens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ComprasItensFindFirstOrThrowArgs>(args?: SelectSubset<T, ComprasItensFindFirstOrThrowArgs<ExtArgs>>): Prisma__ComprasItensClient<$Result.GetResult<Prisma.$ComprasItensPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ComprasItens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComprasItensFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ComprasItens
     * const comprasItens = await prisma.comprasItens.findMany()
     * 
     * // Get first 10 ComprasItens
     * const comprasItens = await prisma.comprasItens.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const comprasItensWithIdOnly = await prisma.comprasItens.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ComprasItensFindManyArgs>(args?: SelectSubset<T, ComprasItensFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComprasItensPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ComprasItens.
     * @param {ComprasItensCreateArgs} args - Arguments to create a ComprasItens.
     * @example
     * // Create one ComprasItens
     * const ComprasItens = await prisma.comprasItens.create({
     *   data: {
     *     // ... data to create a ComprasItens
     *   }
     * })
     * 
     */
    create<T extends ComprasItensCreateArgs>(args: SelectSubset<T, ComprasItensCreateArgs<ExtArgs>>): Prisma__ComprasItensClient<$Result.GetResult<Prisma.$ComprasItensPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ComprasItens.
     * @param {ComprasItensCreateManyArgs} args - Arguments to create many ComprasItens.
     * @example
     * // Create many ComprasItens
     * const comprasItens = await prisma.comprasItens.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ComprasItensCreateManyArgs>(args?: SelectSubset<T, ComprasItensCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ComprasItens.
     * @param {ComprasItensDeleteArgs} args - Arguments to delete one ComprasItens.
     * @example
     * // Delete one ComprasItens
     * const ComprasItens = await prisma.comprasItens.delete({
     *   where: {
     *     // ... filter to delete one ComprasItens
     *   }
     * })
     * 
     */
    delete<T extends ComprasItensDeleteArgs>(args: SelectSubset<T, ComprasItensDeleteArgs<ExtArgs>>): Prisma__ComprasItensClient<$Result.GetResult<Prisma.$ComprasItensPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ComprasItens.
     * @param {ComprasItensUpdateArgs} args - Arguments to update one ComprasItens.
     * @example
     * // Update one ComprasItens
     * const comprasItens = await prisma.comprasItens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ComprasItensUpdateArgs>(args: SelectSubset<T, ComprasItensUpdateArgs<ExtArgs>>): Prisma__ComprasItensClient<$Result.GetResult<Prisma.$ComprasItensPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ComprasItens.
     * @param {ComprasItensDeleteManyArgs} args - Arguments to filter ComprasItens to delete.
     * @example
     * // Delete a few ComprasItens
     * const { count } = await prisma.comprasItens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ComprasItensDeleteManyArgs>(args?: SelectSubset<T, ComprasItensDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ComprasItens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComprasItensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ComprasItens
     * const comprasItens = await prisma.comprasItens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ComprasItensUpdateManyArgs>(args: SelectSubset<T, ComprasItensUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ComprasItens.
     * @param {ComprasItensUpsertArgs} args - Arguments to update or create a ComprasItens.
     * @example
     * // Update or create a ComprasItens
     * const comprasItens = await prisma.comprasItens.upsert({
     *   create: {
     *     // ... data to create a ComprasItens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ComprasItens we want to update
     *   }
     * })
     */
    upsert<T extends ComprasItensUpsertArgs>(args: SelectSubset<T, ComprasItensUpsertArgs<ExtArgs>>): Prisma__ComprasItensClient<$Result.GetResult<Prisma.$ComprasItensPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ComprasItens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComprasItensCountArgs} args - Arguments to filter ComprasItens to count.
     * @example
     * // Count the number of ComprasItens
     * const count = await prisma.comprasItens.count({
     *   where: {
     *     // ... the filter for the ComprasItens we want to count
     *   }
     * })
    **/
    count<T extends ComprasItensCountArgs>(
      args?: Subset<T, ComprasItensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComprasItensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ComprasItens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComprasItensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComprasItensAggregateArgs>(args: Subset<T, ComprasItensAggregateArgs>): Prisma.PrismaPromise<GetComprasItensAggregateType<T>>

    /**
     * Group by ComprasItens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComprasItensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComprasItensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComprasItensGroupByArgs['orderBy'] }
        : { orderBy?: ComprasItensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComprasItensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComprasItensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ComprasItens model
   */
  readonly fields: ComprasItensFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ComprasItens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ComprasItensClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Compras<T extends ComprasDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ComprasDefaultArgs<ExtArgs>>): Prisma__ComprasClient<$Result.GetResult<Prisma.$ComprasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Roupa<T extends RoupasDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoupasDefaultArgs<ExtArgs>>): Prisma__RoupasClient<$Result.GetResult<Prisma.$RoupasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ComprasItens model
   */
  interface ComprasItensFieldRefs {
    readonly id: FieldRef<"ComprasItens", 'Int'>
    readonly roupas_id: FieldRef<"ComprasItens", 'Int'>
    readonly compras_id: FieldRef<"ComprasItens", 'Int'>
    readonly quatidade: FieldRef<"ComprasItens", 'Int'>
    readonly valor_peça: FieldRef<"ComprasItens", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ComprasItens findUnique
   */
  export type ComprasItensFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComprasItens
     */
    select?: ComprasItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComprasItens
     */
    omit?: ComprasItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComprasItensInclude<ExtArgs> | null
    /**
     * Filter, which ComprasItens to fetch.
     */
    where: ComprasItensWhereUniqueInput
  }

  /**
   * ComprasItens findUniqueOrThrow
   */
  export type ComprasItensFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComprasItens
     */
    select?: ComprasItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComprasItens
     */
    omit?: ComprasItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComprasItensInclude<ExtArgs> | null
    /**
     * Filter, which ComprasItens to fetch.
     */
    where: ComprasItensWhereUniqueInput
  }

  /**
   * ComprasItens findFirst
   */
  export type ComprasItensFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComprasItens
     */
    select?: ComprasItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComprasItens
     */
    omit?: ComprasItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComprasItensInclude<ExtArgs> | null
    /**
     * Filter, which ComprasItens to fetch.
     */
    where?: ComprasItensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComprasItens to fetch.
     */
    orderBy?: ComprasItensOrderByWithRelationInput | ComprasItensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComprasItens.
     */
    cursor?: ComprasItensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComprasItens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComprasItens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComprasItens.
     */
    distinct?: ComprasItensScalarFieldEnum | ComprasItensScalarFieldEnum[]
  }

  /**
   * ComprasItens findFirstOrThrow
   */
  export type ComprasItensFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComprasItens
     */
    select?: ComprasItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComprasItens
     */
    omit?: ComprasItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComprasItensInclude<ExtArgs> | null
    /**
     * Filter, which ComprasItens to fetch.
     */
    where?: ComprasItensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComprasItens to fetch.
     */
    orderBy?: ComprasItensOrderByWithRelationInput | ComprasItensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComprasItens.
     */
    cursor?: ComprasItensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComprasItens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComprasItens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComprasItens.
     */
    distinct?: ComprasItensScalarFieldEnum | ComprasItensScalarFieldEnum[]
  }

  /**
   * ComprasItens findMany
   */
  export type ComprasItensFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComprasItens
     */
    select?: ComprasItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComprasItens
     */
    omit?: ComprasItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComprasItensInclude<ExtArgs> | null
    /**
     * Filter, which ComprasItens to fetch.
     */
    where?: ComprasItensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComprasItens to fetch.
     */
    orderBy?: ComprasItensOrderByWithRelationInput | ComprasItensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ComprasItens.
     */
    cursor?: ComprasItensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComprasItens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComprasItens.
     */
    skip?: number
    distinct?: ComprasItensScalarFieldEnum | ComprasItensScalarFieldEnum[]
  }

  /**
   * ComprasItens create
   */
  export type ComprasItensCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComprasItens
     */
    select?: ComprasItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComprasItens
     */
    omit?: ComprasItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComprasItensInclude<ExtArgs> | null
    /**
     * The data needed to create a ComprasItens.
     */
    data: XOR<ComprasItensCreateInput, ComprasItensUncheckedCreateInput>
  }

  /**
   * ComprasItens createMany
   */
  export type ComprasItensCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ComprasItens.
     */
    data: ComprasItensCreateManyInput | ComprasItensCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ComprasItens update
   */
  export type ComprasItensUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComprasItens
     */
    select?: ComprasItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComprasItens
     */
    omit?: ComprasItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComprasItensInclude<ExtArgs> | null
    /**
     * The data needed to update a ComprasItens.
     */
    data: XOR<ComprasItensUpdateInput, ComprasItensUncheckedUpdateInput>
    /**
     * Choose, which ComprasItens to update.
     */
    where: ComprasItensWhereUniqueInput
  }

  /**
   * ComprasItens updateMany
   */
  export type ComprasItensUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ComprasItens.
     */
    data: XOR<ComprasItensUpdateManyMutationInput, ComprasItensUncheckedUpdateManyInput>
    /**
     * Filter which ComprasItens to update
     */
    where?: ComprasItensWhereInput
    /**
     * Limit how many ComprasItens to update.
     */
    limit?: number
  }

  /**
   * ComprasItens upsert
   */
  export type ComprasItensUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComprasItens
     */
    select?: ComprasItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComprasItens
     */
    omit?: ComprasItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComprasItensInclude<ExtArgs> | null
    /**
     * The filter to search for the ComprasItens to update in case it exists.
     */
    where: ComprasItensWhereUniqueInput
    /**
     * In case the ComprasItens found by the `where` argument doesn't exist, create a new ComprasItens with this data.
     */
    create: XOR<ComprasItensCreateInput, ComprasItensUncheckedCreateInput>
    /**
     * In case the ComprasItens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComprasItensUpdateInput, ComprasItensUncheckedUpdateInput>
  }

  /**
   * ComprasItens delete
   */
  export type ComprasItensDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComprasItens
     */
    select?: ComprasItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComprasItens
     */
    omit?: ComprasItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComprasItensInclude<ExtArgs> | null
    /**
     * Filter which ComprasItens to delete.
     */
    where: ComprasItensWhereUniqueInput
  }

  /**
   * ComprasItens deleteMany
   */
  export type ComprasItensDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComprasItens to delete
     */
    where?: ComprasItensWhereInput
    /**
     * Limit how many ComprasItens to delete.
     */
    limit?: number
  }

  /**
   * ComprasItens without action
   */
  export type ComprasItensDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComprasItens
     */
    select?: ComprasItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComprasItens
     */
    omit?: ComprasItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComprasItensInclude<ExtArgs> | null
  }


  /**
   * Model Condicionais
   */

  export type AggregateCondicionais = {
    _count: CondicionaisCountAggregateOutputType | null
    _avg: CondicionaisAvgAggregateOutputType | null
    _sum: CondicionaisSumAggregateOutputType | null
    _min: CondicionaisMinAggregateOutputType | null
    _max: CondicionaisMaxAggregateOutputType | null
  }

  export type CondicionaisAvgAggregateOutputType = {
    id: number | null
    cliente_id: number | null
  }

  export type CondicionaisSumAggregateOutputType = {
    id: number | null
    cliente_id: number | null
  }

  export type CondicionaisMinAggregateOutputType = {
    id: number | null
    cliente_id: number | null
    data: Date | null
    data_devolucao: Date | null
    devolvido: boolean | null
  }

  export type CondicionaisMaxAggregateOutputType = {
    id: number | null
    cliente_id: number | null
    data: Date | null
    data_devolucao: Date | null
    devolvido: boolean | null
  }

  export type CondicionaisCountAggregateOutputType = {
    id: number
    cliente_id: number
    data: number
    data_devolucao: number
    devolvido: number
    _all: number
  }


  export type CondicionaisAvgAggregateInputType = {
    id?: true
    cliente_id?: true
  }

  export type CondicionaisSumAggregateInputType = {
    id?: true
    cliente_id?: true
  }

  export type CondicionaisMinAggregateInputType = {
    id?: true
    cliente_id?: true
    data?: true
    data_devolucao?: true
    devolvido?: true
  }

  export type CondicionaisMaxAggregateInputType = {
    id?: true
    cliente_id?: true
    data?: true
    data_devolucao?: true
    devolvido?: true
  }

  export type CondicionaisCountAggregateInputType = {
    id?: true
    cliente_id?: true
    data?: true
    data_devolucao?: true
    devolvido?: true
    _all?: true
  }

  export type CondicionaisAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Condicionais to aggregate.
     */
    where?: CondicionaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Condicionais to fetch.
     */
    orderBy?: CondicionaisOrderByWithRelationInput | CondicionaisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CondicionaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Condicionais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Condicionais.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Condicionais
    **/
    _count?: true | CondicionaisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CondicionaisAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CondicionaisSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CondicionaisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CondicionaisMaxAggregateInputType
  }

  export type GetCondicionaisAggregateType<T extends CondicionaisAggregateArgs> = {
        [P in keyof T & keyof AggregateCondicionais]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCondicionais[P]>
      : GetScalarType<T[P], AggregateCondicionais[P]>
  }




  export type CondicionaisGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CondicionaisWhereInput
    orderBy?: CondicionaisOrderByWithAggregationInput | CondicionaisOrderByWithAggregationInput[]
    by: CondicionaisScalarFieldEnum[] | CondicionaisScalarFieldEnum
    having?: CondicionaisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CondicionaisCountAggregateInputType | true
    _avg?: CondicionaisAvgAggregateInputType
    _sum?: CondicionaisSumAggregateInputType
    _min?: CondicionaisMinAggregateInputType
    _max?: CondicionaisMaxAggregateInputType
  }

  export type CondicionaisGroupByOutputType = {
    id: number
    cliente_id: number
    data: Date
    data_devolucao: Date
    devolvido: boolean
    _count: CondicionaisCountAggregateOutputType | null
    _avg: CondicionaisAvgAggregateOutputType | null
    _sum: CondicionaisSumAggregateOutputType | null
    _min: CondicionaisMinAggregateOutputType | null
    _max: CondicionaisMaxAggregateOutputType | null
  }

  type GetCondicionaisGroupByPayload<T extends CondicionaisGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CondicionaisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CondicionaisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CondicionaisGroupByOutputType[P]>
            : GetScalarType<T[P], CondicionaisGroupByOutputType[P]>
        }
      >
    >


  export type CondicionaisSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cliente_id?: boolean
    data?: boolean
    data_devolucao?: boolean
    devolvido?: boolean
    Cliente?: boolean | ClienteDefaultArgs<ExtArgs>
    CondicionaisItens?: boolean | Condicionais$CondicionaisItensArgs<ExtArgs>
    _count?: boolean | CondicionaisCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["condicionais"]>



  export type CondicionaisSelectScalar = {
    id?: boolean
    cliente_id?: boolean
    data?: boolean
    data_devolucao?: boolean
    devolvido?: boolean
  }

  export type CondicionaisOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cliente_id" | "data" | "data_devolucao" | "devolvido", ExtArgs["result"]["condicionais"]>
  export type CondicionaisInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Cliente?: boolean | ClienteDefaultArgs<ExtArgs>
    CondicionaisItens?: boolean | Condicionais$CondicionaisItensArgs<ExtArgs>
    _count?: boolean | CondicionaisCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CondicionaisPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Condicionais"
    objects: {
      Cliente: Prisma.$ClientePayload<ExtArgs>
      CondicionaisItens: Prisma.$CondicionaisItensPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      cliente_id: number
      data: Date
      data_devolucao: Date
      devolvido: boolean
    }, ExtArgs["result"]["condicionais"]>
    composites: {}
  }

  type CondicionaisGetPayload<S extends boolean | null | undefined | CondicionaisDefaultArgs> = $Result.GetResult<Prisma.$CondicionaisPayload, S>

  type CondicionaisCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CondicionaisFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CondicionaisCountAggregateInputType | true
    }

  export interface CondicionaisDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Condicionais'], meta: { name: 'Condicionais' } }
    /**
     * Find zero or one Condicionais that matches the filter.
     * @param {CondicionaisFindUniqueArgs} args - Arguments to find a Condicionais
     * @example
     * // Get one Condicionais
     * const condicionais = await prisma.condicionais.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CondicionaisFindUniqueArgs>(args: SelectSubset<T, CondicionaisFindUniqueArgs<ExtArgs>>): Prisma__CondicionaisClient<$Result.GetResult<Prisma.$CondicionaisPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Condicionais that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CondicionaisFindUniqueOrThrowArgs} args - Arguments to find a Condicionais
     * @example
     * // Get one Condicionais
     * const condicionais = await prisma.condicionais.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CondicionaisFindUniqueOrThrowArgs>(args: SelectSubset<T, CondicionaisFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CondicionaisClient<$Result.GetResult<Prisma.$CondicionaisPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Condicionais that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CondicionaisFindFirstArgs} args - Arguments to find a Condicionais
     * @example
     * // Get one Condicionais
     * const condicionais = await prisma.condicionais.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CondicionaisFindFirstArgs>(args?: SelectSubset<T, CondicionaisFindFirstArgs<ExtArgs>>): Prisma__CondicionaisClient<$Result.GetResult<Prisma.$CondicionaisPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Condicionais that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CondicionaisFindFirstOrThrowArgs} args - Arguments to find a Condicionais
     * @example
     * // Get one Condicionais
     * const condicionais = await prisma.condicionais.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CondicionaisFindFirstOrThrowArgs>(args?: SelectSubset<T, CondicionaisFindFirstOrThrowArgs<ExtArgs>>): Prisma__CondicionaisClient<$Result.GetResult<Prisma.$CondicionaisPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Condicionais that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CondicionaisFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Condicionais
     * const condicionais = await prisma.condicionais.findMany()
     * 
     * // Get first 10 Condicionais
     * const condicionais = await prisma.condicionais.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const condicionaisWithIdOnly = await prisma.condicionais.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CondicionaisFindManyArgs>(args?: SelectSubset<T, CondicionaisFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CondicionaisPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Condicionais.
     * @param {CondicionaisCreateArgs} args - Arguments to create a Condicionais.
     * @example
     * // Create one Condicionais
     * const Condicionais = await prisma.condicionais.create({
     *   data: {
     *     // ... data to create a Condicionais
     *   }
     * })
     * 
     */
    create<T extends CondicionaisCreateArgs>(args: SelectSubset<T, CondicionaisCreateArgs<ExtArgs>>): Prisma__CondicionaisClient<$Result.GetResult<Prisma.$CondicionaisPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Condicionais.
     * @param {CondicionaisCreateManyArgs} args - Arguments to create many Condicionais.
     * @example
     * // Create many Condicionais
     * const condicionais = await prisma.condicionais.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CondicionaisCreateManyArgs>(args?: SelectSubset<T, CondicionaisCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Condicionais.
     * @param {CondicionaisDeleteArgs} args - Arguments to delete one Condicionais.
     * @example
     * // Delete one Condicionais
     * const Condicionais = await prisma.condicionais.delete({
     *   where: {
     *     // ... filter to delete one Condicionais
     *   }
     * })
     * 
     */
    delete<T extends CondicionaisDeleteArgs>(args: SelectSubset<T, CondicionaisDeleteArgs<ExtArgs>>): Prisma__CondicionaisClient<$Result.GetResult<Prisma.$CondicionaisPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Condicionais.
     * @param {CondicionaisUpdateArgs} args - Arguments to update one Condicionais.
     * @example
     * // Update one Condicionais
     * const condicionais = await prisma.condicionais.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CondicionaisUpdateArgs>(args: SelectSubset<T, CondicionaisUpdateArgs<ExtArgs>>): Prisma__CondicionaisClient<$Result.GetResult<Prisma.$CondicionaisPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Condicionais.
     * @param {CondicionaisDeleteManyArgs} args - Arguments to filter Condicionais to delete.
     * @example
     * // Delete a few Condicionais
     * const { count } = await prisma.condicionais.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CondicionaisDeleteManyArgs>(args?: SelectSubset<T, CondicionaisDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Condicionais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CondicionaisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Condicionais
     * const condicionais = await prisma.condicionais.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CondicionaisUpdateManyArgs>(args: SelectSubset<T, CondicionaisUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Condicionais.
     * @param {CondicionaisUpsertArgs} args - Arguments to update or create a Condicionais.
     * @example
     * // Update or create a Condicionais
     * const condicionais = await prisma.condicionais.upsert({
     *   create: {
     *     // ... data to create a Condicionais
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Condicionais we want to update
     *   }
     * })
     */
    upsert<T extends CondicionaisUpsertArgs>(args: SelectSubset<T, CondicionaisUpsertArgs<ExtArgs>>): Prisma__CondicionaisClient<$Result.GetResult<Prisma.$CondicionaisPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Condicionais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CondicionaisCountArgs} args - Arguments to filter Condicionais to count.
     * @example
     * // Count the number of Condicionais
     * const count = await prisma.condicionais.count({
     *   where: {
     *     // ... the filter for the Condicionais we want to count
     *   }
     * })
    **/
    count<T extends CondicionaisCountArgs>(
      args?: Subset<T, CondicionaisCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CondicionaisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Condicionais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CondicionaisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CondicionaisAggregateArgs>(args: Subset<T, CondicionaisAggregateArgs>): Prisma.PrismaPromise<GetCondicionaisAggregateType<T>>

    /**
     * Group by Condicionais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CondicionaisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CondicionaisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CondicionaisGroupByArgs['orderBy'] }
        : { orderBy?: CondicionaisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CondicionaisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCondicionaisGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Condicionais model
   */
  readonly fields: CondicionaisFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Condicionais.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CondicionaisClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Cliente<T extends ClienteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClienteDefaultArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    CondicionaisItens<T extends Condicionais$CondicionaisItensArgs<ExtArgs> = {}>(args?: Subset<T, Condicionais$CondicionaisItensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CondicionaisItensPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Condicionais model
   */
  interface CondicionaisFieldRefs {
    readonly id: FieldRef<"Condicionais", 'Int'>
    readonly cliente_id: FieldRef<"Condicionais", 'Int'>
    readonly data: FieldRef<"Condicionais", 'DateTime'>
    readonly data_devolucao: FieldRef<"Condicionais", 'DateTime'>
    readonly devolvido: FieldRef<"Condicionais", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Condicionais findUnique
   */
  export type CondicionaisFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condicionais
     */
    select?: CondicionaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Condicionais
     */
    omit?: CondicionaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CondicionaisInclude<ExtArgs> | null
    /**
     * Filter, which Condicionais to fetch.
     */
    where: CondicionaisWhereUniqueInput
  }

  /**
   * Condicionais findUniqueOrThrow
   */
  export type CondicionaisFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condicionais
     */
    select?: CondicionaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Condicionais
     */
    omit?: CondicionaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CondicionaisInclude<ExtArgs> | null
    /**
     * Filter, which Condicionais to fetch.
     */
    where: CondicionaisWhereUniqueInput
  }

  /**
   * Condicionais findFirst
   */
  export type CondicionaisFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condicionais
     */
    select?: CondicionaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Condicionais
     */
    omit?: CondicionaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CondicionaisInclude<ExtArgs> | null
    /**
     * Filter, which Condicionais to fetch.
     */
    where?: CondicionaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Condicionais to fetch.
     */
    orderBy?: CondicionaisOrderByWithRelationInput | CondicionaisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Condicionais.
     */
    cursor?: CondicionaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Condicionais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Condicionais.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Condicionais.
     */
    distinct?: CondicionaisScalarFieldEnum | CondicionaisScalarFieldEnum[]
  }

  /**
   * Condicionais findFirstOrThrow
   */
  export type CondicionaisFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condicionais
     */
    select?: CondicionaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Condicionais
     */
    omit?: CondicionaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CondicionaisInclude<ExtArgs> | null
    /**
     * Filter, which Condicionais to fetch.
     */
    where?: CondicionaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Condicionais to fetch.
     */
    orderBy?: CondicionaisOrderByWithRelationInput | CondicionaisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Condicionais.
     */
    cursor?: CondicionaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Condicionais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Condicionais.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Condicionais.
     */
    distinct?: CondicionaisScalarFieldEnum | CondicionaisScalarFieldEnum[]
  }

  /**
   * Condicionais findMany
   */
  export type CondicionaisFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condicionais
     */
    select?: CondicionaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Condicionais
     */
    omit?: CondicionaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CondicionaisInclude<ExtArgs> | null
    /**
     * Filter, which Condicionais to fetch.
     */
    where?: CondicionaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Condicionais to fetch.
     */
    orderBy?: CondicionaisOrderByWithRelationInput | CondicionaisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Condicionais.
     */
    cursor?: CondicionaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Condicionais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Condicionais.
     */
    skip?: number
    distinct?: CondicionaisScalarFieldEnum | CondicionaisScalarFieldEnum[]
  }

  /**
   * Condicionais create
   */
  export type CondicionaisCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condicionais
     */
    select?: CondicionaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Condicionais
     */
    omit?: CondicionaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CondicionaisInclude<ExtArgs> | null
    /**
     * The data needed to create a Condicionais.
     */
    data: XOR<CondicionaisCreateInput, CondicionaisUncheckedCreateInput>
  }

  /**
   * Condicionais createMany
   */
  export type CondicionaisCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Condicionais.
     */
    data: CondicionaisCreateManyInput | CondicionaisCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Condicionais update
   */
  export type CondicionaisUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condicionais
     */
    select?: CondicionaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Condicionais
     */
    omit?: CondicionaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CondicionaisInclude<ExtArgs> | null
    /**
     * The data needed to update a Condicionais.
     */
    data: XOR<CondicionaisUpdateInput, CondicionaisUncheckedUpdateInput>
    /**
     * Choose, which Condicionais to update.
     */
    where: CondicionaisWhereUniqueInput
  }

  /**
   * Condicionais updateMany
   */
  export type CondicionaisUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Condicionais.
     */
    data: XOR<CondicionaisUpdateManyMutationInput, CondicionaisUncheckedUpdateManyInput>
    /**
     * Filter which Condicionais to update
     */
    where?: CondicionaisWhereInput
    /**
     * Limit how many Condicionais to update.
     */
    limit?: number
  }

  /**
   * Condicionais upsert
   */
  export type CondicionaisUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condicionais
     */
    select?: CondicionaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Condicionais
     */
    omit?: CondicionaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CondicionaisInclude<ExtArgs> | null
    /**
     * The filter to search for the Condicionais to update in case it exists.
     */
    where: CondicionaisWhereUniqueInput
    /**
     * In case the Condicionais found by the `where` argument doesn't exist, create a new Condicionais with this data.
     */
    create: XOR<CondicionaisCreateInput, CondicionaisUncheckedCreateInput>
    /**
     * In case the Condicionais was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CondicionaisUpdateInput, CondicionaisUncheckedUpdateInput>
  }

  /**
   * Condicionais delete
   */
  export type CondicionaisDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condicionais
     */
    select?: CondicionaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Condicionais
     */
    omit?: CondicionaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CondicionaisInclude<ExtArgs> | null
    /**
     * Filter which Condicionais to delete.
     */
    where: CondicionaisWhereUniqueInput
  }

  /**
   * Condicionais deleteMany
   */
  export type CondicionaisDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Condicionais to delete
     */
    where?: CondicionaisWhereInput
    /**
     * Limit how many Condicionais to delete.
     */
    limit?: number
  }

  /**
   * Condicionais.CondicionaisItens
   */
  export type Condicionais$CondicionaisItensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CondicionaisItens
     */
    select?: CondicionaisItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CondicionaisItens
     */
    omit?: CondicionaisItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CondicionaisItensInclude<ExtArgs> | null
    where?: CondicionaisItensWhereInput
    orderBy?: CondicionaisItensOrderByWithRelationInput | CondicionaisItensOrderByWithRelationInput[]
    cursor?: CondicionaisItensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CondicionaisItensScalarFieldEnum | CondicionaisItensScalarFieldEnum[]
  }

  /**
   * Condicionais without action
   */
  export type CondicionaisDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condicionais
     */
    select?: CondicionaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Condicionais
     */
    omit?: CondicionaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CondicionaisInclude<ExtArgs> | null
  }


  /**
   * Model CondicionaisItens
   */

  export type AggregateCondicionaisItens = {
    _count: CondicionaisItensCountAggregateOutputType | null
    _avg: CondicionaisItensAvgAggregateOutputType | null
    _sum: CondicionaisItensSumAggregateOutputType | null
    _min: CondicionaisItensMinAggregateOutputType | null
    _max: CondicionaisItensMaxAggregateOutputType | null
  }

  export type CondicionaisItensAvgAggregateOutputType = {
    id: number | null
    roupas_id: number | null
    condicionais_id: number | null
    quatidade: number | null
  }

  export type CondicionaisItensSumAggregateOutputType = {
    id: number | null
    roupas_id: number | null
    condicionais_id: number | null
    quatidade: number | null
  }

  export type CondicionaisItensMinAggregateOutputType = {
    id: number | null
    roupas_id: number | null
    condicionais_id: number | null
    quatidade: number | null
  }

  export type CondicionaisItensMaxAggregateOutputType = {
    id: number | null
    roupas_id: number | null
    condicionais_id: number | null
    quatidade: number | null
  }

  export type CondicionaisItensCountAggregateOutputType = {
    id: number
    roupas_id: number
    condicionais_id: number
    quatidade: number
    _all: number
  }


  export type CondicionaisItensAvgAggregateInputType = {
    id?: true
    roupas_id?: true
    condicionais_id?: true
    quatidade?: true
  }

  export type CondicionaisItensSumAggregateInputType = {
    id?: true
    roupas_id?: true
    condicionais_id?: true
    quatidade?: true
  }

  export type CondicionaisItensMinAggregateInputType = {
    id?: true
    roupas_id?: true
    condicionais_id?: true
    quatidade?: true
  }

  export type CondicionaisItensMaxAggregateInputType = {
    id?: true
    roupas_id?: true
    condicionais_id?: true
    quatidade?: true
  }

  export type CondicionaisItensCountAggregateInputType = {
    id?: true
    roupas_id?: true
    condicionais_id?: true
    quatidade?: true
    _all?: true
  }

  export type CondicionaisItensAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CondicionaisItens to aggregate.
     */
    where?: CondicionaisItensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CondicionaisItens to fetch.
     */
    orderBy?: CondicionaisItensOrderByWithRelationInput | CondicionaisItensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CondicionaisItensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CondicionaisItens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CondicionaisItens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CondicionaisItens
    **/
    _count?: true | CondicionaisItensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CondicionaisItensAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CondicionaisItensSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CondicionaisItensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CondicionaisItensMaxAggregateInputType
  }

  export type GetCondicionaisItensAggregateType<T extends CondicionaisItensAggregateArgs> = {
        [P in keyof T & keyof AggregateCondicionaisItens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCondicionaisItens[P]>
      : GetScalarType<T[P], AggregateCondicionaisItens[P]>
  }




  export type CondicionaisItensGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CondicionaisItensWhereInput
    orderBy?: CondicionaisItensOrderByWithAggregationInput | CondicionaisItensOrderByWithAggregationInput[]
    by: CondicionaisItensScalarFieldEnum[] | CondicionaisItensScalarFieldEnum
    having?: CondicionaisItensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CondicionaisItensCountAggregateInputType | true
    _avg?: CondicionaisItensAvgAggregateInputType
    _sum?: CondicionaisItensSumAggregateInputType
    _min?: CondicionaisItensMinAggregateInputType
    _max?: CondicionaisItensMaxAggregateInputType
  }

  export type CondicionaisItensGroupByOutputType = {
    id: number
    roupas_id: number
    condicionais_id: number
    quatidade: number
    _count: CondicionaisItensCountAggregateOutputType | null
    _avg: CondicionaisItensAvgAggregateOutputType | null
    _sum: CondicionaisItensSumAggregateOutputType | null
    _min: CondicionaisItensMinAggregateOutputType | null
    _max: CondicionaisItensMaxAggregateOutputType | null
  }

  type GetCondicionaisItensGroupByPayload<T extends CondicionaisItensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CondicionaisItensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CondicionaisItensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CondicionaisItensGroupByOutputType[P]>
            : GetScalarType<T[P], CondicionaisItensGroupByOutputType[P]>
        }
      >
    >


  export type CondicionaisItensSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roupas_id?: boolean
    condicionais_id?: boolean
    quatidade?: boolean
    Condicionais?: boolean | CondicionaisDefaultArgs<ExtArgs>
    Roupa?: boolean | RoupasDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["condicionaisItens"]>



  export type CondicionaisItensSelectScalar = {
    id?: boolean
    roupas_id?: boolean
    condicionais_id?: boolean
    quatidade?: boolean
  }

  export type CondicionaisItensOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "roupas_id" | "condicionais_id" | "quatidade", ExtArgs["result"]["condicionaisItens"]>
  export type CondicionaisItensInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Condicionais?: boolean | CondicionaisDefaultArgs<ExtArgs>
    Roupa?: boolean | RoupasDefaultArgs<ExtArgs>
  }

  export type $CondicionaisItensPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CondicionaisItens"
    objects: {
      Condicionais: Prisma.$CondicionaisPayload<ExtArgs>
      Roupa: Prisma.$RoupasPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      roupas_id: number
      condicionais_id: number
      quatidade: number
    }, ExtArgs["result"]["condicionaisItens"]>
    composites: {}
  }

  type CondicionaisItensGetPayload<S extends boolean | null | undefined | CondicionaisItensDefaultArgs> = $Result.GetResult<Prisma.$CondicionaisItensPayload, S>

  type CondicionaisItensCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CondicionaisItensFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CondicionaisItensCountAggregateInputType | true
    }

  export interface CondicionaisItensDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CondicionaisItens'], meta: { name: 'CondicionaisItens' } }
    /**
     * Find zero or one CondicionaisItens that matches the filter.
     * @param {CondicionaisItensFindUniqueArgs} args - Arguments to find a CondicionaisItens
     * @example
     * // Get one CondicionaisItens
     * const condicionaisItens = await prisma.condicionaisItens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CondicionaisItensFindUniqueArgs>(args: SelectSubset<T, CondicionaisItensFindUniqueArgs<ExtArgs>>): Prisma__CondicionaisItensClient<$Result.GetResult<Prisma.$CondicionaisItensPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CondicionaisItens that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CondicionaisItensFindUniqueOrThrowArgs} args - Arguments to find a CondicionaisItens
     * @example
     * // Get one CondicionaisItens
     * const condicionaisItens = await prisma.condicionaisItens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CondicionaisItensFindUniqueOrThrowArgs>(args: SelectSubset<T, CondicionaisItensFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CondicionaisItensClient<$Result.GetResult<Prisma.$CondicionaisItensPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CondicionaisItens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CondicionaisItensFindFirstArgs} args - Arguments to find a CondicionaisItens
     * @example
     * // Get one CondicionaisItens
     * const condicionaisItens = await prisma.condicionaisItens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CondicionaisItensFindFirstArgs>(args?: SelectSubset<T, CondicionaisItensFindFirstArgs<ExtArgs>>): Prisma__CondicionaisItensClient<$Result.GetResult<Prisma.$CondicionaisItensPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CondicionaisItens that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CondicionaisItensFindFirstOrThrowArgs} args - Arguments to find a CondicionaisItens
     * @example
     * // Get one CondicionaisItens
     * const condicionaisItens = await prisma.condicionaisItens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CondicionaisItensFindFirstOrThrowArgs>(args?: SelectSubset<T, CondicionaisItensFindFirstOrThrowArgs<ExtArgs>>): Prisma__CondicionaisItensClient<$Result.GetResult<Prisma.$CondicionaisItensPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CondicionaisItens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CondicionaisItensFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CondicionaisItens
     * const condicionaisItens = await prisma.condicionaisItens.findMany()
     * 
     * // Get first 10 CondicionaisItens
     * const condicionaisItens = await prisma.condicionaisItens.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const condicionaisItensWithIdOnly = await prisma.condicionaisItens.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CondicionaisItensFindManyArgs>(args?: SelectSubset<T, CondicionaisItensFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CondicionaisItensPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CondicionaisItens.
     * @param {CondicionaisItensCreateArgs} args - Arguments to create a CondicionaisItens.
     * @example
     * // Create one CondicionaisItens
     * const CondicionaisItens = await prisma.condicionaisItens.create({
     *   data: {
     *     // ... data to create a CondicionaisItens
     *   }
     * })
     * 
     */
    create<T extends CondicionaisItensCreateArgs>(args: SelectSubset<T, CondicionaisItensCreateArgs<ExtArgs>>): Prisma__CondicionaisItensClient<$Result.GetResult<Prisma.$CondicionaisItensPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CondicionaisItens.
     * @param {CondicionaisItensCreateManyArgs} args - Arguments to create many CondicionaisItens.
     * @example
     * // Create many CondicionaisItens
     * const condicionaisItens = await prisma.condicionaisItens.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CondicionaisItensCreateManyArgs>(args?: SelectSubset<T, CondicionaisItensCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CondicionaisItens.
     * @param {CondicionaisItensDeleteArgs} args - Arguments to delete one CondicionaisItens.
     * @example
     * // Delete one CondicionaisItens
     * const CondicionaisItens = await prisma.condicionaisItens.delete({
     *   where: {
     *     // ... filter to delete one CondicionaisItens
     *   }
     * })
     * 
     */
    delete<T extends CondicionaisItensDeleteArgs>(args: SelectSubset<T, CondicionaisItensDeleteArgs<ExtArgs>>): Prisma__CondicionaisItensClient<$Result.GetResult<Prisma.$CondicionaisItensPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CondicionaisItens.
     * @param {CondicionaisItensUpdateArgs} args - Arguments to update one CondicionaisItens.
     * @example
     * // Update one CondicionaisItens
     * const condicionaisItens = await prisma.condicionaisItens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CondicionaisItensUpdateArgs>(args: SelectSubset<T, CondicionaisItensUpdateArgs<ExtArgs>>): Prisma__CondicionaisItensClient<$Result.GetResult<Prisma.$CondicionaisItensPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CondicionaisItens.
     * @param {CondicionaisItensDeleteManyArgs} args - Arguments to filter CondicionaisItens to delete.
     * @example
     * // Delete a few CondicionaisItens
     * const { count } = await prisma.condicionaisItens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CondicionaisItensDeleteManyArgs>(args?: SelectSubset<T, CondicionaisItensDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CondicionaisItens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CondicionaisItensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CondicionaisItens
     * const condicionaisItens = await prisma.condicionaisItens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CondicionaisItensUpdateManyArgs>(args: SelectSubset<T, CondicionaisItensUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CondicionaisItens.
     * @param {CondicionaisItensUpsertArgs} args - Arguments to update or create a CondicionaisItens.
     * @example
     * // Update or create a CondicionaisItens
     * const condicionaisItens = await prisma.condicionaisItens.upsert({
     *   create: {
     *     // ... data to create a CondicionaisItens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CondicionaisItens we want to update
     *   }
     * })
     */
    upsert<T extends CondicionaisItensUpsertArgs>(args: SelectSubset<T, CondicionaisItensUpsertArgs<ExtArgs>>): Prisma__CondicionaisItensClient<$Result.GetResult<Prisma.$CondicionaisItensPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CondicionaisItens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CondicionaisItensCountArgs} args - Arguments to filter CondicionaisItens to count.
     * @example
     * // Count the number of CondicionaisItens
     * const count = await prisma.condicionaisItens.count({
     *   where: {
     *     // ... the filter for the CondicionaisItens we want to count
     *   }
     * })
    **/
    count<T extends CondicionaisItensCountArgs>(
      args?: Subset<T, CondicionaisItensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CondicionaisItensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CondicionaisItens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CondicionaisItensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CondicionaisItensAggregateArgs>(args: Subset<T, CondicionaisItensAggregateArgs>): Prisma.PrismaPromise<GetCondicionaisItensAggregateType<T>>

    /**
     * Group by CondicionaisItens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CondicionaisItensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CondicionaisItensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CondicionaisItensGroupByArgs['orderBy'] }
        : { orderBy?: CondicionaisItensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CondicionaisItensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCondicionaisItensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CondicionaisItens model
   */
  readonly fields: CondicionaisItensFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CondicionaisItens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CondicionaisItensClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Condicionais<T extends CondicionaisDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CondicionaisDefaultArgs<ExtArgs>>): Prisma__CondicionaisClient<$Result.GetResult<Prisma.$CondicionaisPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Roupa<T extends RoupasDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoupasDefaultArgs<ExtArgs>>): Prisma__RoupasClient<$Result.GetResult<Prisma.$RoupasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CondicionaisItens model
   */
  interface CondicionaisItensFieldRefs {
    readonly id: FieldRef<"CondicionaisItens", 'Int'>
    readonly roupas_id: FieldRef<"CondicionaisItens", 'Int'>
    readonly condicionais_id: FieldRef<"CondicionaisItens", 'Int'>
    readonly quatidade: FieldRef<"CondicionaisItens", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * CondicionaisItens findUnique
   */
  export type CondicionaisItensFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CondicionaisItens
     */
    select?: CondicionaisItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CondicionaisItens
     */
    omit?: CondicionaisItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CondicionaisItensInclude<ExtArgs> | null
    /**
     * Filter, which CondicionaisItens to fetch.
     */
    where: CondicionaisItensWhereUniqueInput
  }

  /**
   * CondicionaisItens findUniqueOrThrow
   */
  export type CondicionaisItensFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CondicionaisItens
     */
    select?: CondicionaisItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CondicionaisItens
     */
    omit?: CondicionaisItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CondicionaisItensInclude<ExtArgs> | null
    /**
     * Filter, which CondicionaisItens to fetch.
     */
    where: CondicionaisItensWhereUniqueInput
  }

  /**
   * CondicionaisItens findFirst
   */
  export type CondicionaisItensFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CondicionaisItens
     */
    select?: CondicionaisItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CondicionaisItens
     */
    omit?: CondicionaisItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CondicionaisItensInclude<ExtArgs> | null
    /**
     * Filter, which CondicionaisItens to fetch.
     */
    where?: CondicionaisItensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CondicionaisItens to fetch.
     */
    orderBy?: CondicionaisItensOrderByWithRelationInput | CondicionaisItensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CondicionaisItens.
     */
    cursor?: CondicionaisItensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CondicionaisItens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CondicionaisItens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CondicionaisItens.
     */
    distinct?: CondicionaisItensScalarFieldEnum | CondicionaisItensScalarFieldEnum[]
  }

  /**
   * CondicionaisItens findFirstOrThrow
   */
  export type CondicionaisItensFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CondicionaisItens
     */
    select?: CondicionaisItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CondicionaisItens
     */
    omit?: CondicionaisItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CondicionaisItensInclude<ExtArgs> | null
    /**
     * Filter, which CondicionaisItens to fetch.
     */
    where?: CondicionaisItensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CondicionaisItens to fetch.
     */
    orderBy?: CondicionaisItensOrderByWithRelationInput | CondicionaisItensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CondicionaisItens.
     */
    cursor?: CondicionaisItensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CondicionaisItens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CondicionaisItens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CondicionaisItens.
     */
    distinct?: CondicionaisItensScalarFieldEnum | CondicionaisItensScalarFieldEnum[]
  }

  /**
   * CondicionaisItens findMany
   */
  export type CondicionaisItensFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CondicionaisItens
     */
    select?: CondicionaisItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CondicionaisItens
     */
    omit?: CondicionaisItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CondicionaisItensInclude<ExtArgs> | null
    /**
     * Filter, which CondicionaisItens to fetch.
     */
    where?: CondicionaisItensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CondicionaisItens to fetch.
     */
    orderBy?: CondicionaisItensOrderByWithRelationInput | CondicionaisItensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CondicionaisItens.
     */
    cursor?: CondicionaisItensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CondicionaisItens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CondicionaisItens.
     */
    skip?: number
    distinct?: CondicionaisItensScalarFieldEnum | CondicionaisItensScalarFieldEnum[]
  }

  /**
   * CondicionaisItens create
   */
  export type CondicionaisItensCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CondicionaisItens
     */
    select?: CondicionaisItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CondicionaisItens
     */
    omit?: CondicionaisItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CondicionaisItensInclude<ExtArgs> | null
    /**
     * The data needed to create a CondicionaisItens.
     */
    data: XOR<CondicionaisItensCreateInput, CondicionaisItensUncheckedCreateInput>
  }

  /**
   * CondicionaisItens createMany
   */
  export type CondicionaisItensCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CondicionaisItens.
     */
    data: CondicionaisItensCreateManyInput | CondicionaisItensCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CondicionaisItens update
   */
  export type CondicionaisItensUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CondicionaisItens
     */
    select?: CondicionaisItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CondicionaisItens
     */
    omit?: CondicionaisItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CondicionaisItensInclude<ExtArgs> | null
    /**
     * The data needed to update a CondicionaisItens.
     */
    data: XOR<CondicionaisItensUpdateInput, CondicionaisItensUncheckedUpdateInput>
    /**
     * Choose, which CondicionaisItens to update.
     */
    where: CondicionaisItensWhereUniqueInput
  }

  /**
   * CondicionaisItens updateMany
   */
  export type CondicionaisItensUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CondicionaisItens.
     */
    data: XOR<CondicionaisItensUpdateManyMutationInput, CondicionaisItensUncheckedUpdateManyInput>
    /**
     * Filter which CondicionaisItens to update
     */
    where?: CondicionaisItensWhereInput
    /**
     * Limit how many CondicionaisItens to update.
     */
    limit?: number
  }

  /**
   * CondicionaisItens upsert
   */
  export type CondicionaisItensUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CondicionaisItens
     */
    select?: CondicionaisItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CondicionaisItens
     */
    omit?: CondicionaisItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CondicionaisItensInclude<ExtArgs> | null
    /**
     * The filter to search for the CondicionaisItens to update in case it exists.
     */
    where: CondicionaisItensWhereUniqueInput
    /**
     * In case the CondicionaisItens found by the `where` argument doesn't exist, create a new CondicionaisItens with this data.
     */
    create: XOR<CondicionaisItensCreateInput, CondicionaisItensUncheckedCreateInput>
    /**
     * In case the CondicionaisItens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CondicionaisItensUpdateInput, CondicionaisItensUncheckedUpdateInput>
  }

  /**
   * CondicionaisItens delete
   */
  export type CondicionaisItensDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CondicionaisItens
     */
    select?: CondicionaisItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CondicionaisItens
     */
    omit?: CondicionaisItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CondicionaisItensInclude<ExtArgs> | null
    /**
     * Filter which CondicionaisItens to delete.
     */
    where: CondicionaisItensWhereUniqueInput
  }

  /**
   * CondicionaisItens deleteMany
   */
  export type CondicionaisItensDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CondicionaisItens to delete
     */
    where?: CondicionaisItensWhereInput
    /**
     * Limit how many CondicionaisItens to delete.
     */
    limit?: number
  }

  /**
   * CondicionaisItens without action
   */
  export type CondicionaisItensDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CondicionaisItens
     */
    select?: CondicionaisItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CondicionaisItens
     */
    omit?: CondicionaisItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CondicionaisItensInclude<ExtArgs> | null
  }


  /**
   * Model HistoricoStatus
   */

  export type AggregateHistoricoStatus = {
    _count: HistoricoStatusCountAggregateOutputType | null
    _avg: HistoricoStatusAvgAggregateOutputType | null
    _sum: HistoricoStatusSumAggregateOutputType | null
    _min: HistoricoStatusMinAggregateOutputType | null
    _max: HistoricoStatusMaxAggregateOutputType | null
  }

  export type HistoricoStatusAvgAggregateOutputType = {
    id: number | null
    roupas_id: number | null
  }

  export type HistoricoStatusSumAggregateOutputType = {
    id: number | null
    roupas_id: number | null
  }

  export type HistoricoStatusMinAggregateOutputType = {
    id: number | null
    roupas_id: number | null
    status_anterior: $Enums.Status | null
    status_novo: $Enums.Status | null
    alterado_em: Date | null
  }

  export type HistoricoStatusMaxAggregateOutputType = {
    id: number | null
    roupas_id: number | null
    status_anterior: $Enums.Status | null
    status_novo: $Enums.Status | null
    alterado_em: Date | null
  }

  export type HistoricoStatusCountAggregateOutputType = {
    id: number
    roupas_id: number
    status_anterior: number
    status_novo: number
    alterado_em: number
    _all: number
  }


  export type HistoricoStatusAvgAggregateInputType = {
    id?: true
    roupas_id?: true
  }

  export type HistoricoStatusSumAggregateInputType = {
    id?: true
    roupas_id?: true
  }

  export type HistoricoStatusMinAggregateInputType = {
    id?: true
    roupas_id?: true
    status_anterior?: true
    status_novo?: true
    alterado_em?: true
  }

  export type HistoricoStatusMaxAggregateInputType = {
    id?: true
    roupas_id?: true
    status_anterior?: true
    status_novo?: true
    alterado_em?: true
  }

  export type HistoricoStatusCountAggregateInputType = {
    id?: true
    roupas_id?: true
    status_anterior?: true
    status_novo?: true
    alterado_em?: true
    _all?: true
  }

  export type HistoricoStatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HistoricoStatus to aggregate.
     */
    where?: HistoricoStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistoricoStatuses to fetch.
     */
    orderBy?: HistoricoStatusOrderByWithRelationInput | HistoricoStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HistoricoStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistoricoStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistoricoStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HistoricoStatuses
    **/
    _count?: true | HistoricoStatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HistoricoStatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HistoricoStatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HistoricoStatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HistoricoStatusMaxAggregateInputType
  }

  export type GetHistoricoStatusAggregateType<T extends HistoricoStatusAggregateArgs> = {
        [P in keyof T & keyof AggregateHistoricoStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistoricoStatus[P]>
      : GetScalarType<T[P], AggregateHistoricoStatus[P]>
  }




  export type HistoricoStatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoricoStatusWhereInput
    orderBy?: HistoricoStatusOrderByWithAggregationInput | HistoricoStatusOrderByWithAggregationInput[]
    by: HistoricoStatusScalarFieldEnum[] | HistoricoStatusScalarFieldEnum
    having?: HistoricoStatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HistoricoStatusCountAggregateInputType | true
    _avg?: HistoricoStatusAvgAggregateInputType
    _sum?: HistoricoStatusSumAggregateInputType
    _min?: HistoricoStatusMinAggregateInputType
    _max?: HistoricoStatusMaxAggregateInputType
  }

  export type HistoricoStatusGroupByOutputType = {
    id: number
    roupas_id: number | null
    status_anterior: $Enums.Status | null
    status_novo: $Enums.Status | null
    alterado_em: Date
    _count: HistoricoStatusCountAggregateOutputType | null
    _avg: HistoricoStatusAvgAggregateOutputType | null
    _sum: HistoricoStatusSumAggregateOutputType | null
    _min: HistoricoStatusMinAggregateOutputType | null
    _max: HistoricoStatusMaxAggregateOutputType | null
  }

  type GetHistoricoStatusGroupByPayload<T extends HistoricoStatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HistoricoStatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HistoricoStatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HistoricoStatusGroupByOutputType[P]>
            : GetScalarType<T[P], HistoricoStatusGroupByOutputType[P]>
        }
      >
    >


  export type HistoricoStatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roupas_id?: boolean
    status_anterior?: boolean
    status_novo?: boolean
    alterado_em?: boolean
    Roupa?: boolean | HistoricoStatus$RoupaArgs<ExtArgs>
  }, ExtArgs["result"]["historicoStatus"]>



  export type HistoricoStatusSelectScalar = {
    id?: boolean
    roupas_id?: boolean
    status_anterior?: boolean
    status_novo?: boolean
    alterado_em?: boolean
  }

  export type HistoricoStatusOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "roupas_id" | "status_anterior" | "status_novo" | "alterado_em", ExtArgs["result"]["historicoStatus"]>
  export type HistoricoStatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Roupa?: boolean | HistoricoStatus$RoupaArgs<ExtArgs>
  }

  export type $HistoricoStatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HistoricoStatus"
    objects: {
      Roupa: Prisma.$RoupasPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      roupas_id: number | null
      status_anterior: $Enums.Status | null
      status_novo: $Enums.Status | null
      alterado_em: Date
    }, ExtArgs["result"]["historicoStatus"]>
    composites: {}
  }

  type HistoricoStatusGetPayload<S extends boolean | null | undefined | HistoricoStatusDefaultArgs> = $Result.GetResult<Prisma.$HistoricoStatusPayload, S>

  type HistoricoStatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HistoricoStatusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HistoricoStatusCountAggregateInputType | true
    }

  export interface HistoricoStatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HistoricoStatus'], meta: { name: 'HistoricoStatus' } }
    /**
     * Find zero or one HistoricoStatus that matches the filter.
     * @param {HistoricoStatusFindUniqueArgs} args - Arguments to find a HistoricoStatus
     * @example
     * // Get one HistoricoStatus
     * const historicoStatus = await prisma.historicoStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HistoricoStatusFindUniqueArgs>(args: SelectSubset<T, HistoricoStatusFindUniqueArgs<ExtArgs>>): Prisma__HistoricoStatusClient<$Result.GetResult<Prisma.$HistoricoStatusPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HistoricoStatus that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HistoricoStatusFindUniqueOrThrowArgs} args - Arguments to find a HistoricoStatus
     * @example
     * // Get one HistoricoStatus
     * const historicoStatus = await prisma.historicoStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HistoricoStatusFindUniqueOrThrowArgs>(args: SelectSubset<T, HistoricoStatusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HistoricoStatusClient<$Result.GetResult<Prisma.$HistoricoStatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HistoricoStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricoStatusFindFirstArgs} args - Arguments to find a HistoricoStatus
     * @example
     * // Get one HistoricoStatus
     * const historicoStatus = await prisma.historicoStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HistoricoStatusFindFirstArgs>(args?: SelectSubset<T, HistoricoStatusFindFirstArgs<ExtArgs>>): Prisma__HistoricoStatusClient<$Result.GetResult<Prisma.$HistoricoStatusPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HistoricoStatus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricoStatusFindFirstOrThrowArgs} args - Arguments to find a HistoricoStatus
     * @example
     * // Get one HistoricoStatus
     * const historicoStatus = await prisma.historicoStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HistoricoStatusFindFirstOrThrowArgs>(args?: SelectSubset<T, HistoricoStatusFindFirstOrThrowArgs<ExtArgs>>): Prisma__HistoricoStatusClient<$Result.GetResult<Prisma.$HistoricoStatusPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HistoricoStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricoStatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HistoricoStatuses
     * const historicoStatuses = await prisma.historicoStatus.findMany()
     * 
     * // Get first 10 HistoricoStatuses
     * const historicoStatuses = await prisma.historicoStatus.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const historicoStatusWithIdOnly = await prisma.historicoStatus.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HistoricoStatusFindManyArgs>(args?: SelectSubset<T, HistoricoStatusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoricoStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HistoricoStatus.
     * @param {HistoricoStatusCreateArgs} args - Arguments to create a HistoricoStatus.
     * @example
     * // Create one HistoricoStatus
     * const HistoricoStatus = await prisma.historicoStatus.create({
     *   data: {
     *     // ... data to create a HistoricoStatus
     *   }
     * })
     * 
     */
    create<T extends HistoricoStatusCreateArgs>(args: SelectSubset<T, HistoricoStatusCreateArgs<ExtArgs>>): Prisma__HistoricoStatusClient<$Result.GetResult<Prisma.$HistoricoStatusPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HistoricoStatuses.
     * @param {HistoricoStatusCreateManyArgs} args - Arguments to create many HistoricoStatuses.
     * @example
     * // Create many HistoricoStatuses
     * const historicoStatus = await prisma.historicoStatus.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HistoricoStatusCreateManyArgs>(args?: SelectSubset<T, HistoricoStatusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a HistoricoStatus.
     * @param {HistoricoStatusDeleteArgs} args - Arguments to delete one HistoricoStatus.
     * @example
     * // Delete one HistoricoStatus
     * const HistoricoStatus = await prisma.historicoStatus.delete({
     *   where: {
     *     // ... filter to delete one HistoricoStatus
     *   }
     * })
     * 
     */
    delete<T extends HistoricoStatusDeleteArgs>(args: SelectSubset<T, HistoricoStatusDeleteArgs<ExtArgs>>): Prisma__HistoricoStatusClient<$Result.GetResult<Prisma.$HistoricoStatusPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HistoricoStatus.
     * @param {HistoricoStatusUpdateArgs} args - Arguments to update one HistoricoStatus.
     * @example
     * // Update one HistoricoStatus
     * const historicoStatus = await prisma.historicoStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HistoricoStatusUpdateArgs>(args: SelectSubset<T, HistoricoStatusUpdateArgs<ExtArgs>>): Prisma__HistoricoStatusClient<$Result.GetResult<Prisma.$HistoricoStatusPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HistoricoStatuses.
     * @param {HistoricoStatusDeleteManyArgs} args - Arguments to filter HistoricoStatuses to delete.
     * @example
     * // Delete a few HistoricoStatuses
     * const { count } = await prisma.historicoStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HistoricoStatusDeleteManyArgs>(args?: SelectSubset<T, HistoricoStatusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HistoricoStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricoStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HistoricoStatuses
     * const historicoStatus = await prisma.historicoStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HistoricoStatusUpdateManyArgs>(args: SelectSubset<T, HistoricoStatusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HistoricoStatus.
     * @param {HistoricoStatusUpsertArgs} args - Arguments to update or create a HistoricoStatus.
     * @example
     * // Update or create a HistoricoStatus
     * const historicoStatus = await prisma.historicoStatus.upsert({
     *   create: {
     *     // ... data to create a HistoricoStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HistoricoStatus we want to update
     *   }
     * })
     */
    upsert<T extends HistoricoStatusUpsertArgs>(args: SelectSubset<T, HistoricoStatusUpsertArgs<ExtArgs>>): Prisma__HistoricoStatusClient<$Result.GetResult<Prisma.$HistoricoStatusPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of HistoricoStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricoStatusCountArgs} args - Arguments to filter HistoricoStatuses to count.
     * @example
     * // Count the number of HistoricoStatuses
     * const count = await prisma.historicoStatus.count({
     *   where: {
     *     // ... the filter for the HistoricoStatuses we want to count
     *   }
     * })
    **/
    count<T extends HistoricoStatusCountArgs>(
      args?: Subset<T, HistoricoStatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HistoricoStatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HistoricoStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricoStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HistoricoStatusAggregateArgs>(args: Subset<T, HistoricoStatusAggregateArgs>): Prisma.PrismaPromise<GetHistoricoStatusAggregateType<T>>

    /**
     * Group by HistoricoStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricoStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HistoricoStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HistoricoStatusGroupByArgs['orderBy'] }
        : { orderBy?: HistoricoStatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HistoricoStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistoricoStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HistoricoStatus model
   */
  readonly fields: HistoricoStatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HistoricoStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HistoricoStatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Roupa<T extends HistoricoStatus$RoupaArgs<ExtArgs> = {}>(args?: Subset<T, HistoricoStatus$RoupaArgs<ExtArgs>>): Prisma__RoupasClient<$Result.GetResult<Prisma.$RoupasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HistoricoStatus model
   */
  interface HistoricoStatusFieldRefs {
    readonly id: FieldRef<"HistoricoStatus", 'Int'>
    readonly roupas_id: FieldRef<"HistoricoStatus", 'Int'>
    readonly status_anterior: FieldRef<"HistoricoStatus", 'Status'>
    readonly status_novo: FieldRef<"HistoricoStatus", 'Status'>
    readonly alterado_em: FieldRef<"HistoricoStatus", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * HistoricoStatus findUnique
   */
  export type HistoricoStatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoStatus
     */
    select?: HistoricoStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricoStatus
     */
    omit?: HistoricoStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoStatusInclude<ExtArgs> | null
    /**
     * Filter, which HistoricoStatus to fetch.
     */
    where: HistoricoStatusWhereUniqueInput
  }

  /**
   * HistoricoStatus findUniqueOrThrow
   */
  export type HistoricoStatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoStatus
     */
    select?: HistoricoStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricoStatus
     */
    omit?: HistoricoStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoStatusInclude<ExtArgs> | null
    /**
     * Filter, which HistoricoStatus to fetch.
     */
    where: HistoricoStatusWhereUniqueInput
  }

  /**
   * HistoricoStatus findFirst
   */
  export type HistoricoStatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoStatus
     */
    select?: HistoricoStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricoStatus
     */
    omit?: HistoricoStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoStatusInclude<ExtArgs> | null
    /**
     * Filter, which HistoricoStatus to fetch.
     */
    where?: HistoricoStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistoricoStatuses to fetch.
     */
    orderBy?: HistoricoStatusOrderByWithRelationInput | HistoricoStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HistoricoStatuses.
     */
    cursor?: HistoricoStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistoricoStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistoricoStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HistoricoStatuses.
     */
    distinct?: HistoricoStatusScalarFieldEnum | HistoricoStatusScalarFieldEnum[]
  }

  /**
   * HistoricoStatus findFirstOrThrow
   */
  export type HistoricoStatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoStatus
     */
    select?: HistoricoStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricoStatus
     */
    omit?: HistoricoStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoStatusInclude<ExtArgs> | null
    /**
     * Filter, which HistoricoStatus to fetch.
     */
    where?: HistoricoStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistoricoStatuses to fetch.
     */
    orderBy?: HistoricoStatusOrderByWithRelationInput | HistoricoStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HistoricoStatuses.
     */
    cursor?: HistoricoStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistoricoStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistoricoStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HistoricoStatuses.
     */
    distinct?: HistoricoStatusScalarFieldEnum | HistoricoStatusScalarFieldEnum[]
  }

  /**
   * HistoricoStatus findMany
   */
  export type HistoricoStatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoStatus
     */
    select?: HistoricoStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricoStatus
     */
    omit?: HistoricoStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoStatusInclude<ExtArgs> | null
    /**
     * Filter, which HistoricoStatuses to fetch.
     */
    where?: HistoricoStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistoricoStatuses to fetch.
     */
    orderBy?: HistoricoStatusOrderByWithRelationInput | HistoricoStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HistoricoStatuses.
     */
    cursor?: HistoricoStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistoricoStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistoricoStatuses.
     */
    skip?: number
    distinct?: HistoricoStatusScalarFieldEnum | HistoricoStatusScalarFieldEnum[]
  }

  /**
   * HistoricoStatus create
   */
  export type HistoricoStatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoStatus
     */
    select?: HistoricoStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricoStatus
     */
    omit?: HistoricoStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoStatusInclude<ExtArgs> | null
    /**
     * The data needed to create a HistoricoStatus.
     */
    data?: XOR<HistoricoStatusCreateInput, HistoricoStatusUncheckedCreateInput>
  }

  /**
   * HistoricoStatus createMany
   */
  export type HistoricoStatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HistoricoStatuses.
     */
    data: HistoricoStatusCreateManyInput | HistoricoStatusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HistoricoStatus update
   */
  export type HistoricoStatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoStatus
     */
    select?: HistoricoStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricoStatus
     */
    omit?: HistoricoStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoStatusInclude<ExtArgs> | null
    /**
     * The data needed to update a HistoricoStatus.
     */
    data: XOR<HistoricoStatusUpdateInput, HistoricoStatusUncheckedUpdateInput>
    /**
     * Choose, which HistoricoStatus to update.
     */
    where: HistoricoStatusWhereUniqueInput
  }

  /**
   * HistoricoStatus updateMany
   */
  export type HistoricoStatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HistoricoStatuses.
     */
    data: XOR<HistoricoStatusUpdateManyMutationInput, HistoricoStatusUncheckedUpdateManyInput>
    /**
     * Filter which HistoricoStatuses to update
     */
    where?: HistoricoStatusWhereInput
    /**
     * Limit how many HistoricoStatuses to update.
     */
    limit?: number
  }

  /**
   * HistoricoStatus upsert
   */
  export type HistoricoStatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoStatus
     */
    select?: HistoricoStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricoStatus
     */
    omit?: HistoricoStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoStatusInclude<ExtArgs> | null
    /**
     * The filter to search for the HistoricoStatus to update in case it exists.
     */
    where: HistoricoStatusWhereUniqueInput
    /**
     * In case the HistoricoStatus found by the `where` argument doesn't exist, create a new HistoricoStatus with this data.
     */
    create: XOR<HistoricoStatusCreateInput, HistoricoStatusUncheckedCreateInput>
    /**
     * In case the HistoricoStatus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HistoricoStatusUpdateInput, HistoricoStatusUncheckedUpdateInput>
  }

  /**
   * HistoricoStatus delete
   */
  export type HistoricoStatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoStatus
     */
    select?: HistoricoStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricoStatus
     */
    omit?: HistoricoStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoStatusInclude<ExtArgs> | null
    /**
     * Filter which HistoricoStatus to delete.
     */
    where: HistoricoStatusWhereUniqueInput
  }

  /**
   * HistoricoStatus deleteMany
   */
  export type HistoricoStatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HistoricoStatuses to delete
     */
    where?: HistoricoStatusWhereInput
    /**
     * Limit how many HistoricoStatuses to delete.
     */
    limit?: number
  }

  /**
   * HistoricoStatus.Roupa
   */
  export type HistoricoStatus$RoupaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roupas
     */
    select?: RoupasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Roupas
     */
    omit?: RoupasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoupasInclude<ExtArgs> | null
    where?: RoupasWhereInput
  }

  /**
   * HistoricoStatus without action
   */
  export type HistoricoStatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoStatus
     */
    select?: HistoricoStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricoStatus
     */
    omit?: HistoricoStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoStatusInclude<ExtArgs> | null
  }


  /**
   * Model Roupas
   */

  export type AggregateRoupas = {
    _count: RoupasCountAggregateOutputType | null
    _avg: RoupasAvgAggregateOutputType | null
    _sum: RoupasSumAggregateOutputType | null
    _min: RoupasMinAggregateOutputType | null
    _max: RoupasMaxAggregateOutputType | null
  }

  export type RoupasAvgAggregateOutputType = {
    id: number | null
    preco: number | null
    quantidade: number | null
    usuarios_id: number | null
  }

  export type RoupasSumAggregateOutputType = {
    id: number | null
    preco: number | null
    quantidade: number | null
    usuarios_id: number | null
  }

  export type RoupasMinAggregateOutputType = {
    id: number | null
    nome: string | null
    descricao: string | null
    tipo: string | null
    tamanho: string | null
    cor: string | null
    preco: number | null
    quantidade: number | null
    usuarios_id: number | null
    criado_em: Date | null
  }

  export type RoupasMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    descricao: string | null
    tipo: string | null
    tamanho: string | null
    cor: string | null
    preco: number | null
    quantidade: number | null
    usuarios_id: number | null
    criado_em: Date | null
  }

  export type RoupasCountAggregateOutputType = {
    id: number
    nome: number
    descricao: number
    tipo: number
    tamanho: number
    cor: number
    preco: number
    quantidade: number
    usuarios_id: number
    criado_em: number
    _all: number
  }


  export type RoupasAvgAggregateInputType = {
    id?: true
    preco?: true
    quantidade?: true
    usuarios_id?: true
  }

  export type RoupasSumAggregateInputType = {
    id?: true
    preco?: true
    quantidade?: true
    usuarios_id?: true
  }

  export type RoupasMinAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    tipo?: true
    tamanho?: true
    cor?: true
    preco?: true
    quantidade?: true
    usuarios_id?: true
    criado_em?: true
  }

  export type RoupasMaxAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    tipo?: true
    tamanho?: true
    cor?: true
    preco?: true
    quantidade?: true
    usuarios_id?: true
    criado_em?: true
  }

  export type RoupasCountAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    tipo?: true
    tamanho?: true
    cor?: true
    preco?: true
    quantidade?: true
    usuarios_id?: true
    criado_em?: true
    _all?: true
  }

  export type RoupasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roupas to aggregate.
     */
    where?: RoupasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roupas to fetch.
     */
    orderBy?: RoupasOrderByWithRelationInput | RoupasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoupasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roupas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roupas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roupas
    **/
    _count?: true | RoupasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoupasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoupasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoupasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoupasMaxAggregateInputType
  }

  export type GetRoupasAggregateType<T extends RoupasAggregateArgs> = {
        [P in keyof T & keyof AggregateRoupas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoupas[P]>
      : GetScalarType<T[P], AggregateRoupas[P]>
  }




  export type RoupasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoupasWhereInput
    orderBy?: RoupasOrderByWithAggregationInput | RoupasOrderByWithAggregationInput[]
    by: RoupasScalarFieldEnum[] | RoupasScalarFieldEnum
    having?: RoupasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoupasCountAggregateInputType | true
    _avg?: RoupasAvgAggregateInputType
    _sum?: RoupasSumAggregateInputType
    _min?: RoupasMinAggregateInputType
    _max?: RoupasMaxAggregateInputType
  }

  export type RoupasGroupByOutputType = {
    id: number
    nome: string
    descricao: string | null
    tipo: string
    tamanho: string
    cor: string
    preco: number
    quantidade: number
    usuarios_id: number
    criado_em: Date
    _count: RoupasCountAggregateOutputType | null
    _avg: RoupasAvgAggregateOutputType | null
    _sum: RoupasSumAggregateOutputType | null
    _min: RoupasMinAggregateOutputType | null
    _max: RoupasMaxAggregateOutputType | null
  }

  type GetRoupasGroupByPayload<T extends RoupasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoupasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoupasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoupasGroupByOutputType[P]>
            : GetScalarType<T[P], RoupasGroupByOutputType[P]>
        }
      >
    >


  export type RoupasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    descricao?: boolean
    tipo?: boolean
    tamanho?: boolean
    cor?: boolean
    preco?: boolean
    quantidade?: boolean
    usuarios_id?: boolean
    criado_em?: boolean
    Baixa?: boolean | Roupas$BaixaArgs<ExtArgs>
    ComprasItens?: boolean | Roupas$ComprasItensArgs<ExtArgs>
    CondicionaisItens?: boolean | Roupas$CondicionaisItensArgs<ExtArgs>
    HistoricoStatus?: boolean | Roupas$HistoricoStatusArgs<ExtArgs>
    Usuario?: boolean | UsuariosDefaultArgs<ExtArgs>
    VendasItens?: boolean | Roupas$VendasItensArgs<ExtArgs>
    _count?: boolean | RoupasCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roupas"]>



  export type RoupasSelectScalar = {
    id?: boolean
    nome?: boolean
    descricao?: boolean
    tipo?: boolean
    tamanho?: boolean
    cor?: boolean
    preco?: boolean
    quantidade?: boolean
    usuarios_id?: boolean
    criado_em?: boolean
  }

  export type RoupasOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "descricao" | "tipo" | "tamanho" | "cor" | "preco" | "quantidade" | "usuarios_id" | "criado_em", ExtArgs["result"]["roupas"]>
  export type RoupasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Baixa?: boolean | Roupas$BaixaArgs<ExtArgs>
    ComprasItens?: boolean | Roupas$ComprasItensArgs<ExtArgs>
    CondicionaisItens?: boolean | Roupas$CondicionaisItensArgs<ExtArgs>
    HistoricoStatus?: boolean | Roupas$HistoricoStatusArgs<ExtArgs>
    Usuario?: boolean | UsuariosDefaultArgs<ExtArgs>
    VendasItens?: boolean | Roupas$VendasItensArgs<ExtArgs>
    _count?: boolean | RoupasCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $RoupasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Roupas"
    objects: {
      Baixa: Prisma.$BaixaPayload<ExtArgs>[]
      ComprasItens: Prisma.$ComprasItensPayload<ExtArgs>[]
      CondicionaisItens: Prisma.$CondicionaisItensPayload<ExtArgs>[]
      HistoricoStatus: Prisma.$HistoricoStatusPayload<ExtArgs>[]
      Usuario: Prisma.$UsuariosPayload<ExtArgs>
      VendasItens: Prisma.$VendasItensPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      descricao: string | null
      tipo: string
      tamanho: string
      cor: string
      preco: number
      quantidade: number
      usuarios_id: number
      criado_em: Date
    }, ExtArgs["result"]["roupas"]>
    composites: {}
  }

  type RoupasGetPayload<S extends boolean | null | undefined | RoupasDefaultArgs> = $Result.GetResult<Prisma.$RoupasPayload, S>

  type RoupasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoupasFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoupasCountAggregateInputType | true
    }

  export interface RoupasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Roupas'], meta: { name: 'Roupas' } }
    /**
     * Find zero or one Roupas that matches the filter.
     * @param {RoupasFindUniqueArgs} args - Arguments to find a Roupas
     * @example
     * // Get one Roupas
     * const roupas = await prisma.roupas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoupasFindUniqueArgs>(args: SelectSubset<T, RoupasFindUniqueArgs<ExtArgs>>): Prisma__RoupasClient<$Result.GetResult<Prisma.$RoupasPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Roupas that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoupasFindUniqueOrThrowArgs} args - Arguments to find a Roupas
     * @example
     * // Get one Roupas
     * const roupas = await prisma.roupas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoupasFindUniqueOrThrowArgs>(args: SelectSubset<T, RoupasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoupasClient<$Result.GetResult<Prisma.$RoupasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Roupas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoupasFindFirstArgs} args - Arguments to find a Roupas
     * @example
     * // Get one Roupas
     * const roupas = await prisma.roupas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoupasFindFirstArgs>(args?: SelectSubset<T, RoupasFindFirstArgs<ExtArgs>>): Prisma__RoupasClient<$Result.GetResult<Prisma.$RoupasPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Roupas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoupasFindFirstOrThrowArgs} args - Arguments to find a Roupas
     * @example
     * // Get one Roupas
     * const roupas = await prisma.roupas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoupasFindFirstOrThrowArgs>(args?: SelectSubset<T, RoupasFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoupasClient<$Result.GetResult<Prisma.$RoupasPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Roupas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoupasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roupas
     * const roupas = await prisma.roupas.findMany()
     * 
     * // Get first 10 Roupas
     * const roupas = await prisma.roupas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roupasWithIdOnly = await prisma.roupas.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoupasFindManyArgs>(args?: SelectSubset<T, RoupasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoupasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Roupas.
     * @param {RoupasCreateArgs} args - Arguments to create a Roupas.
     * @example
     * // Create one Roupas
     * const Roupas = await prisma.roupas.create({
     *   data: {
     *     // ... data to create a Roupas
     *   }
     * })
     * 
     */
    create<T extends RoupasCreateArgs>(args: SelectSubset<T, RoupasCreateArgs<ExtArgs>>): Prisma__RoupasClient<$Result.GetResult<Prisma.$RoupasPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Roupas.
     * @param {RoupasCreateManyArgs} args - Arguments to create many Roupas.
     * @example
     * // Create many Roupas
     * const roupas = await prisma.roupas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoupasCreateManyArgs>(args?: SelectSubset<T, RoupasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Roupas.
     * @param {RoupasDeleteArgs} args - Arguments to delete one Roupas.
     * @example
     * // Delete one Roupas
     * const Roupas = await prisma.roupas.delete({
     *   where: {
     *     // ... filter to delete one Roupas
     *   }
     * })
     * 
     */
    delete<T extends RoupasDeleteArgs>(args: SelectSubset<T, RoupasDeleteArgs<ExtArgs>>): Prisma__RoupasClient<$Result.GetResult<Prisma.$RoupasPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Roupas.
     * @param {RoupasUpdateArgs} args - Arguments to update one Roupas.
     * @example
     * // Update one Roupas
     * const roupas = await prisma.roupas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoupasUpdateArgs>(args: SelectSubset<T, RoupasUpdateArgs<ExtArgs>>): Prisma__RoupasClient<$Result.GetResult<Prisma.$RoupasPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Roupas.
     * @param {RoupasDeleteManyArgs} args - Arguments to filter Roupas to delete.
     * @example
     * // Delete a few Roupas
     * const { count } = await prisma.roupas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoupasDeleteManyArgs>(args?: SelectSubset<T, RoupasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roupas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoupasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roupas
     * const roupas = await prisma.roupas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoupasUpdateManyArgs>(args: SelectSubset<T, RoupasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Roupas.
     * @param {RoupasUpsertArgs} args - Arguments to update or create a Roupas.
     * @example
     * // Update or create a Roupas
     * const roupas = await prisma.roupas.upsert({
     *   create: {
     *     // ... data to create a Roupas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Roupas we want to update
     *   }
     * })
     */
    upsert<T extends RoupasUpsertArgs>(args: SelectSubset<T, RoupasUpsertArgs<ExtArgs>>): Prisma__RoupasClient<$Result.GetResult<Prisma.$RoupasPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Roupas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoupasCountArgs} args - Arguments to filter Roupas to count.
     * @example
     * // Count the number of Roupas
     * const count = await prisma.roupas.count({
     *   where: {
     *     // ... the filter for the Roupas we want to count
     *   }
     * })
    **/
    count<T extends RoupasCountArgs>(
      args?: Subset<T, RoupasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoupasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Roupas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoupasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoupasAggregateArgs>(args: Subset<T, RoupasAggregateArgs>): Prisma.PrismaPromise<GetRoupasAggregateType<T>>

    /**
     * Group by Roupas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoupasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoupasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoupasGroupByArgs['orderBy'] }
        : { orderBy?: RoupasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoupasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoupasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Roupas model
   */
  readonly fields: RoupasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Roupas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoupasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Baixa<T extends Roupas$BaixaArgs<ExtArgs> = {}>(args?: Subset<T, Roupas$BaixaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BaixaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ComprasItens<T extends Roupas$ComprasItensArgs<ExtArgs> = {}>(args?: Subset<T, Roupas$ComprasItensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComprasItensPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    CondicionaisItens<T extends Roupas$CondicionaisItensArgs<ExtArgs> = {}>(args?: Subset<T, Roupas$CondicionaisItensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CondicionaisItensPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    HistoricoStatus<T extends Roupas$HistoricoStatusArgs<ExtArgs> = {}>(args?: Subset<T, Roupas$HistoricoStatusArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoricoStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Usuario<T extends UsuariosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuariosDefaultArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    VendasItens<T extends Roupas$VendasItensArgs<ExtArgs> = {}>(args?: Subset<T, Roupas$VendasItensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendasItensPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Roupas model
   */
  interface RoupasFieldRefs {
    readonly id: FieldRef<"Roupas", 'Int'>
    readonly nome: FieldRef<"Roupas", 'String'>
    readonly descricao: FieldRef<"Roupas", 'String'>
    readonly tipo: FieldRef<"Roupas", 'String'>
    readonly tamanho: FieldRef<"Roupas", 'String'>
    readonly cor: FieldRef<"Roupas", 'String'>
    readonly preco: FieldRef<"Roupas", 'Float'>
    readonly quantidade: FieldRef<"Roupas", 'Int'>
    readonly usuarios_id: FieldRef<"Roupas", 'Int'>
    readonly criado_em: FieldRef<"Roupas", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Roupas findUnique
   */
  export type RoupasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roupas
     */
    select?: RoupasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Roupas
     */
    omit?: RoupasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoupasInclude<ExtArgs> | null
    /**
     * Filter, which Roupas to fetch.
     */
    where: RoupasWhereUniqueInput
  }

  /**
   * Roupas findUniqueOrThrow
   */
  export type RoupasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roupas
     */
    select?: RoupasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Roupas
     */
    omit?: RoupasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoupasInclude<ExtArgs> | null
    /**
     * Filter, which Roupas to fetch.
     */
    where: RoupasWhereUniqueInput
  }

  /**
   * Roupas findFirst
   */
  export type RoupasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roupas
     */
    select?: RoupasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Roupas
     */
    omit?: RoupasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoupasInclude<ExtArgs> | null
    /**
     * Filter, which Roupas to fetch.
     */
    where?: RoupasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roupas to fetch.
     */
    orderBy?: RoupasOrderByWithRelationInput | RoupasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roupas.
     */
    cursor?: RoupasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roupas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roupas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roupas.
     */
    distinct?: RoupasScalarFieldEnum | RoupasScalarFieldEnum[]
  }

  /**
   * Roupas findFirstOrThrow
   */
  export type RoupasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roupas
     */
    select?: RoupasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Roupas
     */
    omit?: RoupasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoupasInclude<ExtArgs> | null
    /**
     * Filter, which Roupas to fetch.
     */
    where?: RoupasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roupas to fetch.
     */
    orderBy?: RoupasOrderByWithRelationInput | RoupasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roupas.
     */
    cursor?: RoupasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roupas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roupas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roupas.
     */
    distinct?: RoupasScalarFieldEnum | RoupasScalarFieldEnum[]
  }

  /**
   * Roupas findMany
   */
  export type RoupasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roupas
     */
    select?: RoupasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Roupas
     */
    omit?: RoupasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoupasInclude<ExtArgs> | null
    /**
     * Filter, which Roupas to fetch.
     */
    where?: RoupasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roupas to fetch.
     */
    orderBy?: RoupasOrderByWithRelationInput | RoupasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roupas.
     */
    cursor?: RoupasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roupas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roupas.
     */
    skip?: number
    distinct?: RoupasScalarFieldEnum | RoupasScalarFieldEnum[]
  }

  /**
   * Roupas create
   */
  export type RoupasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roupas
     */
    select?: RoupasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Roupas
     */
    omit?: RoupasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoupasInclude<ExtArgs> | null
    /**
     * The data needed to create a Roupas.
     */
    data: XOR<RoupasCreateInput, RoupasUncheckedCreateInput>
  }

  /**
   * Roupas createMany
   */
  export type RoupasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roupas.
     */
    data: RoupasCreateManyInput | RoupasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Roupas update
   */
  export type RoupasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roupas
     */
    select?: RoupasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Roupas
     */
    omit?: RoupasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoupasInclude<ExtArgs> | null
    /**
     * The data needed to update a Roupas.
     */
    data: XOR<RoupasUpdateInput, RoupasUncheckedUpdateInput>
    /**
     * Choose, which Roupas to update.
     */
    where: RoupasWhereUniqueInput
  }

  /**
   * Roupas updateMany
   */
  export type RoupasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roupas.
     */
    data: XOR<RoupasUpdateManyMutationInput, RoupasUncheckedUpdateManyInput>
    /**
     * Filter which Roupas to update
     */
    where?: RoupasWhereInput
    /**
     * Limit how many Roupas to update.
     */
    limit?: number
  }

  /**
   * Roupas upsert
   */
  export type RoupasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roupas
     */
    select?: RoupasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Roupas
     */
    omit?: RoupasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoupasInclude<ExtArgs> | null
    /**
     * The filter to search for the Roupas to update in case it exists.
     */
    where: RoupasWhereUniqueInput
    /**
     * In case the Roupas found by the `where` argument doesn't exist, create a new Roupas with this data.
     */
    create: XOR<RoupasCreateInput, RoupasUncheckedCreateInput>
    /**
     * In case the Roupas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoupasUpdateInput, RoupasUncheckedUpdateInput>
  }

  /**
   * Roupas delete
   */
  export type RoupasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roupas
     */
    select?: RoupasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Roupas
     */
    omit?: RoupasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoupasInclude<ExtArgs> | null
    /**
     * Filter which Roupas to delete.
     */
    where: RoupasWhereUniqueInput
  }

  /**
   * Roupas deleteMany
   */
  export type RoupasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roupas to delete
     */
    where?: RoupasWhereInput
    /**
     * Limit how many Roupas to delete.
     */
    limit?: number
  }

  /**
   * Roupas.Baixa
   */
  export type Roupas$BaixaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baixa
     */
    select?: BaixaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Baixa
     */
    omit?: BaixaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaixaInclude<ExtArgs> | null
    where?: BaixaWhereInput
    orderBy?: BaixaOrderByWithRelationInput | BaixaOrderByWithRelationInput[]
    cursor?: BaixaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BaixaScalarFieldEnum | BaixaScalarFieldEnum[]
  }

  /**
   * Roupas.ComprasItens
   */
  export type Roupas$ComprasItensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComprasItens
     */
    select?: ComprasItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComprasItens
     */
    omit?: ComprasItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComprasItensInclude<ExtArgs> | null
    where?: ComprasItensWhereInput
    orderBy?: ComprasItensOrderByWithRelationInput | ComprasItensOrderByWithRelationInput[]
    cursor?: ComprasItensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComprasItensScalarFieldEnum | ComprasItensScalarFieldEnum[]
  }

  /**
   * Roupas.CondicionaisItens
   */
  export type Roupas$CondicionaisItensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CondicionaisItens
     */
    select?: CondicionaisItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CondicionaisItens
     */
    omit?: CondicionaisItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CondicionaisItensInclude<ExtArgs> | null
    where?: CondicionaisItensWhereInput
    orderBy?: CondicionaisItensOrderByWithRelationInput | CondicionaisItensOrderByWithRelationInput[]
    cursor?: CondicionaisItensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CondicionaisItensScalarFieldEnum | CondicionaisItensScalarFieldEnum[]
  }

  /**
   * Roupas.HistoricoStatus
   */
  export type Roupas$HistoricoStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoStatus
     */
    select?: HistoricoStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricoStatus
     */
    omit?: HistoricoStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoStatusInclude<ExtArgs> | null
    where?: HistoricoStatusWhereInput
    orderBy?: HistoricoStatusOrderByWithRelationInput | HistoricoStatusOrderByWithRelationInput[]
    cursor?: HistoricoStatusWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistoricoStatusScalarFieldEnum | HistoricoStatusScalarFieldEnum[]
  }

  /**
   * Roupas.VendasItens
   */
  export type Roupas$VendasItensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendasItens
     */
    select?: VendasItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VendasItens
     */
    omit?: VendasItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendasItensInclude<ExtArgs> | null
    where?: VendasItensWhereInput
    orderBy?: VendasItensOrderByWithRelationInput | VendasItensOrderByWithRelationInput[]
    cursor?: VendasItensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VendasItensScalarFieldEnum | VendasItensScalarFieldEnum[]
  }

  /**
   * Roupas without action
   */
  export type RoupasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roupas
     */
    select?: RoupasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Roupas
     */
    omit?: RoupasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoupasInclude<ExtArgs> | null
  }


  /**
   * Model Usuarios
   */

  export type AggregateUsuarios = {
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  export type UsuariosAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuariosSumAggregateOutputType = {
    id: number | null
  }

  export type UsuariosMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
    criado_em: Date | null
  }

  export type UsuariosMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
    criado_em: Date | null
  }

  export type UsuariosCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    senha: number
    criado_em: number
    _all: number
  }


  export type UsuariosAvgAggregateInputType = {
    id?: true
  }

  export type UsuariosSumAggregateInputType = {
    id?: true
  }

  export type UsuariosMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    criado_em?: true
  }

  export type UsuariosMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    criado_em?: true
  }

  export type UsuariosCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    criado_em?: true
    _all?: true
  }

  export type UsuariosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to aggregate.
     */
    where?: UsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuariosOrderByWithRelationInput | UsuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuariosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuariosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuariosMaxAggregateInputType
  }

  export type GetUsuariosAggregateType<T extends UsuariosAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuarios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuarios[P]>
      : GetScalarType<T[P], AggregateUsuarios[P]>
  }




  export type UsuariosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuariosWhereInput
    orderBy?: UsuariosOrderByWithAggregationInput | UsuariosOrderByWithAggregationInput[]
    by: UsuariosScalarFieldEnum[] | UsuariosScalarFieldEnum
    having?: UsuariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuariosCountAggregateInputType | true
    _avg?: UsuariosAvgAggregateInputType
    _sum?: UsuariosSumAggregateInputType
    _min?: UsuariosMinAggregateInputType
    _max?: UsuariosMaxAggregateInputType
  }

  export type UsuariosGroupByOutputType = {
    id: number
    nome: string
    email: string
    senha: string
    criado_em: Date
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  type GetUsuariosGroupByPayload<T extends UsuariosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
            : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
        }
      >
    >


  export type UsuariosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    criado_em?: boolean
    Roupas?: boolean | Usuarios$RoupasArgs<ExtArgs>
    _count?: boolean | UsuariosCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuarios"]>



  export type UsuariosSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    criado_em?: boolean
  }

  export type UsuariosOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "email" | "senha" | "criado_em", ExtArgs["result"]["usuarios"]>
  export type UsuariosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Roupas?: boolean | Usuarios$RoupasArgs<ExtArgs>
    _count?: boolean | UsuariosCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UsuariosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuarios"
    objects: {
      Roupas: Prisma.$RoupasPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      senha: string
      criado_em: Date
    }, ExtArgs["result"]["usuarios"]>
    composites: {}
  }

  type UsuariosGetPayload<S extends boolean | null | undefined | UsuariosDefaultArgs> = $Result.GetResult<Prisma.$UsuariosPayload, S>

  type UsuariosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsuariosFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuariosCountAggregateInputType | true
    }

  export interface UsuariosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuarios'], meta: { name: 'Usuarios' } }
    /**
     * Find zero or one Usuarios that matches the filter.
     * @param {UsuariosFindUniqueArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuariosFindUniqueArgs>(args: SelectSubset<T, UsuariosFindUniqueArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Usuarios that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsuariosFindUniqueOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuariosFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuariosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosFindFirstArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuariosFindFirstArgs>(args?: SelectSubset<T, UsuariosFindFirstArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuarios that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosFindFirstOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuariosFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuariosFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuarios.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuarios.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuariosWithIdOnly = await prisma.usuarios.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuariosFindManyArgs>(args?: SelectSubset<T, UsuariosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Usuarios.
     * @param {UsuariosCreateArgs} args - Arguments to create a Usuarios.
     * @example
     * // Create one Usuarios
     * const Usuarios = await prisma.usuarios.create({
     *   data: {
     *     // ... data to create a Usuarios
     *   }
     * })
     * 
     */
    create<T extends UsuariosCreateArgs>(args: SelectSubset<T, UsuariosCreateArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Usuarios.
     * @param {UsuariosCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuarios = await prisma.usuarios.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuariosCreateManyArgs>(args?: SelectSubset<T, UsuariosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuarios.
     * @param {UsuariosDeleteArgs} args - Arguments to delete one Usuarios.
     * @example
     * // Delete one Usuarios
     * const Usuarios = await prisma.usuarios.delete({
     *   where: {
     *     // ... filter to delete one Usuarios
     *   }
     * })
     * 
     */
    delete<T extends UsuariosDeleteArgs>(args: SelectSubset<T, UsuariosDeleteArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Usuarios.
     * @param {UsuariosUpdateArgs} args - Arguments to update one Usuarios.
     * @example
     * // Update one Usuarios
     * const usuarios = await prisma.usuarios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuariosUpdateArgs>(args: SelectSubset<T, UsuariosUpdateArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuariosDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuarios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuariosDeleteManyArgs>(args?: SelectSubset<T, UsuariosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuarios = await prisma.usuarios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuariosUpdateManyArgs>(args: SelectSubset<T, UsuariosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuarios.
     * @param {UsuariosUpsertArgs} args - Arguments to update or create a Usuarios.
     * @example
     * // Update or create a Usuarios
     * const usuarios = await prisma.usuarios.upsert({
     *   create: {
     *     // ... data to create a Usuarios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuarios we want to update
     *   }
     * })
     */
    upsert<T extends UsuariosUpsertArgs>(args: SelectSubset<T, UsuariosUpsertArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuarios.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuariosCountArgs>(
      args?: Subset<T, UsuariosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuariosAggregateArgs>(args: Subset<T, UsuariosAggregateArgs>): Prisma.PrismaPromise<GetUsuariosAggregateType<T>>

    /**
     * Group by Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuariosGroupByArgs['orderBy'] }
        : { orderBy?: UsuariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuariosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuarios model
   */
  readonly fields: UsuariosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuarios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuariosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Roupas<T extends Usuarios$RoupasArgs<ExtArgs> = {}>(args?: Subset<T, Usuarios$RoupasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoupasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuarios model
   */
  interface UsuariosFieldRefs {
    readonly id: FieldRef<"Usuarios", 'Int'>
    readonly nome: FieldRef<"Usuarios", 'String'>
    readonly email: FieldRef<"Usuarios", 'String'>
    readonly senha: FieldRef<"Usuarios", 'String'>
    readonly criado_em: FieldRef<"Usuarios", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Usuarios findUnique
   */
  export type UsuariosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuarios
     */
    omit?: UsuariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where: UsuariosWhereUniqueInput
  }

  /**
   * Usuarios findUniqueOrThrow
   */
  export type UsuariosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuarios
     */
    omit?: UsuariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where: UsuariosWhereUniqueInput
  }

  /**
   * Usuarios findFirst
   */
  export type UsuariosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuarios
     */
    omit?: UsuariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuariosOrderByWithRelationInput | UsuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * Usuarios findFirstOrThrow
   */
  export type UsuariosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuarios
     */
    omit?: UsuariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuariosOrderByWithRelationInput | UsuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * Usuarios findMany
   */
  export type UsuariosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuarios
     */
    omit?: UsuariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuariosOrderByWithRelationInput | UsuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * Usuarios create
   */
  export type UsuariosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuarios
     */
    omit?: UsuariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuarios.
     */
    data: XOR<UsuariosCreateInput, UsuariosUncheckedCreateInput>
  }

  /**
   * Usuarios createMany
   */
  export type UsuariosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuariosCreateManyInput | UsuariosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuarios update
   */
  export type UsuariosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuarios
     */
    omit?: UsuariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuarios.
     */
    data: XOR<UsuariosUpdateInput, UsuariosUncheckedUpdateInput>
    /**
     * Choose, which Usuarios to update.
     */
    where: UsuariosWhereUniqueInput
  }

  /**
   * Usuarios updateMany
   */
  export type UsuariosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuariosUpdateManyMutationInput, UsuariosUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuariosWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuarios upsert
   */
  export type UsuariosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuarios
     */
    omit?: UsuariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuarios to update in case it exists.
     */
    where: UsuariosWhereUniqueInput
    /**
     * In case the Usuarios found by the `where` argument doesn't exist, create a new Usuarios with this data.
     */
    create: XOR<UsuariosCreateInput, UsuariosUncheckedCreateInput>
    /**
     * In case the Usuarios was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuariosUpdateInput, UsuariosUncheckedUpdateInput>
  }

  /**
   * Usuarios delete
   */
  export type UsuariosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuarios
     */
    omit?: UsuariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * Filter which Usuarios to delete.
     */
    where: UsuariosWhereUniqueInput
  }

  /**
   * Usuarios deleteMany
   */
  export type UsuariosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuariosWhereInput
    /**
     * Limit how many Usuarios to delete.
     */
    limit?: number
  }

  /**
   * Usuarios.Roupas
   */
  export type Usuarios$RoupasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roupas
     */
    select?: RoupasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Roupas
     */
    omit?: RoupasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoupasInclude<ExtArgs> | null
    where?: RoupasWhereInput
    orderBy?: RoupasOrderByWithRelationInput | RoupasOrderByWithRelationInput[]
    cursor?: RoupasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoupasScalarFieldEnum | RoupasScalarFieldEnum[]
  }

  /**
   * Usuarios without action
   */
  export type UsuariosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuarios
     */
    omit?: UsuariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
  }


  /**
   * Model Vendas
   */

  export type AggregateVendas = {
    _count: VendasCountAggregateOutputType | null
    _avg: VendasAvgAggregateOutputType | null
    _sum: VendasSumAggregateOutputType | null
    _min: VendasMinAggregateOutputType | null
    _max: VendasMaxAggregateOutputType | null
  }

  export type VendasAvgAggregateOutputType = {
    id: number | null
    valor_total: number | null
    desconto: number | null
    valor_pago: number | null
  }

  export type VendasSumAggregateOutputType = {
    id: number | null
    valor_total: number | null
    desconto: number | null
    valor_pago: number | null
  }

  export type VendasMinAggregateOutputType = {
    id: number | null
    data_venda: Date | null
    forma_pgto: string | null
    valor_total: number | null
    desconto: number | null
    valor_pago: number | null
  }

  export type VendasMaxAggregateOutputType = {
    id: number | null
    data_venda: Date | null
    forma_pgto: string | null
    valor_total: number | null
    desconto: number | null
    valor_pago: number | null
  }

  export type VendasCountAggregateOutputType = {
    id: number
    data_venda: number
    forma_pgto: number
    valor_total: number
    desconto: number
    valor_pago: number
    _all: number
  }


  export type VendasAvgAggregateInputType = {
    id?: true
    valor_total?: true
    desconto?: true
    valor_pago?: true
  }

  export type VendasSumAggregateInputType = {
    id?: true
    valor_total?: true
    desconto?: true
    valor_pago?: true
  }

  export type VendasMinAggregateInputType = {
    id?: true
    data_venda?: true
    forma_pgto?: true
    valor_total?: true
    desconto?: true
    valor_pago?: true
  }

  export type VendasMaxAggregateInputType = {
    id?: true
    data_venda?: true
    forma_pgto?: true
    valor_total?: true
    desconto?: true
    valor_pago?: true
  }

  export type VendasCountAggregateInputType = {
    id?: true
    data_venda?: true
    forma_pgto?: true
    valor_total?: true
    desconto?: true
    valor_pago?: true
    _all?: true
  }

  export type VendasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendas to aggregate.
     */
    where?: VendasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendas to fetch.
     */
    orderBy?: VendasOrderByWithRelationInput | VendasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VendasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vendas
    **/
    _count?: true | VendasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VendasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VendasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VendasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VendasMaxAggregateInputType
  }

  export type GetVendasAggregateType<T extends VendasAggregateArgs> = {
        [P in keyof T & keyof AggregateVendas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVendas[P]>
      : GetScalarType<T[P], AggregateVendas[P]>
  }




  export type VendasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VendasWhereInput
    orderBy?: VendasOrderByWithAggregationInput | VendasOrderByWithAggregationInput[]
    by: VendasScalarFieldEnum[] | VendasScalarFieldEnum
    having?: VendasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VendasCountAggregateInputType | true
    _avg?: VendasAvgAggregateInputType
    _sum?: VendasSumAggregateInputType
    _min?: VendasMinAggregateInputType
    _max?: VendasMaxAggregateInputType
  }

  export type VendasGroupByOutputType = {
    id: number
    data_venda: Date
    forma_pgto: string
    valor_total: number
    desconto: number
    valor_pago: number
    _count: VendasCountAggregateOutputType | null
    _avg: VendasAvgAggregateOutputType | null
    _sum: VendasSumAggregateOutputType | null
    _min: VendasMinAggregateOutputType | null
    _max: VendasMaxAggregateOutputType | null
  }

  type GetVendasGroupByPayload<T extends VendasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VendasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VendasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VendasGroupByOutputType[P]>
            : GetScalarType<T[P], VendasGroupByOutputType[P]>
        }
      >
    >


  export type VendasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    data_venda?: boolean
    forma_pgto?: boolean
    valor_total?: boolean
    desconto?: boolean
    valor_pago?: boolean
    VendasItens?: boolean | Vendas$VendasItensArgs<ExtArgs>
    _count?: boolean | VendasCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vendas"]>



  export type VendasSelectScalar = {
    id?: boolean
    data_venda?: boolean
    forma_pgto?: boolean
    valor_total?: boolean
    desconto?: boolean
    valor_pago?: boolean
  }

  export type VendasOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "data_venda" | "forma_pgto" | "valor_total" | "desconto" | "valor_pago", ExtArgs["result"]["vendas"]>
  export type VendasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    VendasItens?: boolean | Vendas$VendasItensArgs<ExtArgs>
    _count?: boolean | VendasCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $VendasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vendas"
    objects: {
      VendasItens: Prisma.$VendasItensPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      data_venda: Date
      forma_pgto: string
      valor_total: number
      desconto: number
      valor_pago: number
    }, ExtArgs["result"]["vendas"]>
    composites: {}
  }

  type VendasGetPayload<S extends boolean | null | undefined | VendasDefaultArgs> = $Result.GetResult<Prisma.$VendasPayload, S>

  type VendasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VendasFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VendasCountAggregateInputType | true
    }

  export interface VendasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vendas'], meta: { name: 'Vendas' } }
    /**
     * Find zero or one Vendas that matches the filter.
     * @param {VendasFindUniqueArgs} args - Arguments to find a Vendas
     * @example
     * // Get one Vendas
     * const vendas = await prisma.vendas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VendasFindUniqueArgs>(args: SelectSubset<T, VendasFindUniqueArgs<ExtArgs>>): Prisma__VendasClient<$Result.GetResult<Prisma.$VendasPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Vendas that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VendasFindUniqueOrThrowArgs} args - Arguments to find a Vendas
     * @example
     * // Get one Vendas
     * const vendas = await prisma.vendas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VendasFindUniqueOrThrowArgs>(args: SelectSubset<T, VendasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VendasClient<$Result.GetResult<Prisma.$VendasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vendas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendasFindFirstArgs} args - Arguments to find a Vendas
     * @example
     * // Get one Vendas
     * const vendas = await prisma.vendas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VendasFindFirstArgs>(args?: SelectSubset<T, VendasFindFirstArgs<ExtArgs>>): Prisma__VendasClient<$Result.GetResult<Prisma.$VendasPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vendas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendasFindFirstOrThrowArgs} args - Arguments to find a Vendas
     * @example
     * // Get one Vendas
     * const vendas = await prisma.vendas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VendasFindFirstOrThrowArgs>(args?: SelectSubset<T, VendasFindFirstOrThrowArgs<ExtArgs>>): Prisma__VendasClient<$Result.GetResult<Prisma.$VendasPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Vendas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vendas
     * const vendas = await prisma.vendas.findMany()
     * 
     * // Get first 10 Vendas
     * const vendas = await prisma.vendas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vendasWithIdOnly = await prisma.vendas.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VendasFindManyArgs>(args?: SelectSubset<T, VendasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Vendas.
     * @param {VendasCreateArgs} args - Arguments to create a Vendas.
     * @example
     * // Create one Vendas
     * const Vendas = await prisma.vendas.create({
     *   data: {
     *     // ... data to create a Vendas
     *   }
     * })
     * 
     */
    create<T extends VendasCreateArgs>(args: SelectSubset<T, VendasCreateArgs<ExtArgs>>): Prisma__VendasClient<$Result.GetResult<Prisma.$VendasPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Vendas.
     * @param {VendasCreateManyArgs} args - Arguments to create many Vendas.
     * @example
     * // Create many Vendas
     * const vendas = await prisma.vendas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VendasCreateManyArgs>(args?: SelectSubset<T, VendasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Vendas.
     * @param {VendasDeleteArgs} args - Arguments to delete one Vendas.
     * @example
     * // Delete one Vendas
     * const Vendas = await prisma.vendas.delete({
     *   where: {
     *     // ... filter to delete one Vendas
     *   }
     * })
     * 
     */
    delete<T extends VendasDeleteArgs>(args: SelectSubset<T, VendasDeleteArgs<ExtArgs>>): Prisma__VendasClient<$Result.GetResult<Prisma.$VendasPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Vendas.
     * @param {VendasUpdateArgs} args - Arguments to update one Vendas.
     * @example
     * // Update one Vendas
     * const vendas = await prisma.vendas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VendasUpdateArgs>(args: SelectSubset<T, VendasUpdateArgs<ExtArgs>>): Prisma__VendasClient<$Result.GetResult<Prisma.$VendasPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Vendas.
     * @param {VendasDeleteManyArgs} args - Arguments to filter Vendas to delete.
     * @example
     * // Delete a few Vendas
     * const { count } = await prisma.vendas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VendasDeleteManyArgs>(args?: SelectSubset<T, VendasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vendas
     * const vendas = await prisma.vendas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VendasUpdateManyArgs>(args: SelectSubset<T, VendasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vendas.
     * @param {VendasUpsertArgs} args - Arguments to update or create a Vendas.
     * @example
     * // Update or create a Vendas
     * const vendas = await prisma.vendas.upsert({
     *   create: {
     *     // ... data to create a Vendas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vendas we want to update
     *   }
     * })
     */
    upsert<T extends VendasUpsertArgs>(args: SelectSubset<T, VendasUpsertArgs<ExtArgs>>): Prisma__VendasClient<$Result.GetResult<Prisma.$VendasPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Vendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendasCountArgs} args - Arguments to filter Vendas to count.
     * @example
     * // Count the number of Vendas
     * const count = await prisma.vendas.count({
     *   where: {
     *     // ... the filter for the Vendas we want to count
     *   }
     * })
    **/
    count<T extends VendasCountArgs>(
      args?: Subset<T, VendasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VendasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VendasAggregateArgs>(args: Subset<T, VendasAggregateArgs>): Prisma.PrismaPromise<GetVendasAggregateType<T>>

    /**
     * Group by Vendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VendasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VendasGroupByArgs['orderBy'] }
        : { orderBy?: VendasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VendasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVendasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vendas model
   */
  readonly fields: VendasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vendas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VendasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    VendasItens<T extends Vendas$VendasItensArgs<ExtArgs> = {}>(args?: Subset<T, Vendas$VendasItensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendasItensPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vendas model
   */
  interface VendasFieldRefs {
    readonly id: FieldRef<"Vendas", 'Int'>
    readonly data_venda: FieldRef<"Vendas", 'DateTime'>
    readonly forma_pgto: FieldRef<"Vendas", 'String'>
    readonly valor_total: FieldRef<"Vendas", 'Float'>
    readonly desconto: FieldRef<"Vendas", 'Float'>
    readonly valor_pago: FieldRef<"Vendas", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Vendas findUnique
   */
  export type VendasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendas
     */
    select?: VendasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendas
     */
    omit?: VendasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendasInclude<ExtArgs> | null
    /**
     * Filter, which Vendas to fetch.
     */
    where: VendasWhereUniqueInput
  }

  /**
   * Vendas findUniqueOrThrow
   */
  export type VendasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendas
     */
    select?: VendasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendas
     */
    omit?: VendasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendasInclude<ExtArgs> | null
    /**
     * Filter, which Vendas to fetch.
     */
    where: VendasWhereUniqueInput
  }

  /**
   * Vendas findFirst
   */
  export type VendasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendas
     */
    select?: VendasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendas
     */
    omit?: VendasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendasInclude<ExtArgs> | null
    /**
     * Filter, which Vendas to fetch.
     */
    where?: VendasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendas to fetch.
     */
    orderBy?: VendasOrderByWithRelationInput | VendasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendas.
     */
    cursor?: VendasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendas.
     */
    distinct?: VendasScalarFieldEnum | VendasScalarFieldEnum[]
  }

  /**
   * Vendas findFirstOrThrow
   */
  export type VendasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendas
     */
    select?: VendasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendas
     */
    omit?: VendasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendasInclude<ExtArgs> | null
    /**
     * Filter, which Vendas to fetch.
     */
    where?: VendasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendas to fetch.
     */
    orderBy?: VendasOrderByWithRelationInput | VendasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendas.
     */
    cursor?: VendasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendas.
     */
    distinct?: VendasScalarFieldEnum | VendasScalarFieldEnum[]
  }

  /**
   * Vendas findMany
   */
  export type VendasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendas
     */
    select?: VendasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendas
     */
    omit?: VendasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendasInclude<ExtArgs> | null
    /**
     * Filter, which Vendas to fetch.
     */
    where?: VendasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendas to fetch.
     */
    orderBy?: VendasOrderByWithRelationInput | VendasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vendas.
     */
    cursor?: VendasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendas.
     */
    skip?: number
    distinct?: VendasScalarFieldEnum | VendasScalarFieldEnum[]
  }

  /**
   * Vendas create
   */
  export type VendasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendas
     */
    select?: VendasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendas
     */
    omit?: VendasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendasInclude<ExtArgs> | null
    /**
     * The data needed to create a Vendas.
     */
    data: XOR<VendasCreateInput, VendasUncheckedCreateInput>
  }

  /**
   * Vendas createMany
   */
  export type VendasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vendas.
     */
    data: VendasCreateManyInput | VendasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vendas update
   */
  export type VendasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendas
     */
    select?: VendasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendas
     */
    omit?: VendasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendasInclude<ExtArgs> | null
    /**
     * The data needed to update a Vendas.
     */
    data: XOR<VendasUpdateInput, VendasUncheckedUpdateInput>
    /**
     * Choose, which Vendas to update.
     */
    where: VendasWhereUniqueInput
  }

  /**
   * Vendas updateMany
   */
  export type VendasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vendas.
     */
    data: XOR<VendasUpdateManyMutationInput, VendasUncheckedUpdateManyInput>
    /**
     * Filter which Vendas to update
     */
    where?: VendasWhereInput
    /**
     * Limit how many Vendas to update.
     */
    limit?: number
  }

  /**
   * Vendas upsert
   */
  export type VendasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendas
     */
    select?: VendasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendas
     */
    omit?: VendasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendasInclude<ExtArgs> | null
    /**
     * The filter to search for the Vendas to update in case it exists.
     */
    where: VendasWhereUniqueInput
    /**
     * In case the Vendas found by the `where` argument doesn't exist, create a new Vendas with this data.
     */
    create: XOR<VendasCreateInput, VendasUncheckedCreateInput>
    /**
     * In case the Vendas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VendasUpdateInput, VendasUncheckedUpdateInput>
  }

  /**
   * Vendas delete
   */
  export type VendasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendas
     */
    select?: VendasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendas
     */
    omit?: VendasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendasInclude<ExtArgs> | null
    /**
     * Filter which Vendas to delete.
     */
    where: VendasWhereUniqueInput
  }

  /**
   * Vendas deleteMany
   */
  export type VendasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendas to delete
     */
    where?: VendasWhereInput
    /**
     * Limit how many Vendas to delete.
     */
    limit?: number
  }

  /**
   * Vendas.VendasItens
   */
  export type Vendas$VendasItensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendasItens
     */
    select?: VendasItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VendasItens
     */
    omit?: VendasItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendasItensInclude<ExtArgs> | null
    where?: VendasItensWhereInput
    orderBy?: VendasItensOrderByWithRelationInput | VendasItensOrderByWithRelationInput[]
    cursor?: VendasItensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VendasItensScalarFieldEnum | VendasItensScalarFieldEnum[]
  }

  /**
   * Vendas without action
   */
  export type VendasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendas
     */
    select?: VendasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendas
     */
    omit?: VendasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendasInclude<ExtArgs> | null
  }


  /**
   * Model VendasItens
   */

  export type AggregateVendasItens = {
    _count: VendasItensCountAggregateOutputType | null
    _avg: VendasItensAvgAggregateOutputType | null
    _sum: VendasItensSumAggregateOutputType | null
    _min: VendasItensMinAggregateOutputType | null
    _max: VendasItensMaxAggregateOutputType | null
  }

  export type VendasItensAvgAggregateOutputType = {
    id: number | null
    roupas_id: number | null
    vendas_id: number | null
    quatidade: number | null
  }

  export type VendasItensSumAggregateOutputType = {
    id: number | null
    roupas_id: number | null
    vendas_id: number | null
    quatidade: number | null
  }

  export type VendasItensMinAggregateOutputType = {
    id: number | null
    roupas_id: number | null
    vendas_id: number | null
    quatidade: number | null
  }

  export type VendasItensMaxAggregateOutputType = {
    id: number | null
    roupas_id: number | null
    vendas_id: number | null
    quatidade: number | null
  }

  export type VendasItensCountAggregateOutputType = {
    id: number
    roupas_id: number
    vendas_id: number
    quatidade: number
    _all: number
  }


  export type VendasItensAvgAggregateInputType = {
    id?: true
    roupas_id?: true
    vendas_id?: true
    quatidade?: true
  }

  export type VendasItensSumAggregateInputType = {
    id?: true
    roupas_id?: true
    vendas_id?: true
    quatidade?: true
  }

  export type VendasItensMinAggregateInputType = {
    id?: true
    roupas_id?: true
    vendas_id?: true
    quatidade?: true
  }

  export type VendasItensMaxAggregateInputType = {
    id?: true
    roupas_id?: true
    vendas_id?: true
    quatidade?: true
  }

  export type VendasItensCountAggregateInputType = {
    id?: true
    roupas_id?: true
    vendas_id?: true
    quatidade?: true
    _all?: true
  }

  export type VendasItensAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VendasItens to aggregate.
     */
    where?: VendasItensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VendasItens to fetch.
     */
    orderBy?: VendasItensOrderByWithRelationInput | VendasItensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VendasItensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VendasItens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VendasItens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VendasItens
    **/
    _count?: true | VendasItensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VendasItensAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VendasItensSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VendasItensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VendasItensMaxAggregateInputType
  }

  export type GetVendasItensAggregateType<T extends VendasItensAggregateArgs> = {
        [P in keyof T & keyof AggregateVendasItens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVendasItens[P]>
      : GetScalarType<T[P], AggregateVendasItens[P]>
  }




  export type VendasItensGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VendasItensWhereInput
    orderBy?: VendasItensOrderByWithAggregationInput | VendasItensOrderByWithAggregationInput[]
    by: VendasItensScalarFieldEnum[] | VendasItensScalarFieldEnum
    having?: VendasItensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VendasItensCountAggregateInputType | true
    _avg?: VendasItensAvgAggregateInputType
    _sum?: VendasItensSumAggregateInputType
    _min?: VendasItensMinAggregateInputType
    _max?: VendasItensMaxAggregateInputType
  }

  export type VendasItensGroupByOutputType = {
    id: number
    roupas_id: number
    vendas_id: number
    quatidade: number
    _count: VendasItensCountAggregateOutputType | null
    _avg: VendasItensAvgAggregateOutputType | null
    _sum: VendasItensSumAggregateOutputType | null
    _min: VendasItensMinAggregateOutputType | null
    _max: VendasItensMaxAggregateOutputType | null
  }

  type GetVendasItensGroupByPayload<T extends VendasItensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VendasItensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VendasItensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VendasItensGroupByOutputType[P]>
            : GetScalarType<T[P], VendasItensGroupByOutputType[P]>
        }
      >
    >


  export type VendasItensSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roupas_id?: boolean
    vendas_id?: boolean
    quatidade?: boolean
    Roupa?: boolean | RoupasDefaultArgs<ExtArgs>
    Venda?: boolean | VendasDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vendasItens"]>



  export type VendasItensSelectScalar = {
    id?: boolean
    roupas_id?: boolean
    vendas_id?: boolean
    quatidade?: boolean
  }

  export type VendasItensOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "roupas_id" | "vendas_id" | "quatidade", ExtArgs["result"]["vendasItens"]>
  export type VendasItensInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Roupa?: boolean | RoupasDefaultArgs<ExtArgs>
    Venda?: boolean | VendasDefaultArgs<ExtArgs>
  }

  export type $VendasItensPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VendasItens"
    objects: {
      Roupa: Prisma.$RoupasPayload<ExtArgs>
      Venda: Prisma.$VendasPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      roupas_id: number
      vendas_id: number
      quatidade: number
    }, ExtArgs["result"]["vendasItens"]>
    composites: {}
  }

  type VendasItensGetPayload<S extends boolean | null | undefined | VendasItensDefaultArgs> = $Result.GetResult<Prisma.$VendasItensPayload, S>

  type VendasItensCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VendasItensFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VendasItensCountAggregateInputType | true
    }

  export interface VendasItensDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VendasItens'], meta: { name: 'VendasItens' } }
    /**
     * Find zero or one VendasItens that matches the filter.
     * @param {VendasItensFindUniqueArgs} args - Arguments to find a VendasItens
     * @example
     * // Get one VendasItens
     * const vendasItens = await prisma.vendasItens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VendasItensFindUniqueArgs>(args: SelectSubset<T, VendasItensFindUniqueArgs<ExtArgs>>): Prisma__VendasItensClient<$Result.GetResult<Prisma.$VendasItensPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VendasItens that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VendasItensFindUniqueOrThrowArgs} args - Arguments to find a VendasItens
     * @example
     * // Get one VendasItens
     * const vendasItens = await prisma.vendasItens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VendasItensFindUniqueOrThrowArgs>(args: SelectSubset<T, VendasItensFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VendasItensClient<$Result.GetResult<Prisma.$VendasItensPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VendasItens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendasItensFindFirstArgs} args - Arguments to find a VendasItens
     * @example
     * // Get one VendasItens
     * const vendasItens = await prisma.vendasItens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VendasItensFindFirstArgs>(args?: SelectSubset<T, VendasItensFindFirstArgs<ExtArgs>>): Prisma__VendasItensClient<$Result.GetResult<Prisma.$VendasItensPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VendasItens that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendasItensFindFirstOrThrowArgs} args - Arguments to find a VendasItens
     * @example
     * // Get one VendasItens
     * const vendasItens = await prisma.vendasItens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VendasItensFindFirstOrThrowArgs>(args?: SelectSubset<T, VendasItensFindFirstOrThrowArgs<ExtArgs>>): Prisma__VendasItensClient<$Result.GetResult<Prisma.$VendasItensPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VendasItens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendasItensFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VendasItens
     * const vendasItens = await prisma.vendasItens.findMany()
     * 
     * // Get first 10 VendasItens
     * const vendasItens = await prisma.vendasItens.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vendasItensWithIdOnly = await prisma.vendasItens.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VendasItensFindManyArgs>(args?: SelectSubset<T, VendasItensFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendasItensPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VendasItens.
     * @param {VendasItensCreateArgs} args - Arguments to create a VendasItens.
     * @example
     * // Create one VendasItens
     * const VendasItens = await prisma.vendasItens.create({
     *   data: {
     *     // ... data to create a VendasItens
     *   }
     * })
     * 
     */
    create<T extends VendasItensCreateArgs>(args: SelectSubset<T, VendasItensCreateArgs<ExtArgs>>): Prisma__VendasItensClient<$Result.GetResult<Prisma.$VendasItensPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VendasItens.
     * @param {VendasItensCreateManyArgs} args - Arguments to create many VendasItens.
     * @example
     * // Create many VendasItens
     * const vendasItens = await prisma.vendasItens.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VendasItensCreateManyArgs>(args?: SelectSubset<T, VendasItensCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a VendasItens.
     * @param {VendasItensDeleteArgs} args - Arguments to delete one VendasItens.
     * @example
     * // Delete one VendasItens
     * const VendasItens = await prisma.vendasItens.delete({
     *   where: {
     *     // ... filter to delete one VendasItens
     *   }
     * })
     * 
     */
    delete<T extends VendasItensDeleteArgs>(args: SelectSubset<T, VendasItensDeleteArgs<ExtArgs>>): Prisma__VendasItensClient<$Result.GetResult<Prisma.$VendasItensPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VendasItens.
     * @param {VendasItensUpdateArgs} args - Arguments to update one VendasItens.
     * @example
     * // Update one VendasItens
     * const vendasItens = await prisma.vendasItens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VendasItensUpdateArgs>(args: SelectSubset<T, VendasItensUpdateArgs<ExtArgs>>): Prisma__VendasItensClient<$Result.GetResult<Prisma.$VendasItensPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VendasItens.
     * @param {VendasItensDeleteManyArgs} args - Arguments to filter VendasItens to delete.
     * @example
     * // Delete a few VendasItens
     * const { count } = await prisma.vendasItens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VendasItensDeleteManyArgs>(args?: SelectSubset<T, VendasItensDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VendasItens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendasItensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VendasItens
     * const vendasItens = await prisma.vendasItens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VendasItensUpdateManyArgs>(args: SelectSubset<T, VendasItensUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VendasItens.
     * @param {VendasItensUpsertArgs} args - Arguments to update or create a VendasItens.
     * @example
     * // Update or create a VendasItens
     * const vendasItens = await prisma.vendasItens.upsert({
     *   create: {
     *     // ... data to create a VendasItens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VendasItens we want to update
     *   }
     * })
     */
    upsert<T extends VendasItensUpsertArgs>(args: SelectSubset<T, VendasItensUpsertArgs<ExtArgs>>): Prisma__VendasItensClient<$Result.GetResult<Prisma.$VendasItensPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VendasItens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendasItensCountArgs} args - Arguments to filter VendasItens to count.
     * @example
     * // Count the number of VendasItens
     * const count = await prisma.vendasItens.count({
     *   where: {
     *     // ... the filter for the VendasItens we want to count
     *   }
     * })
    **/
    count<T extends VendasItensCountArgs>(
      args?: Subset<T, VendasItensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VendasItensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VendasItens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendasItensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VendasItensAggregateArgs>(args: Subset<T, VendasItensAggregateArgs>): Prisma.PrismaPromise<GetVendasItensAggregateType<T>>

    /**
     * Group by VendasItens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendasItensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VendasItensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VendasItensGroupByArgs['orderBy'] }
        : { orderBy?: VendasItensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VendasItensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVendasItensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VendasItens model
   */
  readonly fields: VendasItensFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VendasItens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VendasItensClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Roupa<T extends RoupasDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoupasDefaultArgs<ExtArgs>>): Prisma__RoupasClient<$Result.GetResult<Prisma.$RoupasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Venda<T extends VendasDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VendasDefaultArgs<ExtArgs>>): Prisma__VendasClient<$Result.GetResult<Prisma.$VendasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VendasItens model
   */
  interface VendasItensFieldRefs {
    readonly id: FieldRef<"VendasItens", 'Int'>
    readonly roupas_id: FieldRef<"VendasItens", 'Int'>
    readonly vendas_id: FieldRef<"VendasItens", 'Int'>
    readonly quatidade: FieldRef<"VendasItens", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * VendasItens findUnique
   */
  export type VendasItensFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendasItens
     */
    select?: VendasItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VendasItens
     */
    omit?: VendasItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendasItensInclude<ExtArgs> | null
    /**
     * Filter, which VendasItens to fetch.
     */
    where: VendasItensWhereUniqueInput
  }

  /**
   * VendasItens findUniqueOrThrow
   */
  export type VendasItensFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendasItens
     */
    select?: VendasItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VendasItens
     */
    omit?: VendasItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendasItensInclude<ExtArgs> | null
    /**
     * Filter, which VendasItens to fetch.
     */
    where: VendasItensWhereUniqueInput
  }

  /**
   * VendasItens findFirst
   */
  export type VendasItensFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendasItens
     */
    select?: VendasItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VendasItens
     */
    omit?: VendasItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendasItensInclude<ExtArgs> | null
    /**
     * Filter, which VendasItens to fetch.
     */
    where?: VendasItensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VendasItens to fetch.
     */
    orderBy?: VendasItensOrderByWithRelationInput | VendasItensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VendasItens.
     */
    cursor?: VendasItensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VendasItens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VendasItens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VendasItens.
     */
    distinct?: VendasItensScalarFieldEnum | VendasItensScalarFieldEnum[]
  }

  /**
   * VendasItens findFirstOrThrow
   */
  export type VendasItensFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendasItens
     */
    select?: VendasItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VendasItens
     */
    omit?: VendasItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendasItensInclude<ExtArgs> | null
    /**
     * Filter, which VendasItens to fetch.
     */
    where?: VendasItensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VendasItens to fetch.
     */
    orderBy?: VendasItensOrderByWithRelationInput | VendasItensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VendasItens.
     */
    cursor?: VendasItensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VendasItens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VendasItens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VendasItens.
     */
    distinct?: VendasItensScalarFieldEnum | VendasItensScalarFieldEnum[]
  }

  /**
   * VendasItens findMany
   */
  export type VendasItensFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendasItens
     */
    select?: VendasItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VendasItens
     */
    omit?: VendasItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendasItensInclude<ExtArgs> | null
    /**
     * Filter, which VendasItens to fetch.
     */
    where?: VendasItensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VendasItens to fetch.
     */
    orderBy?: VendasItensOrderByWithRelationInput | VendasItensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VendasItens.
     */
    cursor?: VendasItensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VendasItens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VendasItens.
     */
    skip?: number
    distinct?: VendasItensScalarFieldEnum | VendasItensScalarFieldEnum[]
  }

  /**
   * VendasItens create
   */
  export type VendasItensCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendasItens
     */
    select?: VendasItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VendasItens
     */
    omit?: VendasItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendasItensInclude<ExtArgs> | null
    /**
     * The data needed to create a VendasItens.
     */
    data: XOR<VendasItensCreateInput, VendasItensUncheckedCreateInput>
  }

  /**
   * VendasItens createMany
   */
  export type VendasItensCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VendasItens.
     */
    data: VendasItensCreateManyInput | VendasItensCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VendasItens update
   */
  export type VendasItensUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendasItens
     */
    select?: VendasItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VendasItens
     */
    omit?: VendasItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendasItensInclude<ExtArgs> | null
    /**
     * The data needed to update a VendasItens.
     */
    data: XOR<VendasItensUpdateInput, VendasItensUncheckedUpdateInput>
    /**
     * Choose, which VendasItens to update.
     */
    where: VendasItensWhereUniqueInput
  }

  /**
   * VendasItens updateMany
   */
  export type VendasItensUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VendasItens.
     */
    data: XOR<VendasItensUpdateManyMutationInput, VendasItensUncheckedUpdateManyInput>
    /**
     * Filter which VendasItens to update
     */
    where?: VendasItensWhereInput
    /**
     * Limit how many VendasItens to update.
     */
    limit?: number
  }

  /**
   * VendasItens upsert
   */
  export type VendasItensUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendasItens
     */
    select?: VendasItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VendasItens
     */
    omit?: VendasItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendasItensInclude<ExtArgs> | null
    /**
     * The filter to search for the VendasItens to update in case it exists.
     */
    where: VendasItensWhereUniqueInput
    /**
     * In case the VendasItens found by the `where` argument doesn't exist, create a new VendasItens with this data.
     */
    create: XOR<VendasItensCreateInput, VendasItensUncheckedCreateInput>
    /**
     * In case the VendasItens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VendasItensUpdateInput, VendasItensUncheckedUpdateInput>
  }

  /**
   * VendasItens delete
   */
  export type VendasItensDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendasItens
     */
    select?: VendasItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VendasItens
     */
    omit?: VendasItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendasItensInclude<ExtArgs> | null
    /**
     * Filter which VendasItens to delete.
     */
    where: VendasItensWhereUniqueInput
  }

  /**
   * VendasItens deleteMany
   */
  export type VendasItensDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VendasItens to delete
     */
    where?: VendasItensWhereInput
    /**
     * Limit how many VendasItens to delete.
     */
    limit?: number
  }

  /**
   * VendasItens without action
   */
  export type VendasItensDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendasItens
     */
    select?: VendasItensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VendasItens
     */
    omit?: VendasItensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendasItensInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const BaixaScalarFieldEnum: {
    id: 'id',
    roupa_id: 'roupa_id',
    quantidade: 'quantidade',
    data_baixa: 'data_baixa',
    motivo: 'motivo'
  };

  export type BaixaScalarFieldEnum = (typeof BaixaScalarFieldEnum)[keyof typeof BaixaScalarFieldEnum]


  export const ClienteScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    cpf: 'cpf',
    criado_em: 'criado_em',
    telefone: 'telefone',
    endereco: 'endereco'
  };

  export type ClienteScalarFieldEnum = (typeof ClienteScalarFieldEnum)[keyof typeof ClienteScalarFieldEnum]


  export const ComprasScalarFieldEnum: {
    id: 'id',
    data_compra: 'data_compra',
    forma_pgto: 'forma_pgto',
    valor_pago: 'valor_pago',
    fornecendor: 'fornecendor',
    telefone_forncedor: 'telefone_forncedor'
  };

  export type ComprasScalarFieldEnum = (typeof ComprasScalarFieldEnum)[keyof typeof ComprasScalarFieldEnum]


  export const ComprasItensScalarFieldEnum: {
    id: 'id',
    roupas_id: 'roupas_id',
    compras_id: 'compras_id',
    quatidade: 'quatidade',
    valor_peça: 'valor_peça'
  };

  export type ComprasItensScalarFieldEnum = (typeof ComprasItensScalarFieldEnum)[keyof typeof ComprasItensScalarFieldEnum]


  export const CondicionaisScalarFieldEnum: {
    id: 'id',
    cliente_id: 'cliente_id',
    data: 'data',
    data_devolucao: 'data_devolucao',
    devolvido: 'devolvido'
  };

  export type CondicionaisScalarFieldEnum = (typeof CondicionaisScalarFieldEnum)[keyof typeof CondicionaisScalarFieldEnum]


  export const CondicionaisItensScalarFieldEnum: {
    id: 'id',
    roupas_id: 'roupas_id',
    condicionais_id: 'condicionais_id',
    quatidade: 'quatidade'
  };

  export type CondicionaisItensScalarFieldEnum = (typeof CondicionaisItensScalarFieldEnum)[keyof typeof CondicionaisItensScalarFieldEnum]


  export const HistoricoStatusScalarFieldEnum: {
    id: 'id',
    roupas_id: 'roupas_id',
    status_anterior: 'status_anterior',
    status_novo: 'status_novo',
    alterado_em: 'alterado_em'
  };

  export type HistoricoStatusScalarFieldEnum = (typeof HistoricoStatusScalarFieldEnum)[keyof typeof HistoricoStatusScalarFieldEnum]


  export const RoupasScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    descricao: 'descricao',
    tipo: 'tipo',
    tamanho: 'tamanho',
    cor: 'cor',
    preco: 'preco',
    quantidade: 'quantidade',
    usuarios_id: 'usuarios_id',
    criado_em: 'criado_em'
  };

  export type RoupasScalarFieldEnum = (typeof RoupasScalarFieldEnum)[keyof typeof RoupasScalarFieldEnum]


  export const UsuariosScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    senha: 'senha',
    criado_em: 'criado_em'
  };

  export type UsuariosScalarFieldEnum = (typeof UsuariosScalarFieldEnum)[keyof typeof UsuariosScalarFieldEnum]


  export const VendasScalarFieldEnum: {
    id: 'id',
    data_venda: 'data_venda',
    forma_pgto: 'forma_pgto',
    valor_total: 'valor_total',
    desconto: 'desconto',
    valor_pago: 'valor_pago'
  };

  export type VendasScalarFieldEnum = (typeof VendasScalarFieldEnum)[keyof typeof VendasScalarFieldEnum]


  export const VendasItensScalarFieldEnum: {
    id: 'id',
    roupas_id: 'roupas_id',
    vendas_id: 'vendas_id',
    quatidade: 'quatidade'
  };

  export type VendasItensScalarFieldEnum = (typeof VendasItensScalarFieldEnum)[keyof typeof VendasItensScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const BaixaOrderByRelevanceFieldEnum: {
    motivo: 'motivo'
  };

  export type BaixaOrderByRelevanceFieldEnum = (typeof BaixaOrderByRelevanceFieldEnum)[keyof typeof BaixaOrderByRelevanceFieldEnum]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const ClienteOrderByRelevanceFieldEnum: {
    nome: 'nome',
    email: 'email',
    cpf: 'cpf',
    telefone: 'telefone',
    endereco: 'endereco'
  };

  export type ClienteOrderByRelevanceFieldEnum = (typeof ClienteOrderByRelevanceFieldEnum)[keyof typeof ClienteOrderByRelevanceFieldEnum]


  export const ComprasOrderByRelevanceFieldEnum: {
    forma_pgto: 'forma_pgto',
    fornecendor: 'fornecendor',
    telefone_forncedor: 'telefone_forncedor'
  };

  export type ComprasOrderByRelevanceFieldEnum = (typeof ComprasOrderByRelevanceFieldEnum)[keyof typeof ComprasOrderByRelevanceFieldEnum]


  export const RoupasOrderByRelevanceFieldEnum: {
    nome: 'nome',
    descricao: 'descricao',
    tipo: 'tipo',
    tamanho: 'tamanho',
    cor: 'cor'
  };

  export type RoupasOrderByRelevanceFieldEnum = (typeof RoupasOrderByRelevanceFieldEnum)[keyof typeof RoupasOrderByRelevanceFieldEnum]


  export const UsuariosOrderByRelevanceFieldEnum: {
    nome: 'nome',
    email: 'email',
    senha: 'senha'
  };

  export type UsuariosOrderByRelevanceFieldEnum = (typeof UsuariosOrderByRelevanceFieldEnum)[keyof typeof UsuariosOrderByRelevanceFieldEnum]


  export const VendasOrderByRelevanceFieldEnum: {
    forma_pgto: 'forma_pgto'
  };

  export type VendasOrderByRelevanceFieldEnum = (typeof VendasOrderByRelevanceFieldEnum)[keyof typeof VendasOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Status'
   */
  export type EnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status'>
    
  /**
   * Deep Input Types
   */


  export type BaixaWhereInput = {
    AND?: BaixaWhereInput | BaixaWhereInput[]
    OR?: BaixaWhereInput[]
    NOT?: BaixaWhereInput | BaixaWhereInput[]
    id?: IntFilter<"Baixa"> | number
    roupa_id?: IntFilter<"Baixa"> | number
    quantidade?: IntFilter<"Baixa"> | number
    data_baixa?: DateTimeFilter<"Baixa"> | Date | string
    motivo?: StringFilter<"Baixa"> | string
    Roupa?: XOR<RoupasScalarRelationFilter, RoupasWhereInput>
  }

  export type BaixaOrderByWithRelationInput = {
    id?: SortOrder
    roupa_id?: SortOrder
    quantidade?: SortOrder
    data_baixa?: SortOrder
    motivo?: SortOrder
    Roupa?: RoupasOrderByWithRelationInput
    _relevance?: BaixaOrderByRelevanceInput
  }

  export type BaixaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BaixaWhereInput | BaixaWhereInput[]
    OR?: BaixaWhereInput[]
    NOT?: BaixaWhereInput | BaixaWhereInput[]
    roupa_id?: IntFilter<"Baixa"> | number
    quantidade?: IntFilter<"Baixa"> | number
    data_baixa?: DateTimeFilter<"Baixa"> | Date | string
    motivo?: StringFilter<"Baixa"> | string
    Roupa?: XOR<RoupasScalarRelationFilter, RoupasWhereInput>
  }, "id">

  export type BaixaOrderByWithAggregationInput = {
    id?: SortOrder
    roupa_id?: SortOrder
    quantidade?: SortOrder
    data_baixa?: SortOrder
    motivo?: SortOrder
    _count?: BaixaCountOrderByAggregateInput
    _avg?: BaixaAvgOrderByAggregateInput
    _max?: BaixaMaxOrderByAggregateInput
    _min?: BaixaMinOrderByAggregateInput
    _sum?: BaixaSumOrderByAggregateInput
  }

  export type BaixaScalarWhereWithAggregatesInput = {
    AND?: BaixaScalarWhereWithAggregatesInput | BaixaScalarWhereWithAggregatesInput[]
    OR?: BaixaScalarWhereWithAggregatesInput[]
    NOT?: BaixaScalarWhereWithAggregatesInput | BaixaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Baixa"> | number
    roupa_id?: IntWithAggregatesFilter<"Baixa"> | number
    quantidade?: IntWithAggregatesFilter<"Baixa"> | number
    data_baixa?: DateTimeWithAggregatesFilter<"Baixa"> | Date | string
    motivo?: StringWithAggregatesFilter<"Baixa"> | string
  }

  export type ClienteWhereInput = {
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    id?: IntFilter<"Cliente"> | number
    nome?: StringFilter<"Cliente"> | string
    email?: StringFilter<"Cliente"> | string
    cpf?: StringFilter<"Cliente"> | string
    criado_em?: DateTimeFilter<"Cliente"> | Date | string
    telefone?: StringNullableFilter<"Cliente"> | string | null
    endereco?: StringNullableFilter<"Cliente"> | string | null
    Condicionais?: CondicionaisListRelationFilter
  }

  export type ClienteOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    cpf?: SortOrder
    criado_em?: SortOrder
    telefone?: SortOrderInput | SortOrder
    endereco?: SortOrderInput | SortOrder
    Condicionais?: CondicionaisOrderByRelationAggregateInput
    _relevance?: ClienteOrderByRelevanceInput
  }

  export type ClienteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    nome?: StringFilter<"Cliente"> | string
    cpf?: StringFilter<"Cliente"> | string
    criado_em?: DateTimeFilter<"Cliente"> | Date | string
    telefone?: StringNullableFilter<"Cliente"> | string | null
    endereco?: StringNullableFilter<"Cliente"> | string | null
    Condicionais?: CondicionaisListRelationFilter
  }, "id" | "email">

  export type ClienteOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    cpf?: SortOrder
    criado_em?: SortOrder
    telefone?: SortOrderInput | SortOrder
    endereco?: SortOrderInput | SortOrder
    _count?: ClienteCountOrderByAggregateInput
    _avg?: ClienteAvgOrderByAggregateInput
    _max?: ClienteMaxOrderByAggregateInput
    _min?: ClienteMinOrderByAggregateInput
    _sum?: ClienteSumOrderByAggregateInput
  }

  export type ClienteScalarWhereWithAggregatesInput = {
    AND?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    OR?: ClienteScalarWhereWithAggregatesInput[]
    NOT?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Cliente"> | number
    nome?: StringWithAggregatesFilter<"Cliente"> | string
    email?: StringWithAggregatesFilter<"Cliente"> | string
    cpf?: StringWithAggregatesFilter<"Cliente"> | string
    criado_em?: DateTimeWithAggregatesFilter<"Cliente"> | Date | string
    telefone?: StringNullableWithAggregatesFilter<"Cliente"> | string | null
    endereco?: StringNullableWithAggregatesFilter<"Cliente"> | string | null
  }

  export type ComprasWhereInput = {
    AND?: ComprasWhereInput | ComprasWhereInput[]
    OR?: ComprasWhereInput[]
    NOT?: ComprasWhereInput | ComprasWhereInput[]
    id?: IntFilter<"Compras"> | number
    data_compra?: DateTimeFilter<"Compras"> | Date | string
    forma_pgto?: StringFilter<"Compras"> | string
    valor_pago?: FloatFilter<"Compras"> | number
    fornecendor?: StringNullableFilter<"Compras"> | string | null
    telefone_forncedor?: StringNullableFilter<"Compras"> | string | null
    ComprasItens?: ComprasItensListRelationFilter
  }

  export type ComprasOrderByWithRelationInput = {
    id?: SortOrder
    data_compra?: SortOrder
    forma_pgto?: SortOrder
    valor_pago?: SortOrder
    fornecendor?: SortOrderInput | SortOrder
    telefone_forncedor?: SortOrderInput | SortOrder
    ComprasItens?: ComprasItensOrderByRelationAggregateInput
    _relevance?: ComprasOrderByRelevanceInput
  }

  export type ComprasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ComprasWhereInput | ComprasWhereInput[]
    OR?: ComprasWhereInput[]
    NOT?: ComprasWhereInput | ComprasWhereInput[]
    data_compra?: DateTimeFilter<"Compras"> | Date | string
    forma_pgto?: StringFilter<"Compras"> | string
    valor_pago?: FloatFilter<"Compras"> | number
    fornecendor?: StringNullableFilter<"Compras"> | string | null
    telefone_forncedor?: StringNullableFilter<"Compras"> | string | null
    ComprasItens?: ComprasItensListRelationFilter
  }, "id">

  export type ComprasOrderByWithAggregationInput = {
    id?: SortOrder
    data_compra?: SortOrder
    forma_pgto?: SortOrder
    valor_pago?: SortOrder
    fornecendor?: SortOrderInput | SortOrder
    telefone_forncedor?: SortOrderInput | SortOrder
    _count?: ComprasCountOrderByAggregateInput
    _avg?: ComprasAvgOrderByAggregateInput
    _max?: ComprasMaxOrderByAggregateInput
    _min?: ComprasMinOrderByAggregateInput
    _sum?: ComprasSumOrderByAggregateInput
  }

  export type ComprasScalarWhereWithAggregatesInput = {
    AND?: ComprasScalarWhereWithAggregatesInput | ComprasScalarWhereWithAggregatesInput[]
    OR?: ComprasScalarWhereWithAggregatesInput[]
    NOT?: ComprasScalarWhereWithAggregatesInput | ComprasScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Compras"> | number
    data_compra?: DateTimeWithAggregatesFilter<"Compras"> | Date | string
    forma_pgto?: StringWithAggregatesFilter<"Compras"> | string
    valor_pago?: FloatWithAggregatesFilter<"Compras"> | number
    fornecendor?: StringNullableWithAggregatesFilter<"Compras"> | string | null
    telefone_forncedor?: StringNullableWithAggregatesFilter<"Compras"> | string | null
  }

  export type ComprasItensWhereInput = {
    AND?: ComprasItensWhereInput | ComprasItensWhereInput[]
    OR?: ComprasItensWhereInput[]
    NOT?: ComprasItensWhereInput | ComprasItensWhereInput[]
    id?: IntFilter<"ComprasItens"> | number
    roupas_id?: IntFilter<"ComprasItens"> | number
    compras_id?: IntFilter<"ComprasItens"> | number
    quatidade?: IntFilter<"ComprasItens"> | number
    valor_peça?: IntFilter<"ComprasItens"> | number
    Compras?: XOR<ComprasScalarRelationFilter, ComprasWhereInput>
    Roupa?: XOR<RoupasScalarRelationFilter, RoupasWhereInput>
  }

  export type ComprasItensOrderByWithRelationInput = {
    id?: SortOrder
    roupas_id?: SortOrder
    compras_id?: SortOrder
    quatidade?: SortOrder
    valor_peça?: SortOrder
    Compras?: ComprasOrderByWithRelationInput
    Roupa?: RoupasOrderByWithRelationInput
  }

  export type ComprasItensWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ComprasItensWhereInput | ComprasItensWhereInput[]
    OR?: ComprasItensWhereInput[]
    NOT?: ComprasItensWhereInput | ComprasItensWhereInput[]
    roupas_id?: IntFilter<"ComprasItens"> | number
    compras_id?: IntFilter<"ComprasItens"> | number
    quatidade?: IntFilter<"ComprasItens"> | number
    valor_peça?: IntFilter<"ComprasItens"> | number
    Compras?: XOR<ComprasScalarRelationFilter, ComprasWhereInput>
    Roupa?: XOR<RoupasScalarRelationFilter, RoupasWhereInput>
  }, "id">

  export type ComprasItensOrderByWithAggregationInput = {
    id?: SortOrder
    roupas_id?: SortOrder
    compras_id?: SortOrder
    quatidade?: SortOrder
    valor_peça?: SortOrder
    _count?: ComprasItensCountOrderByAggregateInput
    _avg?: ComprasItensAvgOrderByAggregateInput
    _max?: ComprasItensMaxOrderByAggregateInput
    _min?: ComprasItensMinOrderByAggregateInput
    _sum?: ComprasItensSumOrderByAggregateInput
  }

  export type ComprasItensScalarWhereWithAggregatesInput = {
    AND?: ComprasItensScalarWhereWithAggregatesInput | ComprasItensScalarWhereWithAggregatesInput[]
    OR?: ComprasItensScalarWhereWithAggregatesInput[]
    NOT?: ComprasItensScalarWhereWithAggregatesInput | ComprasItensScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ComprasItens"> | number
    roupas_id?: IntWithAggregatesFilter<"ComprasItens"> | number
    compras_id?: IntWithAggregatesFilter<"ComprasItens"> | number
    quatidade?: IntWithAggregatesFilter<"ComprasItens"> | number
    valor_peça?: IntWithAggregatesFilter<"ComprasItens"> | number
  }

  export type CondicionaisWhereInput = {
    AND?: CondicionaisWhereInput | CondicionaisWhereInput[]
    OR?: CondicionaisWhereInput[]
    NOT?: CondicionaisWhereInput | CondicionaisWhereInput[]
    id?: IntFilter<"Condicionais"> | number
    cliente_id?: IntFilter<"Condicionais"> | number
    data?: DateTimeFilter<"Condicionais"> | Date | string
    data_devolucao?: DateTimeFilter<"Condicionais"> | Date | string
    devolvido?: BoolFilter<"Condicionais"> | boolean
    Cliente?: XOR<ClienteScalarRelationFilter, ClienteWhereInput>
    CondicionaisItens?: CondicionaisItensListRelationFilter
  }

  export type CondicionaisOrderByWithRelationInput = {
    id?: SortOrder
    cliente_id?: SortOrder
    data?: SortOrder
    data_devolucao?: SortOrder
    devolvido?: SortOrder
    Cliente?: ClienteOrderByWithRelationInput
    CondicionaisItens?: CondicionaisItensOrderByRelationAggregateInput
  }

  export type CondicionaisWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CondicionaisWhereInput | CondicionaisWhereInput[]
    OR?: CondicionaisWhereInput[]
    NOT?: CondicionaisWhereInput | CondicionaisWhereInput[]
    cliente_id?: IntFilter<"Condicionais"> | number
    data?: DateTimeFilter<"Condicionais"> | Date | string
    data_devolucao?: DateTimeFilter<"Condicionais"> | Date | string
    devolvido?: BoolFilter<"Condicionais"> | boolean
    Cliente?: XOR<ClienteScalarRelationFilter, ClienteWhereInput>
    CondicionaisItens?: CondicionaisItensListRelationFilter
  }, "id">

  export type CondicionaisOrderByWithAggregationInput = {
    id?: SortOrder
    cliente_id?: SortOrder
    data?: SortOrder
    data_devolucao?: SortOrder
    devolvido?: SortOrder
    _count?: CondicionaisCountOrderByAggregateInput
    _avg?: CondicionaisAvgOrderByAggregateInput
    _max?: CondicionaisMaxOrderByAggregateInput
    _min?: CondicionaisMinOrderByAggregateInput
    _sum?: CondicionaisSumOrderByAggregateInput
  }

  export type CondicionaisScalarWhereWithAggregatesInput = {
    AND?: CondicionaisScalarWhereWithAggregatesInput | CondicionaisScalarWhereWithAggregatesInput[]
    OR?: CondicionaisScalarWhereWithAggregatesInput[]
    NOT?: CondicionaisScalarWhereWithAggregatesInput | CondicionaisScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Condicionais"> | number
    cliente_id?: IntWithAggregatesFilter<"Condicionais"> | number
    data?: DateTimeWithAggregatesFilter<"Condicionais"> | Date | string
    data_devolucao?: DateTimeWithAggregatesFilter<"Condicionais"> | Date | string
    devolvido?: BoolWithAggregatesFilter<"Condicionais"> | boolean
  }

  export type CondicionaisItensWhereInput = {
    AND?: CondicionaisItensWhereInput | CondicionaisItensWhereInput[]
    OR?: CondicionaisItensWhereInput[]
    NOT?: CondicionaisItensWhereInput | CondicionaisItensWhereInput[]
    id?: IntFilter<"CondicionaisItens"> | number
    roupas_id?: IntFilter<"CondicionaisItens"> | number
    condicionais_id?: IntFilter<"CondicionaisItens"> | number
    quatidade?: IntFilter<"CondicionaisItens"> | number
    Condicionais?: XOR<CondicionaisScalarRelationFilter, CondicionaisWhereInput>
    Roupa?: XOR<RoupasScalarRelationFilter, RoupasWhereInput>
  }

  export type CondicionaisItensOrderByWithRelationInput = {
    id?: SortOrder
    roupas_id?: SortOrder
    condicionais_id?: SortOrder
    quatidade?: SortOrder
    Condicionais?: CondicionaisOrderByWithRelationInput
    Roupa?: RoupasOrderByWithRelationInput
  }

  export type CondicionaisItensWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CondicionaisItensWhereInput | CondicionaisItensWhereInput[]
    OR?: CondicionaisItensWhereInput[]
    NOT?: CondicionaisItensWhereInput | CondicionaisItensWhereInput[]
    roupas_id?: IntFilter<"CondicionaisItens"> | number
    condicionais_id?: IntFilter<"CondicionaisItens"> | number
    quatidade?: IntFilter<"CondicionaisItens"> | number
    Condicionais?: XOR<CondicionaisScalarRelationFilter, CondicionaisWhereInput>
    Roupa?: XOR<RoupasScalarRelationFilter, RoupasWhereInput>
  }, "id">

  export type CondicionaisItensOrderByWithAggregationInput = {
    id?: SortOrder
    roupas_id?: SortOrder
    condicionais_id?: SortOrder
    quatidade?: SortOrder
    _count?: CondicionaisItensCountOrderByAggregateInput
    _avg?: CondicionaisItensAvgOrderByAggregateInput
    _max?: CondicionaisItensMaxOrderByAggregateInput
    _min?: CondicionaisItensMinOrderByAggregateInput
    _sum?: CondicionaisItensSumOrderByAggregateInput
  }

  export type CondicionaisItensScalarWhereWithAggregatesInput = {
    AND?: CondicionaisItensScalarWhereWithAggregatesInput | CondicionaisItensScalarWhereWithAggregatesInput[]
    OR?: CondicionaisItensScalarWhereWithAggregatesInput[]
    NOT?: CondicionaisItensScalarWhereWithAggregatesInput | CondicionaisItensScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CondicionaisItens"> | number
    roupas_id?: IntWithAggregatesFilter<"CondicionaisItens"> | number
    condicionais_id?: IntWithAggregatesFilter<"CondicionaisItens"> | number
    quatidade?: IntWithAggregatesFilter<"CondicionaisItens"> | number
  }

  export type HistoricoStatusWhereInput = {
    AND?: HistoricoStatusWhereInput | HistoricoStatusWhereInput[]
    OR?: HistoricoStatusWhereInput[]
    NOT?: HistoricoStatusWhereInput | HistoricoStatusWhereInput[]
    id?: IntFilter<"HistoricoStatus"> | number
    roupas_id?: IntNullableFilter<"HistoricoStatus"> | number | null
    status_anterior?: EnumStatusNullableFilter<"HistoricoStatus"> | $Enums.Status | null
    status_novo?: EnumStatusNullableFilter<"HistoricoStatus"> | $Enums.Status | null
    alterado_em?: DateTimeFilter<"HistoricoStatus"> | Date | string
    Roupa?: XOR<RoupasNullableScalarRelationFilter, RoupasWhereInput> | null
  }

  export type HistoricoStatusOrderByWithRelationInput = {
    id?: SortOrder
    roupas_id?: SortOrderInput | SortOrder
    status_anterior?: SortOrderInput | SortOrder
    status_novo?: SortOrderInput | SortOrder
    alterado_em?: SortOrder
    Roupa?: RoupasOrderByWithRelationInput
  }

  export type HistoricoStatusWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: HistoricoStatusWhereInput | HistoricoStatusWhereInput[]
    OR?: HistoricoStatusWhereInput[]
    NOT?: HistoricoStatusWhereInput | HistoricoStatusWhereInput[]
    roupas_id?: IntNullableFilter<"HistoricoStatus"> | number | null
    status_anterior?: EnumStatusNullableFilter<"HistoricoStatus"> | $Enums.Status | null
    status_novo?: EnumStatusNullableFilter<"HistoricoStatus"> | $Enums.Status | null
    alterado_em?: DateTimeFilter<"HistoricoStatus"> | Date | string
    Roupa?: XOR<RoupasNullableScalarRelationFilter, RoupasWhereInput> | null
  }, "id">

  export type HistoricoStatusOrderByWithAggregationInput = {
    id?: SortOrder
    roupas_id?: SortOrderInput | SortOrder
    status_anterior?: SortOrderInput | SortOrder
    status_novo?: SortOrderInput | SortOrder
    alterado_em?: SortOrder
    _count?: HistoricoStatusCountOrderByAggregateInput
    _avg?: HistoricoStatusAvgOrderByAggregateInput
    _max?: HistoricoStatusMaxOrderByAggregateInput
    _min?: HistoricoStatusMinOrderByAggregateInput
    _sum?: HistoricoStatusSumOrderByAggregateInput
  }

  export type HistoricoStatusScalarWhereWithAggregatesInput = {
    AND?: HistoricoStatusScalarWhereWithAggregatesInput | HistoricoStatusScalarWhereWithAggregatesInput[]
    OR?: HistoricoStatusScalarWhereWithAggregatesInput[]
    NOT?: HistoricoStatusScalarWhereWithAggregatesInput | HistoricoStatusScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HistoricoStatus"> | number
    roupas_id?: IntNullableWithAggregatesFilter<"HistoricoStatus"> | number | null
    status_anterior?: EnumStatusNullableWithAggregatesFilter<"HistoricoStatus"> | $Enums.Status | null
    status_novo?: EnumStatusNullableWithAggregatesFilter<"HistoricoStatus"> | $Enums.Status | null
    alterado_em?: DateTimeWithAggregatesFilter<"HistoricoStatus"> | Date | string
  }

  export type RoupasWhereInput = {
    AND?: RoupasWhereInput | RoupasWhereInput[]
    OR?: RoupasWhereInput[]
    NOT?: RoupasWhereInput | RoupasWhereInput[]
    id?: IntFilter<"Roupas"> | number
    nome?: StringFilter<"Roupas"> | string
    descricao?: StringNullableFilter<"Roupas"> | string | null
    tipo?: StringFilter<"Roupas"> | string
    tamanho?: StringFilter<"Roupas"> | string
    cor?: StringFilter<"Roupas"> | string
    preco?: FloatFilter<"Roupas"> | number
    quantidade?: IntFilter<"Roupas"> | number
    usuarios_id?: IntFilter<"Roupas"> | number
    criado_em?: DateTimeFilter<"Roupas"> | Date | string
    Baixa?: BaixaListRelationFilter
    ComprasItens?: ComprasItensListRelationFilter
    CondicionaisItens?: CondicionaisItensListRelationFilter
    HistoricoStatus?: HistoricoStatusListRelationFilter
    Usuario?: XOR<UsuariosScalarRelationFilter, UsuariosWhereInput>
    VendasItens?: VendasItensListRelationFilter
  }

  export type RoupasOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrderInput | SortOrder
    tipo?: SortOrder
    tamanho?: SortOrder
    cor?: SortOrder
    preco?: SortOrder
    quantidade?: SortOrder
    usuarios_id?: SortOrder
    criado_em?: SortOrder
    Baixa?: BaixaOrderByRelationAggregateInput
    ComprasItens?: ComprasItensOrderByRelationAggregateInput
    CondicionaisItens?: CondicionaisItensOrderByRelationAggregateInput
    HistoricoStatus?: HistoricoStatusOrderByRelationAggregateInput
    Usuario?: UsuariosOrderByWithRelationInput
    VendasItens?: VendasItensOrderByRelationAggregateInput
    _relevance?: RoupasOrderByRelevanceInput
  }

  export type RoupasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RoupasWhereInput | RoupasWhereInput[]
    OR?: RoupasWhereInput[]
    NOT?: RoupasWhereInput | RoupasWhereInput[]
    nome?: StringFilter<"Roupas"> | string
    descricao?: StringNullableFilter<"Roupas"> | string | null
    tipo?: StringFilter<"Roupas"> | string
    tamanho?: StringFilter<"Roupas"> | string
    cor?: StringFilter<"Roupas"> | string
    preco?: FloatFilter<"Roupas"> | number
    quantidade?: IntFilter<"Roupas"> | number
    usuarios_id?: IntFilter<"Roupas"> | number
    criado_em?: DateTimeFilter<"Roupas"> | Date | string
    Baixa?: BaixaListRelationFilter
    ComprasItens?: ComprasItensListRelationFilter
    CondicionaisItens?: CondicionaisItensListRelationFilter
    HistoricoStatus?: HistoricoStatusListRelationFilter
    Usuario?: XOR<UsuariosScalarRelationFilter, UsuariosWhereInput>
    VendasItens?: VendasItensListRelationFilter
  }, "id">

  export type RoupasOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrderInput | SortOrder
    tipo?: SortOrder
    tamanho?: SortOrder
    cor?: SortOrder
    preco?: SortOrder
    quantidade?: SortOrder
    usuarios_id?: SortOrder
    criado_em?: SortOrder
    _count?: RoupasCountOrderByAggregateInput
    _avg?: RoupasAvgOrderByAggregateInput
    _max?: RoupasMaxOrderByAggregateInput
    _min?: RoupasMinOrderByAggregateInput
    _sum?: RoupasSumOrderByAggregateInput
  }

  export type RoupasScalarWhereWithAggregatesInput = {
    AND?: RoupasScalarWhereWithAggregatesInput | RoupasScalarWhereWithAggregatesInput[]
    OR?: RoupasScalarWhereWithAggregatesInput[]
    NOT?: RoupasScalarWhereWithAggregatesInput | RoupasScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Roupas"> | number
    nome?: StringWithAggregatesFilter<"Roupas"> | string
    descricao?: StringNullableWithAggregatesFilter<"Roupas"> | string | null
    tipo?: StringWithAggregatesFilter<"Roupas"> | string
    tamanho?: StringWithAggregatesFilter<"Roupas"> | string
    cor?: StringWithAggregatesFilter<"Roupas"> | string
    preco?: FloatWithAggregatesFilter<"Roupas"> | number
    quantidade?: IntWithAggregatesFilter<"Roupas"> | number
    usuarios_id?: IntWithAggregatesFilter<"Roupas"> | number
    criado_em?: DateTimeWithAggregatesFilter<"Roupas"> | Date | string
  }

  export type UsuariosWhereInput = {
    AND?: UsuariosWhereInput | UsuariosWhereInput[]
    OR?: UsuariosWhereInput[]
    NOT?: UsuariosWhereInput | UsuariosWhereInput[]
    id?: IntFilter<"Usuarios"> | number
    nome?: StringFilter<"Usuarios"> | string
    email?: StringFilter<"Usuarios"> | string
    senha?: StringFilter<"Usuarios"> | string
    criado_em?: DateTimeFilter<"Usuarios"> | Date | string
    Roupas?: RoupasListRelationFilter
  }

  export type UsuariosOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    criado_em?: SortOrder
    Roupas?: RoupasOrderByRelationAggregateInput
    _relevance?: UsuariosOrderByRelevanceInput
  }

  export type UsuariosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UsuariosWhereInput | UsuariosWhereInput[]
    OR?: UsuariosWhereInput[]
    NOT?: UsuariosWhereInput | UsuariosWhereInput[]
    nome?: StringFilter<"Usuarios"> | string
    senha?: StringFilter<"Usuarios"> | string
    criado_em?: DateTimeFilter<"Usuarios"> | Date | string
    Roupas?: RoupasListRelationFilter
  }, "id" | "email">

  export type UsuariosOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    criado_em?: SortOrder
    _count?: UsuariosCountOrderByAggregateInput
    _avg?: UsuariosAvgOrderByAggregateInput
    _max?: UsuariosMaxOrderByAggregateInput
    _min?: UsuariosMinOrderByAggregateInput
    _sum?: UsuariosSumOrderByAggregateInput
  }

  export type UsuariosScalarWhereWithAggregatesInput = {
    AND?: UsuariosScalarWhereWithAggregatesInput | UsuariosScalarWhereWithAggregatesInput[]
    OR?: UsuariosScalarWhereWithAggregatesInput[]
    NOT?: UsuariosScalarWhereWithAggregatesInput | UsuariosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Usuarios"> | number
    nome?: StringWithAggregatesFilter<"Usuarios"> | string
    email?: StringWithAggregatesFilter<"Usuarios"> | string
    senha?: StringWithAggregatesFilter<"Usuarios"> | string
    criado_em?: DateTimeWithAggregatesFilter<"Usuarios"> | Date | string
  }

  export type VendasWhereInput = {
    AND?: VendasWhereInput | VendasWhereInput[]
    OR?: VendasWhereInput[]
    NOT?: VendasWhereInput | VendasWhereInput[]
    id?: IntFilter<"Vendas"> | number
    data_venda?: DateTimeFilter<"Vendas"> | Date | string
    forma_pgto?: StringFilter<"Vendas"> | string
    valor_total?: FloatFilter<"Vendas"> | number
    desconto?: FloatFilter<"Vendas"> | number
    valor_pago?: FloatFilter<"Vendas"> | number
    VendasItens?: VendasItensListRelationFilter
  }

  export type VendasOrderByWithRelationInput = {
    id?: SortOrder
    data_venda?: SortOrder
    forma_pgto?: SortOrder
    valor_total?: SortOrder
    desconto?: SortOrder
    valor_pago?: SortOrder
    VendasItens?: VendasItensOrderByRelationAggregateInput
    _relevance?: VendasOrderByRelevanceInput
  }

  export type VendasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VendasWhereInput | VendasWhereInput[]
    OR?: VendasWhereInput[]
    NOT?: VendasWhereInput | VendasWhereInput[]
    data_venda?: DateTimeFilter<"Vendas"> | Date | string
    forma_pgto?: StringFilter<"Vendas"> | string
    valor_total?: FloatFilter<"Vendas"> | number
    desconto?: FloatFilter<"Vendas"> | number
    valor_pago?: FloatFilter<"Vendas"> | number
    VendasItens?: VendasItensListRelationFilter
  }, "id">

  export type VendasOrderByWithAggregationInput = {
    id?: SortOrder
    data_venda?: SortOrder
    forma_pgto?: SortOrder
    valor_total?: SortOrder
    desconto?: SortOrder
    valor_pago?: SortOrder
    _count?: VendasCountOrderByAggregateInput
    _avg?: VendasAvgOrderByAggregateInput
    _max?: VendasMaxOrderByAggregateInput
    _min?: VendasMinOrderByAggregateInput
    _sum?: VendasSumOrderByAggregateInput
  }

  export type VendasScalarWhereWithAggregatesInput = {
    AND?: VendasScalarWhereWithAggregatesInput | VendasScalarWhereWithAggregatesInput[]
    OR?: VendasScalarWhereWithAggregatesInput[]
    NOT?: VendasScalarWhereWithAggregatesInput | VendasScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Vendas"> | number
    data_venda?: DateTimeWithAggregatesFilter<"Vendas"> | Date | string
    forma_pgto?: StringWithAggregatesFilter<"Vendas"> | string
    valor_total?: FloatWithAggregatesFilter<"Vendas"> | number
    desconto?: FloatWithAggregatesFilter<"Vendas"> | number
    valor_pago?: FloatWithAggregatesFilter<"Vendas"> | number
  }

  export type VendasItensWhereInput = {
    AND?: VendasItensWhereInput | VendasItensWhereInput[]
    OR?: VendasItensWhereInput[]
    NOT?: VendasItensWhereInput | VendasItensWhereInput[]
    id?: IntFilter<"VendasItens"> | number
    roupas_id?: IntFilter<"VendasItens"> | number
    vendas_id?: IntFilter<"VendasItens"> | number
    quatidade?: IntFilter<"VendasItens"> | number
    Roupa?: XOR<RoupasScalarRelationFilter, RoupasWhereInput>
    Venda?: XOR<VendasScalarRelationFilter, VendasWhereInput>
  }

  export type VendasItensOrderByWithRelationInput = {
    id?: SortOrder
    roupas_id?: SortOrder
    vendas_id?: SortOrder
    quatidade?: SortOrder
    Roupa?: RoupasOrderByWithRelationInput
    Venda?: VendasOrderByWithRelationInput
  }

  export type VendasItensWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VendasItensWhereInput | VendasItensWhereInput[]
    OR?: VendasItensWhereInput[]
    NOT?: VendasItensWhereInput | VendasItensWhereInput[]
    roupas_id?: IntFilter<"VendasItens"> | number
    vendas_id?: IntFilter<"VendasItens"> | number
    quatidade?: IntFilter<"VendasItens"> | number
    Roupa?: XOR<RoupasScalarRelationFilter, RoupasWhereInput>
    Venda?: XOR<VendasScalarRelationFilter, VendasWhereInput>
  }, "id">

  export type VendasItensOrderByWithAggregationInput = {
    id?: SortOrder
    roupas_id?: SortOrder
    vendas_id?: SortOrder
    quatidade?: SortOrder
    _count?: VendasItensCountOrderByAggregateInput
    _avg?: VendasItensAvgOrderByAggregateInput
    _max?: VendasItensMaxOrderByAggregateInput
    _min?: VendasItensMinOrderByAggregateInput
    _sum?: VendasItensSumOrderByAggregateInput
  }

  export type VendasItensScalarWhereWithAggregatesInput = {
    AND?: VendasItensScalarWhereWithAggregatesInput | VendasItensScalarWhereWithAggregatesInput[]
    OR?: VendasItensScalarWhereWithAggregatesInput[]
    NOT?: VendasItensScalarWhereWithAggregatesInput | VendasItensScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"VendasItens"> | number
    roupas_id?: IntWithAggregatesFilter<"VendasItens"> | number
    vendas_id?: IntWithAggregatesFilter<"VendasItens"> | number
    quatidade?: IntWithAggregatesFilter<"VendasItens"> | number
  }

  export type BaixaCreateInput = {
    quantidade: number
    data_baixa?: Date | string
    motivo: string
    Roupa: RoupasCreateNestedOneWithoutBaixaInput
  }

  export type BaixaUncheckedCreateInput = {
    id?: number
    roupa_id: number
    quantidade: number
    data_baixa?: Date | string
    motivo: string
  }

  export type BaixaUpdateInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    data_baixa?: DateTimeFieldUpdateOperationsInput | Date | string
    motivo?: StringFieldUpdateOperationsInput | string
    Roupa?: RoupasUpdateOneRequiredWithoutBaixaNestedInput
  }

  export type BaixaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roupa_id?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    data_baixa?: DateTimeFieldUpdateOperationsInput | Date | string
    motivo?: StringFieldUpdateOperationsInput | string
  }

  export type BaixaCreateManyInput = {
    id?: number
    roupa_id: number
    quantidade: number
    data_baixa?: Date | string
    motivo: string
  }

  export type BaixaUpdateManyMutationInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    data_baixa?: DateTimeFieldUpdateOperationsInput | Date | string
    motivo?: StringFieldUpdateOperationsInput | string
  }

  export type BaixaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    roupa_id?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    data_baixa?: DateTimeFieldUpdateOperationsInput | Date | string
    motivo?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteCreateInput = {
    nome: string
    email: string
    cpf: string
    criado_em?: Date | string
    telefone?: string | null
    endereco?: string | null
    Condicionais?: CondicionaisCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    cpf: string
    criado_em?: Date | string
    telefone?: string | null
    endereco?: string | null
    Condicionais?: CondicionaisUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    Condicionais?: CondicionaisUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    Condicionais?: CondicionaisUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteCreateManyInput = {
    id?: number
    nome: string
    email: string
    cpf: string
    criado_em?: Date | string
    telefone?: string | null
    endereco?: string | null
  }

  export type ClienteUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClienteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComprasCreateInput = {
    data_compra?: Date | string
    forma_pgto: string
    valor_pago: number
    fornecendor?: string | null
    telefone_forncedor?: string | null
    ComprasItens?: ComprasItensCreateNestedManyWithoutComprasInput
  }

  export type ComprasUncheckedCreateInput = {
    id?: number
    data_compra?: Date | string
    forma_pgto: string
    valor_pago: number
    fornecendor?: string | null
    telefone_forncedor?: string | null
    ComprasItens?: ComprasItensUncheckedCreateNestedManyWithoutComprasInput
  }

  export type ComprasUpdateInput = {
    data_compra?: DateTimeFieldUpdateOperationsInput | Date | string
    forma_pgto?: StringFieldUpdateOperationsInput | string
    valor_pago?: FloatFieldUpdateOperationsInput | number
    fornecendor?: NullableStringFieldUpdateOperationsInput | string | null
    telefone_forncedor?: NullableStringFieldUpdateOperationsInput | string | null
    ComprasItens?: ComprasItensUpdateManyWithoutComprasNestedInput
  }

  export type ComprasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    data_compra?: DateTimeFieldUpdateOperationsInput | Date | string
    forma_pgto?: StringFieldUpdateOperationsInput | string
    valor_pago?: FloatFieldUpdateOperationsInput | number
    fornecendor?: NullableStringFieldUpdateOperationsInput | string | null
    telefone_forncedor?: NullableStringFieldUpdateOperationsInput | string | null
    ComprasItens?: ComprasItensUncheckedUpdateManyWithoutComprasNestedInput
  }

  export type ComprasCreateManyInput = {
    id?: number
    data_compra?: Date | string
    forma_pgto: string
    valor_pago: number
    fornecendor?: string | null
    telefone_forncedor?: string | null
  }

  export type ComprasUpdateManyMutationInput = {
    data_compra?: DateTimeFieldUpdateOperationsInput | Date | string
    forma_pgto?: StringFieldUpdateOperationsInput | string
    valor_pago?: FloatFieldUpdateOperationsInput | number
    fornecendor?: NullableStringFieldUpdateOperationsInput | string | null
    telefone_forncedor?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComprasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    data_compra?: DateTimeFieldUpdateOperationsInput | Date | string
    forma_pgto?: StringFieldUpdateOperationsInput | string
    valor_pago?: FloatFieldUpdateOperationsInput | number
    fornecendor?: NullableStringFieldUpdateOperationsInput | string | null
    telefone_forncedor?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComprasItensCreateInput = {
    quatidade: number
    valor_peça: number
    Compras: ComprasCreateNestedOneWithoutComprasItensInput
    Roupa: RoupasCreateNestedOneWithoutComprasItensInput
  }

  export type ComprasItensUncheckedCreateInput = {
    id?: number
    roupas_id: number
    compras_id: number
    quatidade: number
    valor_peça: number
  }

  export type ComprasItensUpdateInput = {
    quatidade?: IntFieldUpdateOperationsInput | number
    valor_peça?: IntFieldUpdateOperationsInput | number
    Compras?: ComprasUpdateOneRequiredWithoutComprasItensNestedInput
    Roupa?: RoupasUpdateOneRequiredWithoutComprasItensNestedInput
  }

  export type ComprasItensUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roupas_id?: IntFieldUpdateOperationsInput | number
    compras_id?: IntFieldUpdateOperationsInput | number
    quatidade?: IntFieldUpdateOperationsInput | number
    valor_peça?: IntFieldUpdateOperationsInput | number
  }

  export type ComprasItensCreateManyInput = {
    id?: number
    roupas_id: number
    compras_id: number
    quatidade: number
    valor_peça: number
  }

  export type ComprasItensUpdateManyMutationInput = {
    quatidade?: IntFieldUpdateOperationsInput | number
    valor_peça?: IntFieldUpdateOperationsInput | number
  }

  export type ComprasItensUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    roupas_id?: IntFieldUpdateOperationsInput | number
    compras_id?: IntFieldUpdateOperationsInput | number
    quatidade?: IntFieldUpdateOperationsInput | number
    valor_peça?: IntFieldUpdateOperationsInput | number
  }

  export type CondicionaisCreateInput = {
    data?: Date | string
    data_devolucao: Date | string
    devolvido?: boolean
    Cliente: ClienteCreateNestedOneWithoutCondicionaisInput
    CondicionaisItens?: CondicionaisItensCreateNestedManyWithoutCondicionaisInput
  }

  export type CondicionaisUncheckedCreateInput = {
    id?: number
    cliente_id: number
    data?: Date | string
    data_devolucao: Date | string
    devolvido?: boolean
    CondicionaisItens?: CondicionaisItensUncheckedCreateNestedManyWithoutCondicionaisInput
  }

  export type CondicionaisUpdateInput = {
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    data_devolucao?: DateTimeFieldUpdateOperationsInput | Date | string
    devolvido?: BoolFieldUpdateOperationsInput | boolean
    Cliente?: ClienteUpdateOneRequiredWithoutCondicionaisNestedInput
    CondicionaisItens?: CondicionaisItensUpdateManyWithoutCondicionaisNestedInput
  }

  export type CondicionaisUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cliente_id?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    data_devolucao?: DateTimeFieldUpdateOperationsInput | Date | string
    devolvido?: BoolFieldUpdateOperationsInput | boolean
    CondicionaisItens?: CondicionaisItensUncheckedUpdateManyWithoutCondicionaisNestedInput
  }

  export type CondicionaisCreateManyInput = {
    id?: number
    cliente_id: number
    data?: Date | string
    data_devolucao: Date | string
    devolvido?: boolean
  }

  export type CondicionaisUpdateManyMutationInput = {
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    data_devolucao?: DateTimeFieldUpdateOperationsInput | Date | string
    devolvido?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CondicionaisUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cliente_id?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    data_devolucao?: DateTimeFieldUpdateOperationsInput | Date | string
    devolvido?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CondicionaisItensCreateInput = {
    quatidade: number
    Condicionais: CondicionaisCreateNestedOneWithoutCondicionaisItensInput
    Roupa: RoupasCreateNestedOneWithoutCondicionaisItensInput
  }

  export type CondicionaisItensUncheckedCreateInput = {
    id?: number
    roupas_id: number
    condicionais_id: number
    quatidade: number
  }

  export type CondicionaisItensUpdateInput = {
    quatidade?: IntFieldUpdateOperationsInput | number
    Condicionais?: CondicionaisUpdateOneRequiredWithoutCondicionaisItensNestedInput
    Roupa?: RoupasUpdateOneRequiredWithoutCondicionaisItensNestedInput
  }

  export type CondicionaisItensUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roupas_id?: IntFieldUpdateOperationsInput | number
    condicionais_id?: IntFieldUpdateOperationsInput | number
    quatidade?: IntFieldUpdateOperationsInput | number
  }

  export type CondicionaisItensCreateManyInput = {
    id?: number
    roupas_id: number
    condicionais_id: number
    quatidade: number
  }

  export type CondicionaisItensUpdateManyMutationInput = {
    quatidade?: IntFieldUpdateOperationsInput | number
  }

  export type CondicionaisItensUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    roupas_id?: IntFieldUpdateOperationsInput | number
    condicionais_id?: IntFieldUpdateOperationsInput | number
    quatidade?: IntFieldUpdateOperationsInput | number
  }

  export type HistoricoStatusCreateInput = {
    status_anterior?: $Enums.Status | null
    status_novo?: $Enums.Status | null
    alterado_em?: Date | string
    Roupa?: RoupasCreateNestedOneWithoutHistoricoStatusInput
  }

  export type HistoricoStatusUncheckedCreateInput = {
    id?: number
    roupas_id?: number | null
    status_anterior?: $Enums.Status | null
    status_novo?: $Enums.Status | null
    alterado_em?: Date | string
  }

  export type HistoricoStatusUpdateInput = {
    status_anterior?: NullableEnumStatusFieldUpdateOperationsInput | $Enums.Status | null
    status_novo?: NullableEnumStatusFieldUpdateOperationsInput | $Enums.Status | null
    alterado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    Roupa?: RoupasUpdateOneWithoutHistoricoStatusNestedInput
  }

  export type HistoricoStatusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roupas_id?: NullableIntFieldUpdateOperationsInput | number | null
    status_anterior?: NullableEnumStatusFieldUpdateOperationsInput | $Enums.Status | null
    status_novo?: NullableEnumStatusFieldUpdateOperationsInput | $Enums.Status | null
    alterado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoricoStatusCreateManyInput = {
    id?: number
    roupas_id?: number | null
    status_anterior?: $Enums.Status | null
    status_novo?: $Enums.Status | null
    alterado_em?: Date | string
  }

  export type HistoricoStatusUpdateManyMutationInput = {
    status_anterior?: NullableEnumStatusFieldUpdateOperationsInput | $Enums.Status | null
    status_novo?: NullableEnumStatusFieldUpdateOperationsInput | $Enums.Status | null
    alterado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoricoStatusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    roupas_id?: NullableIntFieldUpdateOperationsInput | number | null
    status_anterior?: NullableEnumStatusFieldUpdateOperationsInput | $Enums.Status | null
    status_novo?: NullableEnumStatusFieldUpdateOperationsInput | $Enums.Status | null
    alterado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoupasCreateInput = {
    nome: string
    descricao?: string | null
    tipo: string
    tamanho: string
    cor: string
    preco: number
    quantidade?: number
    criado_em?: Date | string
    Baixa?: BaixaCreateNestedManyWithoutRoupaInput
    ComprasItens?: ComprasItensCreateNestedManyWithoutRoupaInput
    CondicionaisItens?: CondicionaisItensCreateNestedManyWithoutRoupaInput
    HistoricoStatus?: HistoricoStatusCreateNestedManyWithoutRoupaInput
    Usuario: UsuariosCreateNestedOneWithoutRoupasInput
    VendasItens?: VendasItensCreateNestedManyWithoutRoupaInput
  }

  export type RoupasUncheckedCreateInput = {
    id?: number
    nome: string
    descricao?: string | null
    tipo: string
    tamanho: string
    cor: string
    preco: number
    quantidade?: number
    usuarios_id: number
    criado_em?: Date | string
    Baixa?: BaixaUncheckedCreateNestedManyWithoutRoupaInput
    ComprasItens?: ComprasItensUncheckedCreateNestedManyWithoutRoupaInput
    CondicionaisItens?: CondicionaisItensUncheckedCreateNestedManyWithoutRoupaInput
    HistoricoStatus?: HistoricoStatusUncheckedCreateNestedManyWithoutRoupaInput
    VendasItens?: VendasItensUncheckedCreateNestedManyWithoutRoupaInput
  }

  export type RoupasUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    Baixa?: BaixaUpdateManyWithoutRoupaNestedInput
    ComprasItens?: ComprasItensUpdateManyWithoutRoupaNestedInput
    CondicionaisItens?: CondicionaisItensUpdateManyWithoutRoupaNestedInput
    HistoricoStatus?: HistoricoStatusUpdateManyWithoutRoupaNestedInput
    Usuario?: UsuariosUpdateOneRequiredWithoutRoupasNestedInput
    VendasItens?: VendasItensUpdateManyWithoutRoupaNestedInput
  }

  export type RoupasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    usuarios_id?: IntFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    Baixa?: BaixaUncheckedUpdateManyWithoutRoupaNestedInput
    ComprasItens?: ComprasItensUncheckedUpdateManyWithoutRoupaNestedInput
    CondicionaisItens?: CondicionaisItensUncheckedUpdateManyWithoutRoupaNestedInput
    HistoricoStatus?: HistoricoStatusUncheckedUpdateManyWithoutRoupaNestedInput
    VendasItens?: VendasItensUncheckedUpdateManyWithoutRoupaNestedInput
  }

  export type RoupasCreateManyInput = {
    id?: number
    nome: string
    descricao?: string | null
    tipo: string
    tamanho: string
    cor: string
    preco: number
    quantidade?: number
    usuarios_id: number
    criado_em?: Date | string
  }

  export type RoupasUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoupasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    usuarios_id?: IntFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuariosCreateInput = {
    nome: string
    email: string
    senha: string
    criado_em?: Date | string
    Roupas?: RoupasCreateNestedManyWithoutUsuarioInput
  }

  export type UsuariosUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    senha: string
    criado_em?: Date | string
    Roupas?: RoupasUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuariosUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    Roupas?: RoupasUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuariosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    Roupas?: RoupasUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuariosCreateManyInput = {
    id?: number
    nome: string
    email: string
    senha: string
    criado_em?: Date | string
  }

  export type UsuariosUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuariosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendasCreateInput = {
    data_venda?: Date | string
    forma_pgto: string
    valor_total: number
    desconto?: number
    valor_pago: number
    VendasItens?: VendasItensCreateNestedManyWithoutVendaInput
  }

  export type VendasUncheckedCreateInput = {
    id?: number
    data_venda?: Date | string
    forma_pgto: string
    valor_total: number
    desconto?: number
    valor_pago: number
    VendasItens?: VendasItensUncheckedCreateNestedManyWithoutVendaInput
  }

  export type VendasUpdateInput = {
    data_venda?: DateTimeFieldUpdateOperationsInput | Date | string
    forma_pgto?: StringFieldUpdateOperationsInput | string
    valor_total?: FloatFieldUpdateOperationsInput | number
    desconto?: FloatFieldUpdateOperationsInput | number
    valor_pago?: FloatFieldUpdateOperationsInput | number
    VendasItens?: VendasItensUpdateManyWithoutVendaNestedInput
  }

  export type VendasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    data_venda?: DateTimeFieldUpdateOperationsInput | Date | string
    forma_pgto?: StringFieldUpdateOperationsInput | string
    valor_total?: FloatFieldUpdateOperationsInput | number
    desconto?: FloatFieldUpdateOperationsInput | number
    valor_pago?: FloatFieldUpdateOperationsInput | number
    VendasItens?: VendasItensUncheckedUpdateManyWithoutVendaNestedInput
  }

  export type VendasCreateManyInput = {
    id?: number
    data_venda?: Date | string
    forma_pgto: string
    valor_total: number
    desconto?: number
    valor_pago: number
  }

  export type VendasUpdateManyMutationInput = {
    data_venda?: DateTimeFieldUpdateOperationsInput | Date | string
    forma_pgto?: StringFieldUpdateOperationsInput | string
    valor_total?: FloatFieldUpdateOperationsInput | number
    desconto?: FloatFieldUpdateOperationsInput | number
    valor_pago?: FloatFieldUpdateOperationsInput | number
  }

  export type VendasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    data_venda?: DateTimeFieldUpdateOperationsInput | Date | string
    forma_pgto?: StringFieldUpdateOperationsInput | string
    valor_total?: FloatFieldUpdateOperationsInput | number
    desconto?: FloatFieldUpdateOperationsInput | number
    valor_pago?: FloatFieldUpdateOperationsInput | number
  }

  export type VendasItensCreateInput = {
    quatidade: number
    Roupa: RoupasCreateNestedOneWithoutVendasItensInput
    Venda: VendasCreateNestedOneWithoutVendasItensInput
  }

  export type VendasItensUncheckedCreateInput = {
    id?: number
    roupas_id: number
    vendas_id: number
    quatidade: number
  }

  export type VendasItensUpdateInput = {
    quatidade?: IntFieldUpdateOperationsInput | number
    Roupa?: RoupasUpdateOneRequiredWithoutVendasItensNestedInput
    Venda?: VendasUpdateOneRequiredWithoutVendasItensNestedInput
  }

  export type VendasItensUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roupas_id?: IntFieldUpdateOperationsInput | number
    vendas_id?: IntFieldUpdateOperationsInput | number
    quatidade?: IntFieldUpdateOperationsInput | number
  }

  export type VendasItensCreateManyInput = {
    id?: number
    roupas_id: number
    vendas_id: number
    quatidade: number
  }

  export type VendasItensUpdateManyMutationInput = {
    quatidade?: IntFieldUpdateOperationsInput | number
  }

  export type VendasItensUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    roupas_id?: IntFieldUpdateOperationsInput | number
    vendas_id?: IntFieldUpdateOperationsInput | number
    quatidade?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type RoupasScalarRelationFilter = {
    is?: RoupasWhereInput
    isNot?: RoupasWhereInput
  }

  export type BaixaOrderByRelevanceInput = {
    fields: BaixaOrderByRelevanceFieldEnum | BaixaOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BaixaCountOrderByAggregateInput = {
    id?: SortOrder
    roupa_id?: SortOrder
    quantidade?: SortOrder
    data_baixa?: SortOrder
    motivo?: SortOrder
  }

  export type BaixaAvgOrderByAggregateInput = {
    id?: SortOrder
    roupa_id?: SortOrder
    quantidade?: SortOrder
  }

  export type BaixaMaxOrderByAggregateInput = {
    id?: SortOrder
    roupa_id?: SortOrder
    quantidade?: SortOrder
    data_baixa?: SortOrder
    motivo?: SortOrder
  }

  export type BaixaMinOrderByAggregateInput = {
    id?: SortOrder
    roupa_id?: SortOrder
    quantidade?: SortOrder
    data_baixa?: SortOrder
    motivo?: SortOrder
  }

  export type BaixaSumOrderByAggregateInput = {
    id?: SortOrder
    roupa_id?: SortOrder
    quantidade?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type CondicionaisListRelationFilter = {
    every?: CondicionaisWhereInput
    some?: CondicionaisWhereInput
    none?: CondicionaisWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CondicionaisOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClienteOrderByRelevanceInput = {
    fields: ClienteOrderByRelevanceFieldEnum | ClienteOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ClienteCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    cpf?: SortOrder
    criado_em?: SortOrder
    telefone?: SortOrder
    endereco?: SortOrder
  }

  export type ClienteAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClienteMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    cpf?: SortOrder
    criado_em?: SortOrder
    telefone?: SortOrder
    endereco?: SortOrder
  }

  export type ClienteMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    cpf?: SortOrder
    criado_em?: SortOrder
    telefone?: SortOrder
    endereco?: SortOrder
  }

  export type ClienteSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ComprasItensListRelationFilter = {
    every?: ComprasItensWhereInput
    some?: ComprasItensWhereInput
    none?: ComprasItensWhereInput
  }

  export type ComprasItensOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ComprasOrderByRelevanceInput = {
    fields: ComprasOrderByRelevanceFieldEnum | ComprasOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ComprasCountOrderByAggregateInput = {
    id?: SortOrder
    data_compra?: SortOrder
    forma_pgto?: SortOrder
    valor_pago?: SortOrder
    fornecendor?: SortOrder
    telefone_forncedor?: SortOrder
  }

  export type ComprasAvgOrderByAggregateInput = {
    id?: SortOrder
    valor_pago?: SortOrder
  }

  export type ComprasMaxOrderByAggregateInput = {
    id?: SortOrder
    data_compra?: SortOrder
    forma_pgto?: SortOrder
    valor_pago?: SortOrder
    fornecendor?: SortOrder
    telefone_forncedor?: SortOrder
  }

  export type ComprasMinOrderByAggregateInput = {
    id?: SortOrder
    data_compra?: SortOrder
    forma_pgto?: SortOrder
    valor_pago?: SortOrder
    fornecendor?: SortOrder
    telefone_forncedor?: SortOrder
  }

  export type ComprasSumOrderByAggregateInput = {
    id?: SortOrder
    valor_pago?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ComprasScalarRelationFilter = {
    is?: ComprasWhereInput
    isNot?: ComprasWhereInput
  }

  export type ComprasItensCountOrderByAggregateInput = {
    id?: SortOrder
    roupas_id?: SortOrder
    compras_id?: SortOrder
    quatidade?: SortOrder
    valor_peça?: SortOrder
  }

  export type ComprasItensAvgOrderByAggregateInput = {
    id?: SortOrder
    roupas_id?: SortOrder
    compras_id?: SortOrder
    quatidade?: SortOrder
    valor_peça?: SortOrder
  }

  export type ComprasItensMaxOrderByAggregateInput = {
    id?: SortOrder
    roupas_id?: SortOrder
    compras_id?: SortOrder
    quatidade?: SortOrder
    valor_peça?: SortOrder
  }

  export type ComprasItensMinOrderByAggregateInput = {
    id?: SortOrder
    roupas_id?: SortOrder
    compras_id?: SortOrder
    quatidade?: SortOrder
    valor_peça?: SortOrder
  }

  export type ComprasItensSumOrderByAggregateInput = {
    id?: SortOrder
    roupas_id?: SortOrder
    compras_id?: SortOrder
    quatidade?: SortOrder
    valor_peça?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ClienteScalarRelationFilter = {
    is?: ClienteWhereInput
    isNot?: ClienteWhereInput
  }

  export type CondicionaisItensListRelationFilter = {
    every?: CondicionaisItensWhereInput
    some?: CondicionaisItensWhereInput
    none?: CondicionaisItensWhereInput
  }

  export type CondicionaisItensOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CondicionaisCountOrderByAggregateInput = {
    id?: SortOrder
    cliente_id?: SortOrder
    data?: SortOrder
    data_devolucao?: SortOrder
    devolvido?: SortOrder
  }

  export type CondicionaisAvgOrderByAggregateInput = {
    id?: SortOrder
    cliente_id?: SortOrder
  }

  export type CondicionaisMaxOrderByAggregateInput = {
    id?: SortOrder
    cliente_id?: SortOrder
    data?: SortOrder
    data_devolucao?: SortOrder
    devolvido?: SortOrder
  }

  export type CondicionaisMinOrderByAggregateInput = {
    id?: SortOrder
    cliente_id?: SortOrder
    data?: SortOrder
    data_devolucao?: SortOrder
    devolvido?: SortOrder
  }

  export type CondicionaisSumOrderByAggregateInput = {
    id?: SortOrder
    cliente_id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type CondicionaisScalarRelationFilter = {
    is?: CondicionaisWhereInput
    isNot?: CondicionaisWhereInput
  }

  export type CondicionaisItensCountOrderByAggregateInput = {
    id?: SortOrder
    roupas_id?: SortOrder
    condicionais_id?: SortOrder
    quatidade?: SortOrder
  }

  export type CondicionaisItensAvgOrderByAggregateInput = {
    id?: SortOrder
    roupas_id?: SortOrder
    condicionais_id?: SortOrder
    quatidade?: SortOrder
  }

  export type CondicionaisItensMaxOrderByAggregateInput = {
    id?: SortOrder
    roupas_id?: SortOrder
    condicionais_id?: SortOrder
    quatidade?: SortOrder
  }

  export type CondicionaisItensMinOrderByAggregateInput = {
    id?: SortOrder
    roupas_id?: SortOrder
    condicionais_id?: SortOrder
    quatidade?: SortOrder
  }

  export type CondicionaisItensSumOrderByAggregateInput = {
    id?: SortOrder
    roupas_id?: SortOrder
    condicionais_id?: SortOrder
    quatidade?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.Status[] | null
    notIn?: $Enums.Status[] | null
    not?: NestedEnumStatusNullableFilter<$PrismaModel> | $Enums.Status | null
  }

  export type RoupasNullableScalarRelationFilter = {
    is?: RoupasWhereInput | null
    isNot?: RoupasWhereInput | null
  }

  export type HistoricoStatusCountOrderByAggregateInput = {
    id?: SortOrder
    roupas_id?: SortOrder
    status_anterior?: SortOrder
    status_novo?: SortOrder
    alterado_em?: SortOrder
  }

  export type HistoricoStatusAvgOrderByAggregateInput = {
    id?: SortOrder
    roupas_id?: SortOrder
  }

  export type HistoricoStatusMaxOrderByAggregateInput = {
    id?: SortOrder
    roupas_id?: SortOrder
    status_anterior?: SortOrder
    status_novo?: SortOrder
    alterado_em?: SortOrder
  }

  export type HistoricoStatusMinOrderByAggregateInput = {
    id?: SortOrder
    roupas_id?: SortOrder
    status_anterior?: SortOrder
    status_novo?: SortOrder
    alterado_em?: SortOrder
  }

  export type HistoricoStatusSumOrderByAggregateInput = {
    id?: SortOrder
    roupas_id?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.Status[] | null
    notIn?: $Enums.Status[] | null
    not?: NestedEnumStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.Status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumStatusNullableFilter<$PrismaModel>
  }

  export type BaixaListRelationFilter = {
    every?: BaixaWhereInput
    some?: BaixaWhereInput
    none?: BaixaWhereInput
  }

  export type HistoricoStatusListRelationFilter = {
    every?: HistoricoStatusWhereInput
    some?: HistoricoStatusWhereInput
    none?: HistoricoStatusWhereInput
  }

  export type UsuariosScalarRelationFilter = {
    is?: UsuariosWhereInput
    isNot?: UsuariosWhereInput
  }

  export type VendasItensListRelationFilter = {
    every?: VendasItensWhereInput
    some?: VendasItensWhereInput
    none?: VendasItensWhereInput
  }

  export type BaixaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HistoricoStatusOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VendasItensOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoupasOrderByRelevanceInput = {
    fields: RoupasOrderByRelevanceFieldEnum | RoupasOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type RoupasCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    tipo?: SortOrder
    tamanho?: SortOrder
    cor?: SortOrder
    preco?: SortOrder
    quantidade?: SortOrder
    usuarios_id?: SortOrder
    criado_em?: SortOrder
  }

  export type RoupasAvgOrderByAggregateInput = {
    id?: SortOrder
    preco?: SortOrder
    quantidade?: SortOrder
    usuarios_id?: SortOrder
  }

  export type RoupasMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    tipo?: SortOrder
    tamanho?: SortOrder
    cor?: SortOrder
    preco?: SortOrder
    quantidade?: SortOrder
    usuarios_id?: SortOrder
    criado_em?: SortOrder
  }

  export type RoupasMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    tipo?: SortOrder
    tamanho?: SortOrder
    cor?: SortOrder
    preco?: SortOrder
    quantidade?: SortOrder
    usuarios_id?: SortOrder
    criado_em?: SortOrder
  }

  export type RoupasSumOrderByAggregateInput = {
    id?: SortOrder
    preco?: SortOrder
    quantidade?: SortOrder
    usuarios_id?: SortOrder
  }

  export type RoupasListRelationFilter = {
    every?: RoupasWhereInput
    some?: RoupasWhereInput
    none?: RoupasWhereInput
  }

  export type RoupasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuariosOrderByRelevanceInput = {
    fields: UsuariosOrderByRelevanceFieldEnum | UsuariosOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UsuariosCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    criado_em?: SortOrder
  }

  export type UsuariosAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuariosMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    criado_em?: SortOrder
  }

  export type UsuariosMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    criado_em?: SortOrder
  }

  export type UsuariosSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type VendasOrderByRelevanceInput = {
    fields: VendasOrderByRelevanceFieldEnum | VendasOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type VendasCountOrderByAggregateInput = {
    id?: SortOrder
    data_venda?: SortOrder
    forma_pgto?: SortOrder
    valor_total?: SortOrder
    desconto?: SortOrder
    valor_pago?: SortOrder
  }

  export type VendasAvgOrderByAggregateInput = {
    id?: SortOrder
    valor_total?: SortOrder
    desconto?: SortOrder
    valor_pago?: SortOrder
  }

  export type VendasMaxOrderByAggregateInput = {
    id?: SortOrder
    data_venda?: SortOrder
    forma_pgto?: SortOrder
    valor_total?: SortOrder
    desconto?: SortOrder
    valor_pago?: SortOrder
  }

  export type VendasMinOrderByAggregateInput = {
    id?: SortOrder
    data_venda?: SortOrder
    forma_pgto?: SortOrder
    valor_total?: SortOrder
    desconto?: SortOrder
    valor_pago?: SortOrder
  }

  export type VendasSumOrderByAggregateInput = {
    id?: SortOrder
    valor_total?: SortOrder
    desconto?: SortOrder
    valor_pago?: SortOrder
  }

  export type VendasScalarRelationFilter = {
    is?: VendasWhereInput
    isNot?: VendasWhereInput
  }

  export type VendasItensCountOrderByAggregateInput = {
    id?: SortOrder
    roupas_id?: SortOrder
    vendas_id?: SortOrder
    quatidade?: SortOrder
  }

  export type VendasItensAvgOrderByAggregateInput = {
    id?: SortOrder
    roupas_id?: SortOrder
    vendas_id?: SortOrder
    quatidade?: SortOrder
  }

  export type VendasItensMaxOrderByAggregateInput = {
    id?: SortOrder
    roupas_id?: SortOrder
    vendas_id?: SortOrder
    quatidade?: SortOrder
  }

  export type VendasItensMinOrderByAggregateInput = {
    id?: SortOrder
    roupas_id?: SortOrder
    vendas_id?: SortOrder
    quatidade?: SortOrder
  }

  export type VendasItensSumOrderByAggregateInput = {
    id?: SortOrder
    roupas_id?: SortOrder
    vendas_id?: SortOrder
    quatidade?: SortOrder
  }

  export type RoupasCreateNestedOneWithoutBaixaInput = {
    create?: XOR<RoupasCreateWithoutBaixaInput, RoupasUncheckedCreateWithoutBaixaInput>
    connectOrCreate?: RoupasCreateOrConnectWithoutBaixaInput
    connect?: RoupasWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type RoupasUpdateOneRequiredWithoutBaixaNestedInput = {
    create?: XOR<RoupasCreateWithoutBaixaInput, RoupasUncheckedCreateWithoutBaixaInput>
    connectOrCreate?: RoupasCreateOrConnectWithoutBaixaInput
    upsert?: RoupasUpsertWithoutBaixaInput
    connect?: RoupasWhereUniqueInput
    update?: XOR<XOR<RoupasUpdateToOneWithWhereWithoutBaixaInput, RoupasUpdateWithoutBaixaInput>, RoupasUncheckedUpdateWithoutBaixaInput>
  }

  export type CondicionaisCreateNestedManyWithoutClienteInput = {
    create?: XOR<CondicionaisCreateWithoutClienteInput, CondicionaisUncheckedCreateWithoutClienteInput> | CondicionaisCreateWithoutClienteInput[] | CondicionaisUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: CondicionaisCreateOrConnectWithoutClienteInput | CondicionaisCreateOrConnectWithoutClienteInput[]
    createMany?: CondicionaisCreateManyClienteInputEnvelope
    connect?: CondicionaisWhereUniqueInput | CondicionaisWhereUniqueInput[]
  }

  export type CondicionaisUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<CondicionaisCreateWithoutClienteInput, CondicionaisUncheckedCreateWithoutClienteInput> | CondicionaisCreateWithoutClienteInput[] | CondicionaisUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: CondicionaisCreateOrConnectWithoutClienteInput | CondicionaisCreateOrConnectWithoutClienteInput[]
    createMany?: CondicionaisCreateManyClienteInputEnvelope
    connect?: CondicionaisWhereUniqueInput | CondicionaisWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CondicionaisUpdateManyWithoutClienteNestedInput = {
    create?: XOR<CondicionaisCreateWithoutClienteInput, CondicionaisUncheckedCreateWithoutClienteInput> | CondicionaisCreateWithoutClienteInput[] | CondicionaisUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: CondicionaisCreateOrConnectWithoutClienteInput | CondicionaisCreateOrConnectWithoutClienteInput[]
    upsert?: CondicionaisUpsertWithWhereUniqueWithoutClienteInput | CondicionaisUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: CondicionaisCreateManyClienteInputEnvelope
    set?: CondicionaisWhereUniqueInput | CondicionaisWhereUniqueInput[]
    disconnect?: CondicionaisWhereUniqueInput | CondicionaisWhereUniqueInput[]
    delete?: CondicionaisWhereUniqueInput | CondicionaisWhereUniqueInput[]
    connect?: CondicionaisWhereUniqueInput | CondicionaisWhereUniqueInput[]
    update?: CondicionaisUpdateWithWhereUniqueWithoutClienteInput | CondicionaisUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: CondicionaisUpdateManyWithWhereWithoutClienteInput | CondicionaisUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: CondicionaisScalarWhereInput | CondicionaisScalarWhereInput[]
  }

  export type CondicionaisUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<CondicionaisCreateWithoutClienteInput, CondicionaisUncheckedCreateWithoutClienteInput> | CondicionaisCreateWithoutClienteInput[] | CondicionaisUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: CondicionaisCreateOrConnectWithoutClienteInput | CondicionaisCreateOrConnectWithoutClienteInput[]
    upsert?: CondicionaisUpsertWithWhereUniqueWithoutClienteInput | CondicionaisUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: CondicionaisCreateManyClienteInputEnvelope
    set?: CondicionaisWhereUniqueInput | CondicionaisWhereUniqueInput[]
    disconnect?: CondicionaisWhereUniqueInput | CondicionaisWhereUniqueInput[]
    delete?: CondicionaisWhereUniqueInput | CondicionaisWhereUniqueInput[]
    connect?: CondicionaisWhereUniqueInput | CondicionaisWhereUniqueInput[]
    update?: CondicionaisUpdateWithWhereUniqueWithoutClienteInput | CondicionaisUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: CondicionaisUpdateManyWithWhereWithoutClienteInput | CondicionaisUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: CondicionaisScalarWhereInput | CondicionaisScalarWhereInput[]
  }

  export type ComprasItensCreateNestedManyWithoutComprasInput = {
    create?: XOR<ComprasItensCreateWithoutComprasInput, ComprasItensUncheckedCreateWithoutComprasInput> | ComprasItensCreateWithoutComprasInput[] | ComprasItensUncheckedCreateWithoutComprasInput[]
    connectOrCreate?: ComprasItensCreateOrConnectWithoutComprasInput | ComprasItensCreateOrConnectWithoutComprasInput[]
    createMany?: ComprasItensCreateManyComprasInputEnvelope
    connect?: ComprasItensWhereUniqueInput | ComprasItensWhereUniqueInput[]
  }

  export type ComprasItensUncheckedCreateNestedManyWithoutComprasInput = {
    create?: XOR<ComprasItensCreateWithoutComprasInput, ComprasItensUncheckedCreateWithoutComprasInput> | ComprasItensCreateWithoutComprasInput[] | ComprasItensUncheckedCreateWithoutComprasInput[]
    connectOrCreate?: ComprasItensCreateOrConnectWithoutComprasInput | ComprasItensCreateOrConnectWithoutComprasInput[]
    createMany?: ComprasItensCreateManyComprasInputEnvelope
    connect?: ComprasItensWhereUniqueInput | ComprasItensWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ComprasItensUpdateManyWithoutComprasNestedInput = {
    create?: XOR<ComprasItensCreateWithoutComprasInput, ComprasItensUncheckedCreateWithoutComprasInput> | ComprasItensCreateWithoutComprasInput[] | ComprasItensUncheckedCreateWithoutComprasInput[]
    connectOrCreate?: ComprasItensCreateOrConnectWithoutComprasInput | ComprasItensCreateOrConnectWithoutComprasInput[]
    upsert?: ComprasItensUpsertWithWhereUniqueWithoutComprasInput | ComprasItensUpsertWithWhereUniqueWithoutComprasInput[]
    createMany?: ComprasItensCreateManyComprasInputEnvelope
    set?: ComprasItensWhereUniqueInput | ComprasItensWhereUniqueInput[]
    disconnect?: ComprasItensWhereUniqueInput | ComprasItensWhereUniqueInput[]
    delete?: ComprasItensWhereUniqueInput | ComprasItensWhereUniqueInput[]
    connect?: ComprasItensWhereUniqueInput | ComprasItensWhereUniqueInput[]
    update?: ComprasItensUpdateWithWhereUniqueWithoutComprasInput | ComprasItensUpdateWithWhereUniqueWithoutComprasInput[]
    updateMany?: ComprasItensUpdateManyWithWhereWithoutComprasInput | ComprasItensUpdateManyWithWhereWithoutComprasInput[]
    deleteMany?: ComprasItensScalarWhereInput | ComprasItensScalarWhereInput[]
  }

  export type ComprasItensUncheckedUpdateManyWithoutComprasNestedInput = {
    create?: XOR<ComprasItensCreateWithoutComprasInput, ComprasItensUncheckedCreateWithoutComprasInput> | ComprasItensCreateWithoutComprasInput[] | ComprasItensUncheckedCreateWithoutComprasInput[]
    connectOrCreate?: ComprasItensCreateOrConnectWithoutComprasInput | ComprasItensCreateOrConnectWithoutComprasInput[]
    upsert?: ComprasItensUpsertWithWhereUniqueWithoutComprasInput | ComprasItensUpsertWithWhereUniqueWithoutComprasInput[]
    createMany?: ComprasItensCreateManyComprasInputEnvelope
    set?: ComprasItensWhereUniqueInput | ComprasItensWhereUniqueInput[]
    disconnect?: ComprasItensWhereUniqueInput | ComprasItensWhereUniqueInput[]
    delete?: ComprasItensWhereUniqueInput | ComprasItensWhereUniqueInput[]
    connect?: ComprasItensWhereUniqueInput | ComprasItensWhereUniqueInput[]
    update?: ComprasItensUpdateWithWhereUniqueWithoutComprasInput | ComprasItensUpdateWithWhereUniqueWithoutComprasInput[]
    updateMany?: ComprasItensUpdateManyWithWhereWithoutComprasInput | ComprasItensUpdateManyWithWhereWithoutComprasInput[]
    deleteMany?: ComprasItensScalarWhereInput | ComprasItensScalarWhereInput[]
  }

  export type ComprasCreateNestedOneWithoutComprasItensInput = {
    create?: XOR<ComprasCreateWithoutComprasItensInput, ComprasUncheckedCreateWithoutComprasItensInput>
    connectOrCreate?: ComprasCreateOrConnectWithoutComprasItensInput
    connect?: ComprasWhereUniqueInput
  }

  export type RoupasCreateNestedOneWithoutComprasItensInput = {
    create?: XOR<RoupasCreateWithoutComprasItensInput, RoupasUncheckedCreateWithoutComprasItensInput>
    connectOrCreate?: RoupasCreateOrConnectWithoutComprasItensInput
    connect?: RoupasWhereUniqueInput
  }

  export type ComprasUpdateOneRequiredWithoutComprasItensNestedInput = {
    create?: XOR<ComprasCreateWithoutComprasItensInput, ComprasUncheckedCreateWithoutComprasItensInput>
    connectOrCreate?: ComprasCreateOrConnectWithoutComprasItensInput
    upsert?: ComprasUpsertWithoutComprasItensInput
    connect?: ComprasWhereUniqueInput
    update?: XOR<XOR<ComprasUpdateToOneWithWhereWithoutComprasItensInput, ComprasUpdateWithoutComprasItensInput>, ComprasUncheckedUpdateWithoutComprasItensInput>
  }

  export type RoupasUpdateOneRequiredWithoutComprasItensNestedInput = {
    create?: XOR<RoupasCreateWithoutComprasItensInput, RoupasUncheckedCreateWithoutComprasItensInput>
    connectOrCreate?: RoupasCreateOrConnectWithoutComprasItensInput
    upsert?: RoupasUpsertWithoutComprasItensInput
    connect?: RoupasWhereUniqueInput
    update?: XOR<XOR<RoupasUpdateToOneWithWhereWithoutComprasItensInput, RoupasUpdateWithoutComprasItensInput>, RoupasUncheckedUpdateWithoutComprasItensInput>
  }

  export type ClienteCreateNestedOneWithoutCondicionaisInput = {
    create?: XOR<ClienteCreateWithoutCondicionaisInput, ClienteUncheckedCreateWithoutCondicionaisInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutCondicionaisInput
    connect?: ClienteWhereUniqueInput
  }

  export type CondicionaisItensCreateNestedManyWithoutCondicionaisInput = {
    create?: XOR<CondicionaisItensCreateWithoutCondicionaisInput, CondicionaisItensUncheckedCreateWithoutCondicionaisInput> | CondicionaisItensCreateWithoutCondicionaisInput[] | CondicionaisItensUncheckedCreateWithoutCondicionaisInput[]
    connectOrCreate?: CondicionaisItensCreateOrConnectWithoutCondicionaisInput | CondicionaisItensCreateOrConnectWithoutCondicionaisInput[]
    createMany?: CondicionaisItensCreateManyCondicionaisInputEnvelope
    connect?: CondicionaisItensWhereUniqueInput | CondicionaisItensWhereUniqueInput[]
  }

  export type CondicionaisItensUncheckedCreateNestedManyWithoutCondicionaisInput = {
    create?: XOR<CondicionaisItensCreateWithoutCondicionaisInput, CondicionaisItensUncheckedCreateWithoutCondicionaisInput> | CondicionaisItensCreateWithoutCondicionaisInput[] | CondicionaisItensUncheckedCreateWithoutCondicionaisInput[]
    connectOrCreate?: CondicionaisItensCreateOrConnectWithoutCondicionaisInput | CondicionaisItensCreateOrConnectWithoutCondicionaisInput[]
    createMany?: CondicionaisItensCreateManyCondicionaisInputEnvelope
    connect?: CondicionaisItensWhereUniqueInput | CondicionaisItensWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ClienteUpdateOneRequiredWithoutCondicionaisNestedInput = {
    create?: XOR<ClienteCreateWithoutCondicionaisInput, ClienteUncheckedCreateWithoutCondicionaisInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutCondicionaisInput
    upsert?: ClienteUpsertWithoutCondicionaisInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutCondicionaisInput, ClienteUpdateWithoutCondicionaisInput>, ClienteUncheckedUpdateWithoutCondicionaisInput>
  }

  export type CondicionaisItensUpdateManyWithoutCondicionaisNestedInput = {
    create?: XOR<CondicionaisItensCreateWithoutCondicionaisInput, CondicionaisItensUncheckedCreateWithoutCondicionaisInput> | CondicionaisItensCreateWithoutCondicionaisInput[] | CondicionaisItensUncheckedCreateWithoutCondicionaisInput[]
    connectOrCreate?: CondicionaisItensCreateOrConnectWithoutCondicionaisInput | CondicionaisItensCreateOrConnectWithoutCondicionaisInput[]
    upsert?: CondicionaisItensUpsertWithWhereUniqueWithoutCondicionaisInput | CondicionaisItensUpsertWithWhereUniqueWithoutCondicionaisInput[]
    createMany?: CondicionaisItensCreateManyCondicionaisInputEnvelope
    set?: CondicionaisItensWhereUniqueInput | CondicionaisItensWhereUniqueInput[]
    disconnect?: CondicionaisItensWhereUniqueInput | CondicionaisItensWhereUniqueInput[]
    delete?: CondicionaisItensWhereUniqueInput | CondicionaisItensWhereUniqueInput[]
    connect?: CondicionaisItensWhereUniqueInput | CondicionaisItensWhereUniqueInput[]
    update?: CondicionaisItensUpdateWithWhereUniqueWithoutCondicionaisInput | CondicionaisItensUpdateWithWhereUniqueWithoutCondicionaisInput[]
    updateMany?: CondicionaisItensUpdateManyWithWhereWithoutCondicionaisInput | CondicionaisItensUpdateManyWithWhereWithoutCondicionaisInput[]
    deleteMany?: CondicionaisItensScalarWhereInput | CondicionaisItensScalarWhereInput[]
  }

  export type CondicionaisItensUncheckedUpdateManyWithoutCondicionaisNestedInput = {
    create?: XOR<CondicionaisItensCreateWithoutCondicionaisInput, CondicionaisItensUncheckedCreateWithoutCondicionaisInput> | CondicionaisItensCreateWithoutCondicionaisInput[] | CondicionaisItensUncheckedCreateWithoutCondicionaisInput[]
    connectOrCreate?: CondicionaisItensCreateOrConnectWithoutCondicionaisInput | CondicionaisItensCreateOrConnectWithoutCondicionaisInput[]
    upsert?: CondicionaisItensUpsertWithWhereUniqueWithoutCondicionaisInput | CondicionaisItensUpsertWithWhereUniqueWithoutCondicionaisInput[]
    createMany?: CondicionaisItensCreateManyCondicionaisInputEnvelope
    set?: CondicionaisItensWhereUniqueInput | CondicionaisItensWhereUniqueInput[]
    disconnect?: CondicionaisItensWhereUniqueInput | CondicionaisItensWhereUniqueInput[]
    delete?: CondicionaisItensWhereUniqueInput | CondicionaisItensWhereUniqueInput[]
    connect?: CondicionaisItensWhereUniqueInput | CondicionaisItensWhereUniqueInput[]
    update?: CondicionaisItensUpdateWithWhereUniqueWithoutCondicionaisInput | CondicionaisItensUpdateWithWhereUniqueWithoutCondicionaisInput[]
    updateMany?: CondicionaisItensUpdateManyWithWhereWithoutCondicionaisInput | CondicionaisItensUpdateManyWithWhereWithoutCondicionaisInput[]
    deleteMany?: CondicionaisItensScalarWhereInput | CondicionaisItensScalarWhereInput[]
  }

  export type CondicionaisCreateNestedOneWithoutCondicionaisItensInput = {
    create?: XOR<CondicionaisCreateWithoutCondicionaisItensInput, CondicionaisUncheckedCreateWithoutCondicionaisItensInput>
    connectOrCreate?: CondicionaisCreateOrConnectWithoutCondicionaisItensInput
    connect?: CondicionaisWhereUniqueInput
  }

  export type RoupasCreateNestedOneWithoutCondicionaisItensInput = {
    create?: XOR<RoupasCreateWithoutCondicionaisItensInput, RoupasUncheckedCreateWithoutCondicionaisItensInput>
    connectOrCreate?: RoupasCreateOrConnectWithoutCondicionaisItensInput
    connect?: RoupasWhereUniqueInput
  }

  export type CondicionaisUpdateOneRequiredWithoutCondicionaisItensNestedInput = {
    create?: XOR<CondicionaisCreateWithoutCondicionaisItensInput, CondicionaisUncheckedCreateWithoutCondicionaisItensInput>
    connectOrCreate?: CondicionaisCreateOrConnectWithoutCondicionaisItensInput
    upsert?: CondicionaisUpsertWithoutCondicionaisItensInput
    connect?: CondicionaisWhereUniqueInput
    update?: XOR<XOR<CondicionaisUpdateToOneWithWhereWithoutCondicionaisItensInput, CondicionaisUpdateWithoutCondicionaisItensInput>, CondicionaisUncheckedUpdateWithoutCondicionaisItensInput>
  }

  export type RoupasUpdateOneRequiredWithoutCondicionaisItensNestedInput = {
    create?: XOR<RoupasCreateWithoutCondicionaisItensInput, RoupasUncheckedCreateWithoutCondicionaisItensInput>
    connectOrCreate?: RoupasCreateOrConnectWithoutCondicionaisItensInput
    upsert?: RoupasUpsertWithoutCondicionaisItensInput
    connect?: RoupasWhereUniqueInput
    update?: XOR<XOR<RoupasUpdateToOneWithWhereWithoutCondicionaisItensInput, RoupasUpdateWithoutCondicionaisItensInput>, RoupasUncheckedUpdateWithoutCondicionaisItensInput>
  }

  export type RoupasCreateNestedOneWithoutHistoricoStatusInput = {
    create?: XOR<RoupasCreateWithoutHistoricoStatusInput, RoupasUncheckedCreateWithoutHistoricoStatusInput>
    connectOrCreate?: RoupasCreateOrConnectWithoutHistoricoStatusInput
    connect?: RoupasWhereUniqueInput
  }

  export type NullableEnumStatusFieldUpdateOperationsInput = {
    set?: $Enums.Status | null
  }

  export type RoupasUpdateOneWithoutHistoricoStatusNestedInput = {
    create?: XOR<RoupasCreateWithoutHistoricoStatusInput, RoupasUncheckedCreateWithoutHistoricoStatusInput>
    connectOrCreate?: RoupasCreateOrConnectWithoutHistoricoStatusInput
    upsert?: RoupasUpsertWithoutHistoricoStatusInput
    disconnect?: RoupasWhereInput | boolean
    delete?: RoupasWhereInput | boolean
    connect?: RoupasWhereUniqueInput
    update?: XOR<XOR<RoupasUpdateToOneWithWhereWithoutHistoricoStatusInput, RoupasUpdateWithoutHistoricoStatusInput>, RoupasUncheckedUpdateWithoutHistoricoStatusInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BaixaCreateNestedManyWithoutRoupaInput = {
    create?: XOR<BaixaCreateWithoutRoupaInput, BaixaUncheckedCreateWithoutRoupaInput> | BaixaCreateWithoutRoupaInput[] | BaixaUncheckedCreateWithoutRoupaInput[]
    connectOrCreate?: BaixaCreateOrConnectWithoutRoupaInput | BaixaCreateOrConnectWithoutRoupaInput[]
    createMany?: BaixaCreateManyRoupaInputEnvelope
    connect?: BaixaWhereUniqueInput | BaixaWhereUniqueInput[]
  }

  export type ComprasItensCreateNestedManyWithoutRoupaInput = {
    create?: XOR<ComprasItensCreateWithoutRoupaInput, ComprasItensUncheckedCreateWithoutRoupaInput> | ComprasItensCreateWithoutRoupaInput[] | ComprasItensUncheckedCreateWithoutRoupaInput[]
    connectOrCreate?: ComprasItensCreateOrConnectWithoutRoupaInput | ComprasItensCreateOrConnectWithoutRoupaInput[]
    createMany?: ComprasItensCreateManyRoupaInputEnvelope
    connect?: ComprasItensWhereUniqueInput | ComprasItensWhereUniqueInput[]
  }

  export type CondicionaisItensCreateNestedManyWithoutRoupaInput = {
    create?: XOR<CondicionaisItensCreateWithoutRoupaInput, CondicionaisItensUncheckedCreateWithoutRoupaInput> | CondicionaisItensCreateWithoutRoupaInput[] | CondicionaisItensUncheckedCreateWithoutRoupaInput[]
    connectOrCreate?: CondicionaisItensCreateOrConnectWithoutRoupaInput | CondicionaisItensCreateOrConnectWithoutRoupaInput[]
    createMany?: CondicionaisItensCreateManyRoupaInputEnvelope
    connect?: CondicionaisItensWhereUniqueInput | CondicionaisItensWhereUniqueInput[]
  }

  export type HistoricoStatusCreateNestedManyWithoutRoupaInput = {
    create?: XOR<HistoricoStatusCreateWithoutRoupaInput, HistoricoStatusUncheckedCreateWithoutRoupaInput> | HistoricoStatusCreateWithoutRoupaInput[] | HistoricoStatusUncheckedCreateWithoutRoupaInput[]
    connectOrCreate?: HistoricoStatusCreateOrConnectWithoutRoupaInput | HistoricoStatusCreateOrConnectWithoutRoupaInput[]
    createMany?: HistoricoStatusCreateManyRoupaInputEnvelope
    connect?: HistoricoStatusWhereUniqueInput | HistoricoStatusWhereUniqueInput[]
  }

  export type UsuariosCreateNestedOneWithoutRoupasInput = {
    create?: XOR<UsuariosCreateWithoutRoupasInput, UsuariosUncheckedCreateWithoutRoupasInput>
    connectOrCreate?: UsuariosCreateOrConnectWithoutRoupasInput
    connect?: UsuariosWhereUniqueInput
  }

  export type VendasItensCreateNestedManyWithoutRoupaInput = {
    create?: XOR<VendasItensCreateWithoutRoupaInput, VendasItensUncheckedCreateWithoutRoupaInput> | VendasItensCreateWithoutRoupaInput[] | VendasItensUncheckedCreateWithoutRoupaInput[]
    connectOrCreate?: VendasItensCreateOrConnectWithoutRoupaInput | VendasItensCreateOrConnectWithoutRoupaInput[]
    createMany?: VendasItensCreateManyRoupaInputEnvelope
    connect?: VendasItensWhereUniqueInput | VendasItensWhereUniqueInput[]
  }

  export type BaixaUncheckedCreateNestedManyWithoutRoupaInput = {
    create?: XOR<BaixaCreateWithoutRoupaInput, BaixaUncheckedCreateWithoutRoupaInput> | BaixaCreateWithoutRoupaInput[] | BaixaUncheckedCreateWithoutRoupaInput[]
    connectOrCreate?: BaixaCreateOrConnectWithoutRoupaInput | BaixaCreateOrConnectWithoutRoupaInput[]
    createMany?: BaixaCreateManyRoupaInputEnvelope
    connect?: BaixaWhereUniqueInput | BaixaWhereUniqueInput[]
  }

  export type ComprasItensUncheckedCreateNestedManyWithoutRoupaInput = {
    create?: XOR<ComprasItensCreateWithoutRoupaInput, ComprasItensUncheckedCreateWithoutRoupaInput> | ComprasItensCreateWithoutRoupaInput[] | ComprasItensUncheckedCreateWithoutRoupaInput[]
    connectOrCreate?: ComprasItensCreateOrConnectWithoutRoupaInput | ComprasItensCreateOrConnectWithoutRoupaInput[]
    createMany?: ComprasItensCreateManyRoupaInputEnvelope
    connect?: ComprasItensWhereUniqueInput | ComprasItensWhereUniqueInput[]
  }

  export type CondicionaisItensUncheckedCreateNestedManyWithoutRoupaInput = {
    create?: XOR<CondicionaisItensCreateWithoutRoupaInput, CondicionaisItensUncheckedCreateWithoutRoupaInput> | CondicionaisItensCreateWithoutRoupaInput[] | CondicionaisItensUncheckedCreateWithoutRoupaInput[]
    connectOrCreate?: CondicionaisItensCreateOrConnectWithoutRoupaInput | CondicionaisItensCreateOrConnectWithoutRoupaInput[]
    createMany?: CondicionaisItensCreateManyRoupaInputEnvelope
    connect?: CondicionaisItensWhereUniqueInput | CondicionaisItensWhereUniqueInput[]
  }

  export type HistoricoStatusUncheckedCreateNestedManyWithoutRoupaInput = {
    create?: XOR<HistoricoStatusCreateWithoutRoupaInput, HistoricoStatusUncheckedCreateWithoutRoupaInput> | HistoricoStatusCreateWithoutRoupaInput[] | HistoricoStatusUncheckedCreateWithoutRoupaInput[]
    connectOrCreate?: HistoricoStatusCreateOrConnectWithoutRoupaInput | HistoricoStatusCreateOrConnectWithoutRoupaInput[]
    createMany?: HistoricoStatusCreateManyRoupaInputEnvelope
    connect?: HistoricoStatusWhereUniqueInput | HistoricoStatusWhereUniqueInput[]
  }

  export type VendasItensUncheckedCreateNestedManyWithoutRoupaInput = {
    create?: XOR<VendasItensCreateWithoutRoupaInput, VendasItensUncheckedCreateWithoutRoupaInput> | VendasItensCreateWithoutRoupaInput[] | VendasItensUncheckedCreateWithoutRoupaInput[]
    connectOrCreate?: VendasItensCreateOrConnectWithoutRoupaInput | VendasItensCreateOrConnectWithoutRoupaInput[]
    createMany?: VendasItensCreateManyRoupaInputEnvelope
    connect?: VendasItensWhereUniqueInput | VendasItensWhereUniqueInput[]
  }

  export type BaixaUpdateManyWithoutRoupaNestedInput = {
    create?: XOR<BaixaCreateWithoutRoupaInput, BaixaUncheckedCreateWithoutRoupaInput> | BaixaCreateWithoutRoupaInput[] | BaixaUncheckedCreateWithoutRoupaInput[]
    connectOrCreate?: BaixaCreateOrConnectWithoutRoupaInput | BaixaCreateOrConnectWithoutRoupaInput[]
    upsert?: BaixaUpsertWithWhereUniqueWithoutRoupaInput | BaixaUpsertWithWhereUniqueWithoutRoupaInput[]
    createMany?: BaixaCreateManyRoupaInputEnvelope
    set?: BaixaWhereUniqueInput | BaixaWhereUniqueInput[]
    disconnect?: BaixaWhereUniqueInput | BaixaWhereUniqueInput[]
    delete?: BaixaWhereUniqueInput | BaixaWhereUniqueInput[]
    connect?: BaixaWhereUniqueInput | BaixaWhereUniqueInput[]
    update?: BaixaUpdateWithWhereUniqueWithoutRoupaInput | BaixaUpdateWithWhereUniqueWithoutRoupaInput[]
    updateMany?: BaixaUpdateManyWithWhereWithoutRoupaInput | BaixaUpdateManyWithWhereWithoutRoupaInput[]
    deleteMany?: BaixaScalarWhereInput | BaixaScalarWhereInput[]
  }

  export type ComprasItensUpdateManyWithoutRoupaNestedInput = {
    create?: XOR<ComprasItensCreateWithoutRoupaInput, ComprasItensUncheckedCreateWithoutRoupaInput> | ComprasItensCreateWithoutRoupaInput[] | ComprasItensUncheckedCreateWithoutRoupaInput[]
    connectOrCreate?: ComprasItensCreateOrConnectWithoutRoupaInput | ComprasItensCreateOrConnectWithoutRoupaInput[]
    upsert?: ComprasItensUpsertWithWhereUniqueWithoutRoupaInput | ComprasItensUpsertWithWhereUniqueWithoutRoupaInput[]
    createMany?: ComprasItensCreateManyRoupaInputEnvelope
    set?: ComprasItensWhereUniqueInput | ComprasItensWhereUniqueInput[]
    disconnect?: ComprasItensWhereUniqueInput | ComprasItensWhereUniqueInput[]
    delete?: ComprasItensWhereUniqueInput | ComprasItensWhereUniqueInput[]
    connect?: ComprasItensWhereUniqueInput | ComprasItensWhereUniqueInput[]
    update?: ComprasItensUpdateWithWhereUniqueWithoutRoupaInput | ComprasItensUpdateWithWhereUniqueWithoutRoupaInput[]
    updateMany?: ComprasItensUpdateManyWithWhereWithoutRoupaInput | ComprasItensUpdateManyWithWhereWithoutRoupaInput[]
    deleteMany?: ComprasItensScalarWhereInput | ComprasItensScalarWhereInput[]
  }

  export type CondicionaisItensUpdateManyWithoutRoupaNestedInput = {
    create?: XOR<CondicionaisItensCreateWithoutRoupaInput, CondicionaisItensUncheckedCreateWithoutRoupaInput> | CondicionaisItensCreateWithoutRoupaInput[] | CondicionaisItensUncheckedCreateWithoutRoupaInput[]
    connectOrCreate?: CondicionaisItensCreateOrConnectWithoutRoupaInput | CondicionaisItensCreateOrConnectWithoutRoupaInput[]
    upsert?: CondicionaisItensUpsertWithWhereUniqueWithoutRoupaInput | CondicionaisItensUpsertWithWhereUniqueWithoutRoupaInput[]
    createMany?: CondicionaisItensCreateManyRoupaInputEnvelope
    set?: CondicionaisItensWhereUniqueInput | CondicionaisItensWhereUniqueInput[]
    disconnect?: CondicionaisItensWhereUniqueInput | CondicionaisItensWhereUniqueInput[]
    delete?: CondicionaisItensWhereUniqueInput | CondicionaisItensWhereUniqueInput[]
    connect?: CondicionaisItensWhereUniqueInput | CondicionaisItensWhereUniqueInput[]
    update?: CondicionaisItensUpdateWithWhereUniqueWithoutRoupaInput | CondicionaisItensUpdateWithWhereUniqueWithoutRoupaInput[]
    updateMany?: CondicionaisItensUpdateManyWithWhereWithoutRoupaInput | CondicionaisItensUpdateManyWithWhereWithoutRoupaInput[]
    deleteMany?: CondicionaisItensScalarWhereInput | CondicionaisItensScalarWhereInput[]
  }

  export type HistoricoStatusUpdateManyWithoutRoupaNestedInput = {
    create?: XOR<HistoricoStatusCreateWithoutRoupaInput, HistoricoStatusUncheckedCreateWithoutRoupaInput> | HistoricoStatusCreateWithoutRoupaInput[] | HistoricoStatusUncheckedCreateWithoutRoupaInput[]
    connectOrCreate?: HistoricoStatusCreateOrConnectWithoutRoupaInput | HistoricoStatusCreateOrConnectWithoutRoupaInput[]
    upsert?: HistoricoStatusUpsertWithWhereUniqueWithoutRoupaInput | HistoricoStatusUpsertWithWhereUniqueWithoutRoupaInput[]
    createMany?: HistoricoStatusCreateManyRoupaInputEnvelope
    set?: HistoricoStatusWhereUniqueInput | HistoricoStatusWhereUniqueInput[]
    disconnect?: HistoricoStatusWhereUniqueInput | HistoricoStatusWhereUniqueInput[]
    delete?: HistoricoStatusWhereUniqueInput | HistoricoStatusWhereUniqueInput[]
    connect?: HistoricoStatusWhereUniqueInput | HistoricoStatusWhereUniqueInput[]
    update?: HistoricoStatusUpdateWithWhereUniqueWithoutRoupaInput | HistoricoStatusUpdateWithWhereUniqueWithoutRoupaInput[]
    updateMany?: HistoricoStatusUpdateManyWithWhereWithoutRoupaInput | HistoricoStatusUpdateManyWithWhereWithoutRoupaInput[]
    deleteMany?: HistoricoStatusScalarWhereInput | HistoricoStatusScalarWhereInput[]
  }

  export type UsuariosUpdateOneRequiredWithoutRoupasNestedInput = {
    create?: XOR<UsuariosCreateWithoutRoupasInput, UsuariosUncheckedCreateWithoutRoupasInput>
    connectOrCreate?: UsuariosCreateOrConnectWithoutRoupasInput
    upsert?: UsuariosUpsertWithoutRoupasInput
    connect?: UsuariosWhereUniqueInput
    update?: XOR<XOR<UsuariosUpdateToOneWithWhereWithoutRoupasInput, UsuariosUpdateWithoutRoupasInput>, UsuariosUncheckedUpdateWithoutRoupasInput>
  }

  export type VendasItensUpdateManyWithoutRoupaNestedInput = {
    create?: XOR<VendasItensCreateWithoutRoupaInput, VendasItensUncheckedCreateWithoutRoupaInput> | VendasItensCreateWithoutRoupaInput[] | VendasItensUncheckedCreateWithoutRoupaInput[]
    connectOrCreate?: VendasItensCreateOrConnectWithoutRoupaInput | VendasItensCreateOrConnectWithoutRoupaInput[]
    upsert?: VendasItensUpsertWithWhereUniqueWithoutRoupaInput | VendasItensUpsertWithWhereUniqueWithoutRoupaInput[]
    createMany?: VendasItensCreateManyRoupaInputEnvelope
    set?: VendasItensWhereUniqueInput | VendasItensWhereUniqueInput[]
    disconnect?: VendasItensWhereUniqueInput | VendasItensWhereUniqueInput[]
    delete?: VendasItensWhereUniqueInput | VendasItensWhereUniqueInput[]
    connect?: VendasItensWhereUniqueInput | VendasItensWhereUniqueInput[]
    update?: VendasItensUpdateWithWhereUniqueWithoutRoupaInput | VendasItensUpdateWithWhereUniqueWithoutRoupaInput[]
    updateMany?: VendasItensUpdateManyWithWhereWithoutRoupaInput | VendasItensUpdateManyWithWhereWithoutRoupaInput[]
    deleteMany?: VendasItensScalarWhereInput | VendasItensScalarWhereInput[]
  }

  export type BaixaUncheckedUpdateManyWithoutRoupaNestedInput = {
    create?: XOR<BaixaCreateWithoutRoupaInput, BaixaUncheckedCreateWithoutRoupaInput> | BaixaCreateWithoutRoupaInput[] | BaixaUncheckedCreateWithoutRoupaInput[]
    connectOrCreate?: BaixaCreateOrConnectWithoutRoupaInput | BaixaCreateOrConnectWithoutRoupaInput[]
    upsert?: BaixaUpsertWithWhereUniqueWithoutRoupaInput | BaixaUpsertWithWhereUniqueWithoutRoupaInput[]
    createMany?: BaixaCreateManyRoupaInputEnvelope
    set?: BaixaWhereUniqueInput | BaixaWhereUniqueInput[]
    disconnect?: BaixaWhereUniqueInput | BaixaWhereUniqueInput[]
    delete?: BaixaWhereUniqueInput | BaixaWhereUniqueInput[]
    connect?: BaixaWhereUniqueInput | BaixaWhereUniqueInput[]
    update?: BaixaUpdateWithWhereUniqueWithoutRoupaInput | BaixaUpdateWithWhereUniqueWithoutRoupaInput[]
    updateMany?: BaixaUpdateManyWithWhereWithoutRoupaInput | BaixaUpdateManyWithWhereWithoutRoupaInput[]
    deleteMany?: BaixaScalarWhereInput | BaixaScalarWhereInput[]
  }

  export type ComprasItensUncheckedUpdateManyWithoutRoupaNestedInput = {
    create?: XOR<ComprasItensCreateWithoutRoupaInput, ComprasItensUncheckedCreateWithoutRoupaInput> | ComprasItensCreateWithoutRoupaInput[] | ComprasItensUncheckedCreateWithoutRoupaInput[]
    connectOrCreate?: ComprasItensCreateOrConnectWithoutRoupaInput | ComprasItensCreateOrConnectWithoutRoupaInput[]
    upsert?: ComprasItensUpsertWithWhereUniqueWithoutRoupaInput | ComprasItensUpsertWithWhereUniqueWithoutRoupaInput[]
    createMany?: ComprasItensCreateManyRoupaInputEnvelope
    set?: ComprasItensWhereUniqueInput | ComprasItensWhereUniqueInput[]
    disconnect?: ComprasItensWhereUniqueInput | ComprasItensWhereUniqueInput[]
    delete?: ComprasItensWhereUniqueInput | ComprasItensWhereUniqueInput[]
    connect?: ComprasItensWhereUniqueInput | ComprasItensWhereUniqueInput[]
    update?: ComprasItensUpdateWithWhereUniqueWithoutRoupaInput | ComprasItensUpdateWithWhereUniqueWithoutRoupaInput[]
    updateMany?: ComprasItensUpdateManyWithWhereWithoutRoupaInput | ComprasItensUpdateManyWithWhereWithoutRoupaInput[]
    deleteMany?: ComprasItensScalarWhereInput | ComprasItensScalarWhereInput[]
  }

  export type CondicionaisItensUncheckedUpdateManyWithoutRoupaNestedInput = {
    create?: XOR<CondicionaisItensCreateWithoutRoupaInput, CondicionaisItensUncheckedCreateWithoutRoupaInput> | CondicionaisItensCreateWithoutRoupaInput[] | CondicionaisItensUncheckedCreateWithoutRoupaInput[]
    connectOrCreate?: CondicionaisItensCreateOrConnectWithoutRoupaInput | CondicionaisItensCreateOrConnectWithoutRoupaInput[]
    upsert?: CondicionaisItensUpsertWithWhereUniqueWithoutRoupaInput | CondicionaisItensUpsertWithWhereUniqueWithoutRoupaInput[]
    createMany?: CondicionaisItensCreateManyRoupaInputEnvelope
    set?: CondicionaisItensWhereUniqueInput | CondicionaisItensWhereUniqueInput[]
    disconnect?: CondicionaisItensWhereUniqueInput | CondicionaisItensWhereUniqueInput[]
    delete?: CondicionaisItensWhereUniqueInput | CondicionaisItensWhereUniqueInput[]
    connect?: CondicionaisItensWhereUniqueInput | CondicionaisItensWhereUniqueInput[]
    update?: CondicionaisItensUpdateWithWhereUniqueWithoutRoupaInput | CondicionaisItensUpdateWithWhereUniqueWithoutRoupaInput[]
    updateMany?: CondicionaisItensUpdateManyWithWhereWithoutRoupaInput | CondicionaisItensUpdateManyWithWhereWithoutRoupaInput[]
    deleteMany?: CondicionaisItensScalarWhereInput | CondicionaisItensScalarWhereInput[]
  }

  export type HistoricoStatusUncheckedUpdateManyWithoutRoupaNestedInput = {
    create?: XOR<HistoricoStatusCreateWithoutRoupaInput, HistoricoStatusUncheckedCreateWithoutRoupaInput> | HistoricoStatusCreateWithoutRoupaInput[] | HistoricoStatusUncheckedCreateWithoutRoupaInput[]
    connectOrCreate?: HistoricoStatusCreateOrConnectWithoutRoupaInput | HistoricoStatusCreateOrConnectWithoutRoupaInput[]
    upsert?: HistoricoStatusUpsertWithWhereUniqueWithoutRoupaInput | HistoricoStatusUpsertWithWhereUniqueWithoutRoupaInput[]
    createMany?: HistoricoStatusCreateManyRoupaInputEnvelope
    set?: HistoricoStatusWhereUniqueInput | HistoricoStatusWhereUniqueInput[]
    disconnect?: HistoricoStatusWhereUniqueInput | HistoricoStatusWhereUniqueInput[]
    delete?: HistoricoStatusWhereUniqueInput | HistoricoStatusWhereUniqueInput[]
    connect?: HistoricoStatusWhereUniqueInput | HistoricoStatusWhereUniqueInput[]
    update?: HistoricoStatusUpdateWithWhereUniqueWithoutRoupaInput | HistoricoStatusUpdateWithWhereUniqueWithoutRoupaInput[]
    updateMany?: HistoricoStatusUpdateManyWithWhereWithoutRoupaInput | HistoricoStatusUpdateManyWithWhereWithoutRoupaInput[]
    deleteMany?: HistoricoStatusScalarWhereInput | HistoricoStatusScalarWhereInput[]
  }

  export type VendasItensUncheckedUpdateManyWithoutRoupaNestedInput = {
    create?: XOR<VendasItensCreateWithoutRoupaInput, VendasItensUncheckedCreateWithoutRoupaInput> | VendasItensCreateWithoutRoupaInput[] | VendasItensUncheckedCreateWithoutRoupaInput[]
    connectOrCreate?: VendasItensCreateOrConnectWithoutRoupaInput | VendasItensCreateOrConnectWithoutRoupaInput[]
    upsert?: VendasItensUpsertWithWhereUniqueWithoutRoupaInput | VendasItensUpsertWithWhereUniqueWithoutRoupaInput[]
    createMany?: VendasItensCreateManyRoupaInputEnvelope
    set?: VendasItensWhereUniqueInput | VendasItensWhereUniqueInput[]
    disconnect?: VendasItensWhereUniqueInput | VendasItensWhereUniqueInput[]
    delete?: VendasItensWhereUniqueInput | VendasItensWhereUniqueInput[]
    connect?: VendasItensWhereUniqueInput | VendasItensWhereUniqueInput[]
    update?: VendasItensUpdateWithWhereUniqueWithoutRoupaInput | VendasItensUpdateWithWhereUniqueWithoutRoupaInput[]
    updateMany?: VendasItensUpdateManyWithWhereWithoutRoupaInput | VendasItensUpdateManyWithWhereWithoutRoupaInput[]
    deleteMany?: VendasItensScalarWhereInput | VendasItensScalarWhereInput[]
  }

  export type RoupasCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<RoupasCreateWithoutUsuarioInput, RoupasUncheckedCreateWithoutUsuarioInput> | RoupasCreateWithoutUsuarioInput[] | RoupasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RoupasCreateOrConnectWithoutUsuarioInput | RoupasCreateOrConnectWithoutUsuarioInput[]
    createMany?: RoupasCreateManyUsuarioInputEnvelope
    connect?: RoupasWhereUniqueInput | RoupasWhereUniqueInput[]
  }

  export type RoupasUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<RoupasCreateWithoutUsuarioInput, RoupasUncheckedCreateWithoutUsuarioInput> | RoupasCreateWithoutUsuarioInput[] | RoupasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RoupasCreateOrConnectWithoutUsuarioInput | RoupasCreateOrConnectWithoutUsuarioInput[]
    createMany?: RoupasCreateManyUsuarioInputEnvelope
    connect?: RoupasWhereUniqueInput | RoupasWhereUniqueInput[]
  }

  export type RoupasUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<RoupasCreateWithoutUsuarioInput, RoupasUncheckedCreateWithoutUsuarioInput> | RoupasCreateWithoutUsuarioInput[] | RoupasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RoupasCreateOrConnectWithoutUsuarioInput | RoupasCreateOrConnectWithoutUsuarioInput[]
    upsert?: RoupasUpsertWithWhereUniqueWithoutUsuarioInput | RoupasUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: RoupasCreateManyUsuarioInputEnvelope
    set?: RoupasWhereUniqueInput | RoupasWhereUniqueInput[]
    disconnect?: RoupasWhereUniqueInput | RoupasWhereUniqueInput[]
    delete?: RoupasWhereUniqueInput | RoupasWhereUniqueInput[]
    connect?: RoupasWhereUniqueInput | RoupasWhereUniqueInput[]
    update?: RoupasUpdateWithWhereUniqueWithoutUsuarioInput | RoupasUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: RoupasUpdateManyWithWhereWithoutUsuarioInput | RoupasUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: RoupasScalarWhereInput | RoupasScalarWhereInput[]
  }

  export type RoupasUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<RoupasCreateWithoutUsuarioInput, RoupasUncheckedCreateWithoutUsuarioInput> | RoupasCreateWithoutUsuarioInput[] | RoupasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RoupasCreateOrConnectWithoutUsuarioInput | RoupasCreateOrConnectWithoutUsuarioInput[]
    upsert?: RoupasUpsertWithWhereUniqueWithoutUsuarioInput | RoupasUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: RoupasCreateManyUsuarioInputEnvelope
    set?: RoupasWhereUniqueInput | RoupasWhereUniqueInput[]
    disconnect?: RoupasWhereUniqueInput | RoupasWhereUniqueInput[]
    delete?: RoupasWhereUniqueInput | RoupasWhereUniqueInput[]
    connect?: RoupasWhereUniqueInput | RoupasWhereUniqueInput[]
    update?: RoupasUpdateWithWhereUniqueWithoutUsuarioInput | RoupasUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: RoupasUpdateManyWithWhereWithoutUsuarioInput | RoupasUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: RoupasScalarWhereInput | RoupasScalarWhereInput[]
  }

  export type VendasItensCreateNestedManyWithoutVendaInput = {
    create?: XOR<VendasItensCreateWithoutVendaInput, VendasItensUncheckedCreateWithoutVendaInput> | VendasItensCreateWithoutVendaInput[] | VendasItensUncheckedCreateWithoutVendaInput[]
    connectOrCreate?: VendasItensCreateOrConnectWithoutVendaInput | VendasItensCreateOrConnectWithoutVendaInput[]
    createMany?: VendasItensCreateManyVendaInputEnvelope
    connect?: VendasItensWhereUniqueInput | VendasItensWhereUniqueInput[]
  }

  export type VendasItensUncheckedCreateNestedManyWithoutVendaInput = {
    create?: XOR<VendasItensCreateWithoutVendaInput, VendasItensUncheckedCreateWithoutVendaInput> | VendasItensCreateWithoutVendaInput[] | VendasItensUncheckedCreateWithoutVendaInput[]
    connectOrCreate?: VendasItensCreateOrConnectWithoutVendaInput | VendasItensCreateOrConnectWithoutVendaInput[]
    createMany?: VendasItensCreateManyVendaInputEnvelope
    connect?: VendasItensWhereUniqueInput | VendasItensWhereUniqueInput[]
  }

  export type VendasItensUpdateManyWithoutVendaNestedInput = {
    create?: XOR<VendasItensCreateWithoutVendaInput, VendasItensUncheckedCreateWithoutVendaInput> | VendasItensCreateWithoutVendaInput[] | VendasItensUncheckedCreateWithoutVendaInput[]
    connectOrCreate?: VendasItensCreateOrConnectWithoutVendaInput | VendasItensCreateOrConnectWithoutVendaInput[]
    upsert?: VendasItensUpsertWithWhereUniqueWithoutVendaInput | VendasItensUpsertWithWhereUniqueWithoutVendaInput[]
    createMany?: VendasItensCreateManyVendaInputEnvelope
    set?: VendasItensWhereUniqueInput | VendasItensWhereUniqueInput[]
    disconnect?: VendasItensWhereUniqueInput | VendasItensWhereUniqueInput[]
    delete?: VendasItensWhereUniqueInput | VendasItensWhereUniqueInput[]
    connect?: VendasItensWhereUniqueInput | VendasItensWhereUniqueInput[]
    update?: VendasItensUpdateWithWhereUniqueWithoutVendaInput | VendasItensUpdateWithWhereUniqueWithoutVendaInput[]
    updateMany?: VendasItensUpdateManyWithWhereWithoutVendaInput | VendasItensUpdateManyWithWhereWithoutVendaInput[]
    deleteMany?: VendasItensScalarWhereInput | VendasItensScalarWhereInput[]
  }

  export type VendasItensUncheckedUpdateManyWithoutVendaNestedInput = {
    create?: XOR<VendasItensCreateWithoutVendaInput, VendasItensUncheckedCreateWithoutVendaInput> | VendasItensCreateWithoutVendaInput[] | VendasItensUncheckedCreateWithoutVendaInput[]
    connectOrCreate?: VendasItensCreateOrConnectWithoutVendaInput | VendasItensCreateOrConnectWithoutVendaInput[]
    upsert?: VendasItensUpsertWithWhereUniqueWithoutVendaInput | VendasItensUpsertWithWhereUniqueWithoutVendaInput[]
    createMany?: VendasItensCreateManyVendaInputEnvelope
    set?: VendasItensWhereUniqueInput | VendasItensWhereUniqueInput[]
    disconnect?: VendasItensWhereUniqueInput | VendasItensWhereUniqueInput[]
    delete?: VendasItensWhereUniqueInput | VendasItensWhereUniqueInput[]
    connect?: VendasItensWhereUniqueInput | VendasItensWhereUniqueInput[]
    update?: VendasItensUpdateWithWhereUniqueWithoutVendaInput | VendasItensUpdateWithWhereUniqueWithoutVendaInput[]
    updateMany?: VendasItensUpdateManyWithWhereWithoutVendaInput | VendasItensUpdateManyWithWhereWithoutVendaInput[]
    deleteMany?: VendasItensScalarWhereInput | VendasItensScalarWhereInput[]
  }

  export type RoupasCreateNestedOneWithoutVendasItensInput = {
    create?: XOR<RoupasCreateWithoutVendasItensInput, RoupasUncheckedCreateWithoutVendasItensInput>
    connectOrCreate?: RoupasCreateOrConnectWithoutVendasItensInput
    connect?: RoupasWhereUniqueInput
  }

  export type VendasCreateNestedOneWithoutVendasItensInput = {
    create?: XOR<VendasCreateWithoutVendasItensInput, VendasUncheckedCreateWithoutVendasItensInput>
    connectOrCreate?: VendasCreateOrConnectWithoutVendasItensInput
    connect?: VendasWhereUniqueInput
  }

  export type RoupasUpdateOneRequiredWithoutVendasItensNestedInput = {
    create?: XOR<RoupasCreateWithoutVendasItensInput, RoupasUncheckedCreateWithoutVendasItensInput>
    connectOrCreate?: RoupasCreateOrConnectWithoutVendasItensInput
    upsert?: RoupasUpsertWithoutVendasItensInput
    connect?: RoupasWhereUniqueInput
    update?: XOR<XOR<RoupasUpdateToOneWithWhereWithoutVendasItensInput, RoupasUpdateWithoutVendasItensInput>, RoupasUncheckedUpdateWithoutVendasItensInput>
  }

  export type VendasUpdateOneRequiredWithoutVendasItensNestedInput = {
    create?: XOR<VendasCreateWithoutVendasItensInput, VendasUncheckedCreateWithoutVendasItensInput>
    connectOrCreate?: VendasCreateOrConnectWithoutVendasItensInput
    upsert?: VendasUpsertWithoutVendasItensInput
    connect?: VendasWhereUniqueInput
    update?: XOR<XOR<VendasUpdateToOneWithWhereWithoutVendasItensInput, VendasUpdateWithoutVendasItensInput>, VendasUncheckedUpdateWithoutVendasItensInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.Status[] | null
    notIn?: $Enums.Status[] | null
    not?: NestedEnumStatusNullableFilter<$PrismaModel> | $Enums.Status | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.Status[] | null
    notIn?: $Enums.Status[] | null
    not?: NestedEnumStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.Status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumStatusNullableFilter<$PrismaModel>
  }

  export type RoupasCreateWithoutBaixaInput = {
    nome: string
    descricao?: string | null
    tipo: string
    tamanho: string
    cor: string
    preco: number
    quantidade?: number
    criado_em?: Date | string
    ComprasItens?: ComprasItensCreateNestedManyWithoutRoupaInput
    CondicionaisItens?: CondicionaisItensCreateNestedManyWithoutRoupaInput
    HistoricoStatus?: HistoricoStatusCreateNestedManyWithoutRoupaInput
    Usuario: UsuariosCreateNestedOneWithoutRoupasInput
    VendasItens?: VendasItensCreateNestedManyWithoutRoupaInput
  }

  export type RoupasUncheckedCreateWithoutBaixaInput = {
    id?: number
    nome: string
    descricao?: string | null
    tipo: string
    tamanho: string
    cor: string
    preco: number
    quantidade?: number
    usuarios_id: number
    criado_em?: Date | string
    ComprasItens?: ComprasItensUncheckedCreateNestedManyWithoutRoupaInput
    CondicionaisItens?: CondicionaisItensUncheckedCreateNestedManyWithoutRoupaInput
    HistoricoStatus?: HistoricoStatusUncheckedCreateNestedManyWithoutRoupaInput
    VendasItens?: VendasItensUncheckedCreateNestedManyWithoutRoupaInput
  }

  export type RoupasCreateOrConnectWithoutBaixaInput = {
    where: RoupasWhereUniqueInput
    create: XOR<RoupasCreateWithoutBaixaInput, RoupasUncheckedCreateWithoutBaixaInput>
  }

  export type RoupasUpsertWithoutBaixaInput = {
    update: XOR<RoupasUpdateWithoutBaixaInput, RoupasUncheckedUpdateWithoutBaixaInput>
    create: XOR<RoupasCreateWithoutBaixaInput, RoupasUncheckedCreateWithoutBaixaInput>
    where?: RoupasWhereInput
  }

  export type RoupasUpdateToOneWithWhereWithoutBaixaInput = {
    where?: RoupasWhereInput
    data: XOR<RoupasUpdateWithoutBaixaInput, RoupasUncheckedUpdateWithoutBaixaInput>
  }

  export type RoupasUpdateWithoutBaixaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    ComprasItens?: ComprasItensUpdateManyWithoutRoupaNestedInput
    CondicionaisItens?: CondicionaisItensUpdateManyWithoutRoupaNestedInput
    HistoricoStatus?: HistoricoStatusUpdateManyWithoutRoupaNestedInput
    Usuario?: UsuariosUpdateOneRequiredWithoutRoupasNestedInput
    VendasItens?: VendasItensUpdateManyWithoutRoupaNestedInput
  }

  export type RoupasUncheckedUpdateWithoutBaixaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    usuarios_id?: IntFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    ComprasItens?: ComprasItensUncheckedUpdateManyWithoutRoupaNestedInput
    CondicionaisItens?: CondicionaisItensUncheckedUpdateManyWithoutRoupaNestedInput
    HistoricoStatus?: HistoricoStatusUncheckedUpdateManyWithoutRoupaNestedInput
    VendasItens?: VendasItensUncheckedUpdateManyWithoutRoupaNestedInput
  }

  export type CondicionaisCreateWithoutClienteInput = {
    data?: Date | string
    data_devolucao: Date | string
    devolvido?: boolean
    CondicionaisItens?: CondicionaisItensCreateNestedManyWithoutCondicionaisInput
  }

  export type CondicionaisUncheckedCreateWithoutClienteInput = {
    id?: number
    data?: Date | string
    data_devolucao: Date | string
    devolvido?: boolean
    CondicionaisItens?: CondicionaisItensUncheckedCreateNestedManyWithoutCondicionaisInput
  }

  export type CondicionaisCreateOrConnectWithoutClienteInput = {
    where: CondicionaisWhereUniqueInput
    create: XOR<CondicionaisCreateWithoutClienteInput, CondicionaisUncheckedCreateWithoutClienteInput>
  }

  export type CondicionaisCreateManyClienteInputEnvelope = {
    data: CondicionaisCreateManyClienteInput | CondicionaisCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type CondicionaisUpsertWithWhereUniqueWithoutClienteInput = {
    where: CondicionaisWhereUniqueInput
    update: XOR<CondicionaisUpdateWithoutClienteInput, CondicionaisUncheckedUpdateWithoutClienteInput>
    create: XOR<CondicionaisCreateWithoutClienteInput, CondicionaisUncheckedCreateWithoutClienteInput>
  }

  export type CondicionaisUpdateWithWhereUniqueWithoutClienteInput = {
    where: CondicionaisWhereUniqueInput
    data: XOR<CondicionaisUpdateWithoutClienteInput, CondicionaisUncheckedUpdateWithoutClienteInput>
  }

  export type CondicionaisUpdateManyWithWhereWithoutClienteInput = {
    where: CondicionaisScalarWhereInput
    data: XOR<CondicionaisUpdateManyMutationInput, CondicionaisUncheckedUpdateManyWithoutClienteInput>
  }

  export type CondicionaisScalarWhereInput = {
    AND?: CondicionaisScalarWhereInput | CondicionaisScalarWhereInput[]
    OR?: CondicionaisScalarWhereInput[]
    NOT?: CondicionaisScalarWhereInput | CondicionaisScalarWhereInput[]
    id?: IntFilter<"Condicionais"> | number
    cliente_id?: IntFilter<"Condicionais"> | number
    data?: DateTimeFilter<"Condicionais"> | Date | string
    data_devolucao?: DateTimeFilter<"Condicionais"> | Date | string
    devolvido?: BoolFilter<"Condicionais"> | boolean
  }

  export type ComprasItensCreateWithoutComprasInput = {
    quatidade: number
    valor_peça: number
    Roupa: RoupasCreateNestedOneWithoutComprasItensInput
  }

  export type ComprasItensUncheckedCreateWithoutComprasInput = {
    id?: number
    roupas_id: number
    quatidade: number
    valor_peça: number
  }

  export type ComprasItensCreateOrConnectWithoutComprasInput = {
    where: ComprasItensWhereUniqueInput
    create: XOR<ComprasItensCreateWithoutComprasInput, ComprasItensUncheckedCreateWithoutComprasInput>
  }

  export type ComprasItensCreateManyComprasInputEnvelope = {
    data: ComprasItensCreateManyComprasInput | ComprasItensCreateManyComprasInput[]
    skipDuplicates?: boolean
  }

  export type ComprasItensUpsertWithWhereUniqueWithoutComprasInput = {
    where: ComprasItensWhereUniqueInput
    update: XOR<ComprasItensUpdateWithoutComprasInput, ComprasItensUncheckedUpdateWithoutComprasInput>
    create: XOR<ComprasItensCreateWithoutComprasInput, ComprasItensUncheckedCreateWithoutComprasInput>
  }

  export type ComprasItensUpdateWithWhereUniqueWithoutComprasInput = {
    where: ComprasItensWhereUniqueInput
    data: XOR<ComprasItensUpdateWithoutComprasInput, ComprasItensUncheckedUpdateWithoutComprasInput>
  }

  export type ComprasItensUpdateManyWithWhereWithoutComprasInput = {
    where: ComprasItensScalarWhereInput
    data: XOR<ComprasItensUpdateManyMutationInput, ComprasItensUncheckedUpdateManyWithoutComprasInput>
  }

  export type ComprasItensScalarWhereInput = {
    AND?: ComprasItensScalarWhereInput | ComprasItensScalarWhereInput[]
    OR?: ComprasItensScalarWhereInput[]
    NOT?: ComprasItensScalarWhereInput | ComprasItensScalarWhereInput[]
    id?: IntFilter<"ComprasItens"> | number
    roupas_id?: IntFilter<"ComprasItens"> | number
    compras_id?: IntFilter<"ComprasItens"> | number
    quatidade?: IntFilter<"ComprasItens"> | number
    valor_peça?: IntFilter<"ComprasItens"> | number
  }

  export type ComprasCreateWithoutComprasItensInput = {
    data_compra?: Date | string
    forma_pgto: string
    valor_pago: number
    fornecendor?: string | null
    telefone_forncedor?: string | null
  }

  export type ComprasUncheckedCreateWithoutComprasItensInput = {
    id?: number
    data_compra?: Date | string
    forma_pgto: string
    valor_pago: number
    fornecendor?: string | null
    telefone_forncedor?: string | null
  }

  export type ComprasCreateOrConnectWithoutComprasItensInput = {
    where: ComprasWhereUniqueInput
    create: XOR<ComprasCreateWithoutComprasItensInput, ComprasUncheckedCreateWithoutComprasItensInput>
  }

  export type RoupasCreateWithoutComprasItensInput = {
    nome: string
    descricao?: string | null
    tipo: string
    tamanho: string
    cor: string
    preco: number
    quantidade?: number
    criado_em?: Date | string
    Baixa?: BaixaCreateNestedManyWithoutRoupaInput
    CondicionaisItens?: CondicionaisItensCreateNestedManyWithoutRoupaInput
    HistoricoStatus?: HistoricoStatusCreateNestedManyWithoutRoupaInput
    Usuario: UsuariosCreateNestedOneWithoutRoupasInput
    VendasItens?: VendasItensCreateNestedManyWithoutRoupaInput
  }

  export type RoupasUncheckedCreateWithoutComprasItensInput = {
    id?: number
    nome: string
    descricao?: string | null
    tipo: string
    tamanho: string
    cor: string
    preco: number
    quantidade?: number
    usuarios_id: number
    criado_em?: Date | string
    Baixa?: BaixaUncheckedCreateNestedManyWithoutRoupaInput
    CondicionaisItens?: CondicionaisItensUncheckedCreateNestedManyWithoutRoupaInput
    HistoricoStatus?: HistoricoStatusUncheckedCreateNestedManyWithoutRoupaInput
    VendasItens?: VendasItensUncheckedCreateNestedManyWithoutRoupaInput
  }

  export type RoupasCreateOrConnectWithoutComprasItensInput = {
    where: RoupasWhereUniqueInput
    create: XOR<RoupasCreateWithoutComprasItensInput, RoupasUncheckedCreateWithoutComprasItensInput>
  }

  export type ComprasUpsertWithoutComprasItensInput = {
    update: XOR<ComprasUpdateWithoutComprasItensInput, ComprasUncheckedUpdateWithoutComprasItensInput>
    create: XOR<ComprasCreateWithoutComprasItensInput, ComprasUncheckedCreateWithoutComprasItensInput>
    where?: ComprasWhereInput
  }

  export type ComprasUpdateToOneWithWhereWithoutComprasItensInput = {
    where?: ComprasWhereInput
    data: XOR<ComprasUpdateWithoutComprasItensInput, ComprasUncheckedUpdateWithoutComprasItensInput>
  }

  export type ComprasUpdateWithoutComprasItensInput = {
    data_compra?: DateTimeFieldUpdateOperationsInput | Date | string
    forma_pgto?: StringFieldUpdateOperationsInput | string
    valor_pago?: FloatFieldUpdateOperationsInput | number
    fornecendor?: NullableStringFieldUpdateOperationsInput | string | null
    telefone_forncedor?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComprasUncheckedUpdateWithoutComprasItensInput = {
    id?: IntFieldUpdateOperationsInput | number
    data_compra?: DateTimeFieldUpdateOperationsInput | Date | string
    forma_pgto?: StringFieldUpdateOperationsInput | string
    valor_pago?: FloatFieldUpdateOperationsInput | number
    fornecendor?: NullableStringFieldUpdateOperationsInput | string | null
    telefone_forncedor?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoupasUpsertWithoutComprasItensInput = {
    update: XOR<RoupasUpdateWithoutComprasItensInput, RoupasUncheckedUpdateWithoutComprasItensInput>
    create: XOR<RoupasCreateWithoutComprasItensInput, RoupasUncheckedCreateWithoutComprasItensInput>
    where?: RoupasWhereInput
  }

  export type RoupasUpdateToOneWithWhereWithoutComprasItensInput = {
    where?: RoupasWhereInput
    data: XOR<RoupasUpdateWithoutComprasItensInput, RoupasUncheckedUpdateWithoutComprasItensInput>
  }

  export type RoupasUpdateWithoutComprasItensInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    Baixa?: BaixaUpdateManyWithoutRoupaNestedInput
    CondicionaisItens?: CondicionaisItensUpdateManyWithoutRoupaNestedInput
    HistoricoStatus?: HistoricoStatusUpdateManyWithoutRoupaNestedInput
    Usuario?: UsuariosUpdateOneRequiredWithoutRoupasNestedInput
    VendasItens?: VendasItensUpdateManyWithoutRoupaNestedInput
  }

  export type RoupasUncheckedUpdateWithoutComprasItensInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    usuarios_id?: IntFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    Baixa?: BaixaUncheckedUpdateManyWithoutRoupaNestedInput
    CondicionaisItens?: CondicionaisItensUncheckedUpdateManyWithoutRoupaNestedInput
    HistoricoStatus?: HistoricoStatusUncheckedUpdateManyWithoutRoupaNestedInput
    VendasItens?: VendasItensUncheckedUpdateManyWithoutRoupaNestedInput
  }

  export type ClienteCreateWithoutCondicionaisInput = {
    nome: string
    email: string
    cpf: string
    criado_em?: Date | string
    telefone?: string | null
    endereco?: string | null
  }

  export type ClienteUncheckedCreateWithoutCondicionaisInput = {
    id?: number
    nome: string
    email: string
    cpf: string
    criado_em?: Date | string
    telefone?: string | null
    endereco?: string | null
  }

  export type ClienteCreateOrConnectWithoutCondicionaisInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutCondicionaisInput, ClienteUncheckedCreateWithoutCondicionaisInput>
  }

  export type CondicionaisItensCreateWithoutCondicionaisInput = {
    quatidade: number
    Roupa: RoupasCreateNestedOneWithoutCondicionaisItensInput
  }

  export type CondicionaisItensUncheckedCreateWithoutCondicionaisInput = {
    id?: number
    roupas_id: number
    quatidade: number
  }

  export type CondicionaisItensCreateOrConnectWithoutCondicionaisInput = {
    where: CondicionaisItensWhereUniqueInput
    create: XOR<CondicionaisItensCreateWithoutCondicionaisInput, CondicionaisItensUncheckedCreateWithoutCondicionaisInput>
  }

  export type CondicionaisItensCreateManyCondicionaisInputEnvelope = {
    data: CondicionaisItensCreateManyCondicionaisInput | CondicionaisItensCreateManyCondicionaisInput[]
    skipDuplicates?: boolean
  }

  export type ClienteUpsertWithoutCondicionaisInput = {
    update: XOR<ClienteUpdateWithoutCondicionaisInput, ClienteUncheckedUpdateWithoutCondicionaisInput>
    create: XOR<ClienteCreateWithoutCondicionaisInput, ClienteUncheckedCreateWithoutCondicionaisInput>
    where?: ClienteWhereInput
  }

  export type ClienteUpdateToOneWithWhereWithoutCondicionaisInput = {
    where?: ClienteWhereInput
    data: XOR<ClienteUpdateWithoutCondicionaisInput, ClienteUncheckedUpdateWithoutCondicionaisInput>
  }

  export type ClienteUpdateWithoutCondicionaisInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClienteUncheckedUpdateWithoutCondicionaisInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CondicionaisItensUpsertWithWhereUniqueWithoutCondicionaisInput = {
    where: CondicionaisItensWhereUniqueInput
    update: XOR<CondicionaisItensUpdateWithoutCondicionaisInput, CondicionaisItensUncheckedUpdateWithoutCondicionaisInput>
    create: XOR<CondicionaisItensCreateWithoutCondicionaisInput, CondicionaisItensUncheckedCreateWithoutCondicionaisInput>
  }

  export type CondicionaisItensUpdateWithWhereUniqueWithoutCondicionaisInput = {
    where: CondicionaisItensWhereUniqueInput
    data: XOR<CondicionaisItensUpdateWithoutCondicionaisInput, CondicionaisItensUncheckedUpdateWithoutCondicionaisInput>
  }

  export type CondicionaisItensUpdateManyWithWhereWithoutCondicionaisInput = {
    where: CondicionaisItensScalarWhereInput
    data: XOR<CondicionaisItensUpdateManyMutationInput, CondicionaisItensUncheckedUpdateManyWithoutCondicionaisInput>
  }

  export type CondicionaisItensScalarWhereInput = {
    AND?: CondicionaisItensScalarWhereInput | CondicionaisItensScalarWhereInput[]
    OR?: CondicionaisItensScalarWhereInput[]
    NOT?: CondicionaisItensScalarWhereInput | CondicionaisItensScalarWhereInput[]
    id?: IntFilter<"CondicionaisItens"> | number
    roupas_id?: IntFilter<"CondicionaisItens"> | number
    condicionais_id?: IntFilter<"CondicionaisItens"> | number
    quatidade?: IntFilter<"CondicionaisItens"> | number
  }

  export type CondicionaisCreateWithoutCondicionaisItensInput = {
    data?: Date | string
    data_devolucao: Date | string
    devolvido?: boolean
    Cliente: ClienteCreateNestedOneWithoutCondicionaisInput
  }

  export type CondicionaisUncheckedCreateWithoutCondicionaisItensInput = {
    id?: number
    cliente_id: number
    data?: Date | string
    data_devolucao: Date | string
    devolvido?: boolean
  }

  export type CondicionaisCreateOrConnectWithoutCondicionaisItensInput = {
    where: CondicionaisWhereUniqueInput
    create: XOR<CondicionaisCreateWithoutCondicionaisItensInput, CondicionaisUncheckedCreateWithoutCondicionaisItensInput>
  }

  export type RoupasCreateWithoutCondicionaisItensInput = {
    nome: string
    descricao?: string | null
    tipo: string
    tamanho: string
    cor: string
    preco: number
    quantidade?: number
    criado_em?: Date | string
    Baixa?: BaixaCreateNestedManyWithoutRoupaInput
    ComprasItens?: ComprasItensCreateNestedManyWithoutRoupaInput
    HistoricoStatus?: HistoricoStatusCreateNestedManyWithoutRoupaInput
    Usuario: UsuariosCreateNestedOneWithoutRoupasInput
    VendasItens?: VendasItensCreateNestedManyWithoutRoupaInput
  }

  export type RoupasUncheckedCreateWithoutCondicionaisItensInput = {
    id?: number
    nome: string
    descricao?: string | null
    tipo: string
    tamanho: string
    cor: string
    preco: number
    quantidade?: number
    usuarios_id: number
    criado_em?: Date | string
    Baixa?: BaixaUncheckedCreateNestedManyWithoutRoupaInput
    ComprasItens?: ComprasItensUncheckedCreateNestedManyWithoutRoupaInput
    HistoricoStatus?: HistoricoStatusUncheckedCreateNestedManyWithoutRoupaInput
    VendasItens?: VendasItensUncheckedCreateNestedManyWithoutRoupaInput
  }

  export type RoupasCreateOrConnectWithoutCondicionaisItensInput = {
    where: RoupasWhereUniqueInput
    create: XOR<RoupasCreateWithoutCondicionaisItensInput, RoupasUncheckedCreateWithoutCondicionaisItensInput>
  }

  export type CondicionaisUpsertWithoutCondicionaisItensInput = {
    update: XOR<CondicionaisUpdateWithoutCondicionaisItensInput, CondicionaisUncheckedUpdateWithoutCondicionaisItensInput>
    create: XOR<CondicionaisCreateWithoutCondicionaisItensInput, CondicionaisUncheckedCreateWithoutCondicionaisItensInput>
    where?: CondicionaisWhereInput
  }

  export type CondicionaisUpdateToOneWithWhereWithoutCondicionaisItensInput = {
    where?: CondicionaisWhereInput
    data: XOR<CondicionaisUpdateWithoutCondicionaisItensInput, CondicionaisUncheckedUpdateWithoutCondicionaisItensInput>
  }

  export type CondicionaisUpdateWithoutCondicionaisItensInput = {
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    data_devolucao?: DateTimeFieldUpdateOperationsInput | Date | string
    devolvido?: BoolFieldUpdateOperationsInput | boolean
    Cliente?: ClienteUpdateOneRequiredWithoutCondicionaisNestedInput
  }

  export type CondicionaisUncheckedUpdateWithoutCondicionaisItensInput = {
    id?: IntFieldUpdateOperationsInput | number
    cliente_id?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    data_devolucao?: DateTimeFieldUpdateOperationsInput | Date | string
    devolvido?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoupasUpsertWithoutCondicionaisItensInput = {
    update: XOR<RoupasUpdateWithoutCondicionaisItensInput, RoupasUncheckedUpdateWithoutCondicionaisItensInput>
    create: XOR<RoupasCreateWithoutCondicionaisItensInput, RoupasUncheckedCreateWithoutCondicionaisItensInput>
    where?: RoupasWhereInput
  }

  export type RoupasUpdateToOneWithWhereWithoutCondicionaisItensInput = {
    where?: RoupasWhereInput
    data: XOR<RoupasUpdateWithoutCondicionaisItensInput, RoupasUncheckedUpdateWithoutCondicionaisItensInput>
  }

  export type RoupasUpdateWithoutCondicionaisItensInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    Baixa?: BaixaUpdateManyWithoutRoupaNestedInput
    ComprasItens?: ComprasItensUpdateManyWithoutRoupaNestedInput
    HistoricoStatus?: HistoricoStatusUpdateManyWithoutRoupaNestedInput
    Usuario?: UsuariosUpdateOneRequiredWithoutRoupasNestedInput
    VendasItens?: VendasItensUpdateManyWithoutRoupaNestedInput
  }

  export type RoupasUncheckedUpdateWithoutCondicionaisItensInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    usuarios_id?: IntFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    Baixa?: BaixaUncheckedUpdateManyWithoutRoupaNestedInput
    ComprasItens?: ComprasItensUncheckedUpdateManyWithoutRoupaNestedInput
    HistoricoStatus?: HistoricoStatusUncheckedUpdateManyWithoutRoupaNestedInput
    VendasItens?: VendasItensUncheckedUpdateManyWithoutRoupaNestedInput
  }

  export type RoupasCreateWithoutHistoricoStatusInput = {
    nome: string
    descricao?: string | null
    tipo: string
    tamanho: string
    cor: string
    preco: number
    quantidade?: number
    criado_em?: Date | string
    Baixa?: BaixaCreateNestedManyWithoutRoupaInput
    ComprasItens?: ComprasItensCreateNestedManyWithoutRoupaInput
    CondicionaisItens?: CondicionaisItensCreateNestedManyWithoutRoupaInput
    Usuario: UsuariosCreateNestedOneWithoutRoupasInput
    VendasItens?: VendasItensCreateNestedManyWithoutRoupaInput
  }

  export type RoupasUncheckedCreateWithoutHistoricoStatusInput = {
    id?: number
    nome: string
    descricao?: string | null
    tipo: string
    tamanho: string
    cor: string
    preco: number
    quantidade?: number
    usuarios_id: number
    criado_em?: Date | string
    Baixa?: BaixaUncheckedCreateNestedManyWithoutRoupaInput
    ComprasItens?: ComprasItensUncheckedCreateNestedManyWithoutRoupaInput
    CondicionaisItens?: CondicionaisItensUncheckedCreateNestedManyWithoutRoupaInput
    VendasItens?: VendasItensUncheckedCreateNestedManyWithoutRoupaInput
  }

  export type RoupasCreateOrConnectWithoutHistoricoStatusInput = {
    where: RoupasWhereUniqueInput
    create: XOR<RoupasCreateWithoutHistoricoStatusInput, RoupasUncheckedCreateWithoutHistoricoStatusInput>
  }

  export type RoupasUpsertWithoutHistoricoStatusInput = {
    update: XOR<RoupasUpdateWithoutHistoricoStatusInput, RoupasUncheckedUpdateWithoutHistoricoStatusInput>
    create: XOR<RoupasCreateWithoutHistoricoStatusInput, RoupasUncheckedCreateWithoutHistoricoStatusInput>
    where?: RoupasWhereInput
  }

  export type RoupasUpdateToOneWithWhereWithoutHistoricoStatusInput = {
    where?: RoupasWhereInput
    data: XOR<RoupasUpdateWithoutHistoricoStatusInput, RoupasUncheckedUpdateWithoutHistoricoStatusInput>
  }

  export type RoupasUpdateWithoutHistoricoStatusInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    Baixa?: BaixaUpdateManyWithoutRoupaNestedInput
    ComprasItens?: ComprasItensUpdateManyWithoutRoupaNestedInput
    CondicionaisItens?: CondicionaisItensUpdateManyWithoutRoupaNestedInput
    Usuario?: UsuariosUpdateOneRequiredWithoutRoupasNestedInput
    VendasItens?: VendasItensUpdateManyWithoutRoupaNestedInput
  }

  export type RoupasUncheckedUpdateWithoutHistoricoStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    usuarios_id?: IntFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    Baixa?: BaixaUncheckedUpdateManyWithoutRoupaNestedInput
    ComprasItens?: ComprasItensUncheckedUpdateManyWithoutRoupaNestedInput
    CondicionaisItens?: CondicionaisItensUncheckedUpdateManyWithoutRoupaNestedInput
    VendasItens?: VendasItensUncheckedUpdateManyWithoutRoupaNestedInput
  }

  export type BaixaCreateWithoutRoupaInput = {
    quantidade: number
    data_baixa?: Date | string
    motivo: string
  }

  export type BaixaUncheckedCreateWithoutRoupaInput = {
    id?: number
    quantidade: number
    data_baixa?: Date | string
    motivo: string
  }

  export type BaixaCreateOrConnectWithoutRoupaInput = {
    where: BaixaWhereUniqueInput
    create: XOR<BaixaCreateWithoutRoupaInput, BaixaUncheckedCreateWithoutRoupaInput>
  }

  export type BaixaCreateManyRoupaInputEnvelope = {
    data: BaixaCreateManyRoupaInput | BaixaCreateManyRoupaInput[]
    skipDuplicates?: boolean
  }

  export type ComprasItensCreateWithoutRoupaInput = {
    quatidade: number
    valor_peça: number
    Compras: ComprasCreateNestedOneWithoutComprasItensInput
  }

  export type ComprasItensUncheckedCreateWithoutRoupaInput = {
    id?: number
    compras_id: number
    quatidade: number
    valor_peça: number
  }

  export type ComprasItensCreateOrConnectWithoutRoupaInput = {
    where: ComprasItensWhereUniqueInput
    create: XOR<ComprasItensCreateWithoutRoupaInput, ComprasItensUncheckedCreateWithoutRoupaInput>
  }

  export type ComprasItensCreateManyRoupaInputEnvelope = {
    data: ComprasItensCreateManyRoupaInput | ComprasItensCreateManyRoupaInput[]
    skipDuplicates?: boolean
  }

  export type CondicionaisItensCreateWithoutRoupaInput = {
    quatidade: number
    Condicionais: CondicionaisCreateNestedOneWithoutCondicionaisItensInput
  }

  export type CondicionaisItensUncheckedCreateWithoutRoupaInput = {
    id?: number
    condicionais_id: number
    quatidade: number
  }

  export type CondicionaisItensCreateOrConnectWithoutRoupaInput = {
    where: CondicionaisItensWhereUniqueInput
    create: XOR<CondicionaisItensCreateWithoutRoupaInput, CondicionaisItensUncheckedCreateWithoutRoupaInput>
  }

  export type CondicionaisItensCreateManyRoupaInputEnvelope = {
    data: CondicionaisItensCreateManyRoupaInput | CondicionaisItensCreateManyRoupaInput[]
    skipDuplicates?: boolean
  }

  export type HistoricoStatusCreateWithoutRoupaInput = {
    status_anterior?: $Enums.Status | null
    status_novo?: $Enums.Status | null
    alterado_em?: Date | string
  }

  export type HistoricoStatusUncheckedCreateWithoutRoupaInput = {
    id?: number
    status_anterior?: $Enums.Status | null
    status_novo?: $Enums.Status | null
    alterado_em?: Date | string
  }

  export type HistoricoStatusCreateOrConnectWithoutRoupaInput = {
    where: HistoricoStatusWhereUniqueInput
    create: XOR<HistoricoStatusCreateWithoutRoupaInput, HistoricoStatusUncheckedCreateWithoutRoupaInput>
  }

  export type HistoricoStatusCreateManyRoupaInputEnvelope = {
    data: HistoricoStatusCreateManyRoupaInput | HistoricoStatusCreateManyRoupaInput[]
    skipDuplicates?: boolean
  }

  export type UsuariosCreateWithoutRoupasInput = {
    nome: string
    email: string
    senha: string
    criado_em?: Date | string
  }

  export type UsuariosUncheckedCreateWithoutRoupasInput = {
    id?: number
    nome: string
    email: string
    senha: string
    criado_em?: Date | string
  }

  export type UsuariosCreateOrConnectWithoutRoupasInput = {
    where: UsuariosWhereUniqueInput
    create: XOR<UsuariosCreateWithoutRoupasInput, UsuariosUncheckedCreateWithoutRoupasInput>
  }

  export type VendasItensCreateWithoutRoupaInput = {
    quatidade: number
    Venda: VendasCreateNestedOneWithoutVendasItensInput
  }

  export type VendasItensUncheckedCreateWithoutRoupaInput = {
    id?: number
    vendas_id: number
    quatidade: number
  }

  export type VendasItensCreateOrConnectWithoutRoupaInput = {
    where: VendasItensWhereUniqueInput
    create: XOR<VendasItensCreateWithoutRoupaInput, VendasItensUncheckedCreateWithoutRoupaInput>
  }

  export type VendasItensCreateManyRoupaInputEnvelope = {
    data: VendasItensCreateManyRoupaInput | VendasItensCreateManyRoupaInput[]
    skipDuplicates?: boolean
  }

  export type BaixaUpsertWithWhereUniqueWithoutRoupaInput = {
    where: BaixaWhereUniqueInput
    update: XOR<BaixaUpdateWithoutRoupaInput, BaixaUncheckedUpdateWithoutRoupaInput>
    create: XOR<BaixaCreateWithoutRoupaInput, BaixaUncheckedCreateWithoutRoupaInput>
  }

  export type BaixaUpdateWithWhereUniqueWithoutRoupaInput = {
    where: BaixaWhereUniqueInput
    data: XOR<BaixaUpdateWithoutRoupaInput, BaixaUncheckedUpdateWithoutRoupaInput>
  }

  export type BaixaUpdateManyWithWhereWithoutRoupaInput = {
    where: BaixaScalarWhereInput
    data: XOR<BaixaUpdateManyMutationInput, BaixaUncheckedUpdateManyWithoutRoupaInput>
  }

  export type BaixaScalarWhereInput = {
    AND?: BaixaScalarWhereInput | BaixaScalarWhereInput[]
    OR?: BaixaScalarWhereInput[]
    NOT?: BaixaScalarWhereInput | BaixaScalarWhereInput[]
    id?: IntFilter<"Baixa"> | number
    roupa_id?: IntFilter<"Baixa"> | number
    quantidade?: IntFilter<"Baixa"> | number
    data_baixa?: DateTimeFilter<"Baixa"> | Date | string
    motivo?: StringFilter<"Baixa"> | string
  }

  export type ComprasItensUpsertWithWhereUniqueWithoutRoupaInput = {
    where: ComprasItensWhereUniqueInput
    update: XOR<ComprasItensUpdateWithoutRoupaInput, ComprasItensUncheckedUpdateWithoutRoupaInput>
    create: XOR<ComprasItensCreateWithoutRoupaInput, ComprasItensUncheckedCreateWithoutRoupaInput>
  }

  export type ComprasItensUpdateWithWhereUniqueWithoutRoupaInput = {
    where: ComprasItensWhereUniqueInput
    data: XOR<ComprasItensUpdateWithoutRoupaInput, ComprasItensUncheckedUpdateWithoutRoupaInput>
  }

  export type ComprasItensUpdateManyWithWhereWithoutRoupaInput = {
    where: ComprasItensScalarWhereInput
    data: XOR<ComprasItensUpdateManyMutationInput, ComprasItensUncheckedUpdateManyWithoutRoupaInput>
  }

  export type CondicionaisItensUpsertWithWhereUniqueWithoutRoupaInput = {
    where: CondicionaisItensWhereUniqueInput
    update: XOR<CondicionaisItensUpdateWithoutRoupaInput, CondicionaisItensUncheckedUpdateWithoutRoupaInput>
    create: XOR<CondicionaisItensCreateWithoutRoupaInput, CondicionaisItensUncheckedCreateWithoutRoupaInput>
  }

  export type CondicionaisItensUpdateWithWhereUniqueWithoutRoupaInput = {
    where: CondicionaisItensWhereUniqueInput
    data: XOR<CondicionaisItensUpdateWithoutRoupaInput, CondicionaisItensUncheckedUpdateWithoutRoupaInput>
  }

  export type CondicionaisItensUpdateManyWithWhereWithoutRoupaInput = {
    where: CondicionaisItensScalarWhereInput
    data: XOR<CondicionaisItensUpdateManyMutationInput, CondicionaisItensUncheckedUpdateManyWithoutRoupaInput>
  }

  export type HistoricoStatusUpsertWithWhereUniqueWithoutRoupaInput = {
    where: HistoricoStatusWhereUniqueInput
    update: XOR<HistoricoStatusUpdateWithoutRoupaInput, HistoricoStatusUncheckedUpdateWithoutRoupaInput>
    create: XOR<HistoricoStatusCreateWithoutRoupaInput, HistoricoStatusUncheckedCreateWithoutRoupaInput>
  }

  export type HistoricoStatusUpdateWithWhereUniqueWithoutRoupaInput = {
    where: HistoricoStatusWhereUniqueInput
    data: XOR<HistoricoStatusUpdateWithoutRoupaInput, HistoricoStatusUncheckedUpdateWithoutRoupaInput>
  }

  export type HistoricoStatusUpdateManyWithWhereWithoutRoupaInput = {
    where: HistoricoStatusScalarWhereInput
    data: XOR<HistoricoStatusUpdateManyMutationInput, HistoricoStatusUncheckedUpdateManyWithoutRoupaInput>
  }

  export type HistoricoStatusScalarWhereInput = {
    AND?: HistoricoStatusScalarWhereInput | HistoricoStatusScalarWhereInput[]
    OR?: HistoricoStatusScalarWhereInput[]
    NOT?: HistoricoStatusScalarWhereInput | HistoricoStatusScalarWhereInput[]
    id?: IntFilter<"HistoricoStatus"> | number
    roupas_id?: IntNullableFilter<"HistoricoStatus"> | number | null
    status_anterior?: EnumStatusNullableFilter<"HistoricoStatus"> | $Enums.Status | null
    status_novo?: EnumStatusNullableFilter<"HistoricoStatus"> | $Enums.Status | null
    alterado_em?: DateTimeFilter<"HistoricoStatus"> | Date | string
  }

  export type UsuariosUpsertWithoutRoupasInput = {
    update: XOR<UsuariosUpdateWithoutRoupasInput, UsuariosUncheckedUpdateWithoutRoupasInput>
    create: XOR<UsuariosCreateWithoutRoupasInput, UsuariosUncheckedCreateWithoutRoupasInput>
    where?: UsuariosWhereInput
  }

  export type UsuariosUpdateToOneWithWhereWithoutRoupasInput = {
    where?: UsuariosWhereInput
    data: XOR<UsuariosUpdateWithoutRoupasInput, UsuariosUncheckedUpdateWithoutRoupasInput>
  }

  export type UsuariosUpdateWithoutRoupasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuariosUncheckedUpdateWithoutRoupasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendasItensUpsertWithWhereUniqueWithoutRoupaInput = {
    where: VendasItensWhereUniqueInput
    update: XOR<VendasItensUpdateWithoutRoupaInput, VendasItensUncheckedUpdateWithoutRoupaInput>
    create: XOR<VendasItensCreateWithoutRoupaInput, VendasItensUncheckedCreateWithoutRoupaInput>
  }

  export type VendasItensUpdateWithWhereUniqueWithoutRoupaInput = {
    where: VendasItensWhereUniqueInput
    data: XOR<VendasItensUpdateWithoutRoupaInput, VendasItensUncheckedUpdateWithoutRoupaInput>
  }

  export type VendasItensUpdateManyWithWhereWithoutRoupaInput = {
    where: VendasItensScalarWhereInput
    data: XOR<VendasItensUpdateManyMutationInput, VendasItensUncheckedUpdateManyWithoutRoupaInput>
  }

  export type VendasItensScalarWhereInput = {
    AND?: VendasItensScalarWhereInput | VendasItensScalarWhereInput[]
    OR?: VendasItensScalarWhereInput[]
    NOT?: VendasItensScalarWhereInput | VendasItensScalarWhereInput[]
    id?: IntFilter<"VendasItens"> | number
    roupas_id?: IntFilter<"VendasItens"> | number
    vendas_id?: IntFilter<"VendasItens"> | number
    quatidade?: IntFilter<"VendasItens"> | number
  }

  export type RoupasCreateWithoutUsuarioInput = {
    nome: string
    descricao?: string | null
    tipo: string
    tamanho: string
    cor: string
    preco: number
    quantidade?: number
    criado_em?: Date | string
    Baixa?: BaixaCreateNestedManyWithoutRoupaInput
    ComprasItens?: ComprasItensCreateNestedManyWithoutRoupaInput
    CondicionaisItens?: CondicionaisItensCreateNestedManyWithoutRoupaInput
    HistoricoStatus?: HistoricoStatusCreateNestedManyWithoutRoupaInput
    VendasItens?: VendasItensCreateNestedManyWithoutRoupaInput
  }

  export type RoupasUncheckedCreateWithoutUsuarioInput = {
    id?: number
    nome: string
    descricao?: string | null
    tipo: string
    tamanho: string
    cor: string
    preco: number
    quantidade?: number
    criado_em?: Date | string
    Baixa?: BaixaUncheckedCreateNestedManyWithoutRoupaInput
    ComprasItens?: ComprasItensUncheckedCreateNestedManyWithoutRoupaInput
    CondicionaisItens?: CondicionaisItensUncheckedCreateNestedManyWithoutRoupaInput
    HistoricoStatus?: HistoricoStatusUncheckedCreateNestedManyWithoutRoupaInput
    VendasItens?: VendasItensUncheckedCreateNestedManyWithoutRoupaInput
  }

  export type RoupasCreateOrConnectWithoutUsuarioInput = {
    where: RoupasWhereUniqueInput
    create: XOR<RoupasCreateWithoutUsuarioInput, RoupasUncheckedCreateWithoutUsuarioInput>
  }

  export type RoupasCreateManyUsuarioInputEnvelope = {
    data: RoupasCreateManyUsuarioInput | RoupasCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type RoupasUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: RoupasWhereUniqueInput
    update: XOR<RoupasUpdateWithoutUsuarioInput, RoupasUncheckedUpdateWithoutUsuarioInput>
    create: XOR<RoupasCreateWithoutUsuarioInput, RoupasUncheckedCreateWithoutUsuarioInput>
  }

  export type RoupasUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: RoupasWhereUniqueInput
    data: XOR<RoupasUpdateWithoutUsuarioInput, RoupasUncheckedUpdateWithoutUsuarioInput>
  }

  export type RoupasUpdateManyWithWhereWithoutUsuarioInput = {
    where: RoupasScalarWhereInput
    data: XOR<RoupasUpdateManyMutationInput, RoupasUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type RoupasScalarWhereInput = {
    AND?: RoupasScalarWhereInput | RoupasScalarWhereInput[]
    OR?: RoupasScalarWhereInput[]
    NOT?: RoupasScalarWhereInput | RoupasScalarWhereInput[]
    id?: IntFilter<"Roupas"> | number
    nome?: StringFilter<"Roupas"> | string
    descricao?: StringNullableFilter<"Roupas"> | string | null
    tipo?: StringFilter<"Roupas"> | string
    tamanho?: StringFilter<"Roupas"> | string
    cor?: StringFilter<"Roupas"> | string
    preco?: FloatFilter<"Roupas"> | number
    quantidade?: IntFilter<"Roupas"> | number
    usuarios_id?: IntFilter<"Roupas"> | number
    criado_em?: DateTimeFilter<"Roupas"> | Date | string
  }

  export type VendasItensCreateWithoutVendaInput = {
    quatidade: number
    Roupa: RoupasCreateNestedOneWithoutVendasItensInput
  }

  export type VendasItensUncheckedCreateWithoutVendaInput = {
    id?: number
    roupas_id: number
    quatidade: number
  }

  export type VendasItensCreateOrConnectWithoutVendaInput = {
    where: VendasItensWhereUniqueInput
    create: XOR<VendasItensCreateWithoutVendaInput, VendasItensUncheckedCreateWithoutVendaInput>
  }

  export type VendasItensCreateManyVendaInputEnvelope = {
    data: VendasItensCreateManyVendaInput | VendasItensCreateManyVendaInput[]
    skipDuplicates?: boolean
  }

  export type VendasItensUpsertWithWhereUniqueWithoutVendaInput = {
    where: VendasItensWhereUniqueInput
    update: XOR<VendasItensUpdateWithoutVendaInput, VendasItensUncheckedUpdateWithoutVendaInput>
    create: XOR<VendasItensCreateWithoutVendaInput, VendasItensUncheckedCreateWithoutVendaInput>
  }

  export type VendasItensUpdateWithWhereUniqueWithoutVendaInput = {
    where: VendasItensWhereUniqueInput
    data: XOR<VendasItensUpdateWithoutVendaInput, VendasItensUncheckedUpdateWithoutVendaInput>
  }

  export type VendasItensUpdateManyWithWhereWithoutVendaInput = {
    where: VendasItensScalarWhereInput
    data: XOR<VendasItensUpdateManyMutationInput, VendasItensUncheckedUpdateManyWithoutVendaInput>
  }

  export type RoupasCreateWithoutVendasItensInput = {
    nome: string
    descricao?: string | null
    tipo: string
    tamanho: string
    cor: string
    preco: number
    quantidade?: number
    criado_em?: Date | string
    Baixa?: BaixaCreateNestedManyWithoutRoupaInput
    ComprasItens?: ComprasItensCreateNestedManyWithoutRoupaInput
    CondicionaisItens?: CondicionaisItensCreateNestedManyWithoutRoupaInput
    HistoricoStatus?: HistoricoStatusCreateNestedManyWithoutRoupaInput
    Usuario: UsuariosCreateNestedOneWithoutRoupasInput
  }

  export type RoupasUncheckedCreateWithoutVendasItensInput = {
    id?: number
    nome: string
    descricao?: string | null
    tipo: string
    tamanho: string
    cor: string
    preco: number
    quantidade?: number
    usuarios_id: number
    criado_em?: Date | string
    Baixa?: BaixaUncheckedCreateNestedManyWithoutRoupaInput
    ComprasItens?: ComprasItensUncheckedCreateNestedManyWithoutRoupaInput
    CondicionaisItens?: CondicionaisItensUncheckedCreateNestedManyWithoutRoupaInput
    HistoricoStatus?: HistoricoStatusUncheckedCreateNestedManyWithoutRoupaInput
  }

  export type RoupasCreateOrConnectWithoutVendasItensInput = {
    where: RoupasWhereUniqueInput
    create: XOR<RoupasCreateWithoutVendasItensInput, RoupasUncheckedCreateWithoutVendasItensInput>
  }

  export type VendasCreateWithoutVendasItensInput = {
    data_venda?: Date | string
    forma_pgto: string
    valor_total: number
    desconto?: number
    valor_pago: number
  }

  export type VendasUncheckedCreateWithoutVendasItensInput = {
    id?: number
    data_venda?: Date | string
    forma_pgto: string
    valor_total: number
    desconto?: number
    valor_pago: number
  }

  export type VendasCreateOrConnectWithoutVendasItensInput = {
    where: VendasWhereUniqueInput
    create: XOR<VendasCreateWithoutVendasItensInput, VendasUncheckedCreateWithoutVendasItensInput>
  }

  export type RoupasUpsertWithoutVendasItensInput = {
    update: XOR<RoupasUpdateWithoutVendasItensInput, RoupasUncheckedUpdateWithoutVendasItensInput>
    create: XOR<RoupasCreateWithoutVendasItensInput, RoupasUncheckedCreateWithoutVendasItensInput>
    where?: RoupasWhereInput
  }

  export type RoupasUpdateToOneWithWhereWithoutVendasItensInput = {
    where?: RoupasWhereInput
    data: XOR<RoupasUpdateWithoutVendasItensInput, RoupasUncheckedUpdateWithoutVendasItensInput>
  }

  export type RoupasUpdateWithoutVendasItensInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    Baixa?: BaixaUpdateManyWithoutRoupaNestedInput
    ComprasItens?: ComprasItensUpdateManyWithoutRoupaNestedInput
    CondicionaisItens?: CondicionaisItensUpdateManyWithoutRoupaNestedInput
    HistoricoStatus?: HistoricoStatusUpdateManyWithoutRoupaNestedInput
    Usuario?: UsuariosUpdateOneRequiredWithoutRoupasNestedInput
  }

  export type RoupasUncheckedUpdateWithoutVendasItensInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    usuarios_id?: IntFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    Baixa?: BaixaUncheckedUpdateManyWithoutRoupaNestedInput
    ComprasItens?: ComprasItensUncheckedUpdateManyWithoutRoupaNestedInput
    CondicionaisItens?: CondicionaisItensUncheckedUpdateManyWithoutRoupaNestedInput
    HistoricoStatus?: HistoricoStatusUncheckedUpdateManyWithoutRoupaNestedInput
  }

  export type VendasUpsertWithoutVendasItensInput = {
    update: XOR<VendasUpdateWithoutVendasItensInput, VendasUncheckedUpdateWithoutVendasItensInput>
    create: XOR<VendasCreateWithoutVendasItensInput, VendasUncheckedCreateWithoutVendasItensInput>
    where?: VendasWhereInput
  }

  export type VendasUpdateToOneWithWhereWithoutVendasItensInput = {
    where?: VendasWhereInput
    data: XOR<VendasUpdateWithoutVendasItensInput, VendasUncheckedUpdateWithoutVendasItensInput>
  }

  export type VendasUpdateWithoutVendasItensInput = {
    data_venda?: DateTimeFieldUpdateOperationsInput | Date | string
    forma_pgto?: StringFieldUpdateOperationsInput | string
    valor_total?: FloatFieldUpdateOperationsInput | number
    desconto?: FloatFieldUpdateOperationsInput | number
    valor_pago?: FloatFieldUpdateOperationsInput | number
  }

  export type VendasUncheckedUpdateWithoutVendasItensInput = {
    id?: IntFieldUpdateOperationsInput | number
    data_venda?: DateTimeFieldUpdateOperationsInput | Date | string
    forma_pgto?: StringFieldUpdateOperationsInput | string
    valor_total?: FloatFieldUpdateOperationsInput | number
    desconto?: FloatFieldUpdateOperationsInput | number
    valor_pago?: FloatFieldUpdateOperationsInput | number
  }

  export type CondicionaisCreateManyClienteInput = {
    id?: number
    data?: Date | string
    data_devolucao: Date | string
    devolvido?: boolean
  }

  export type CondicionaisUpdateWithoutClienteInput = {
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    data_devolucao?: DateTimeFieldUpdateOperationsInput | Date | string
    devolvido?: BoolFieldUpdateOperationsInput | boolean
    CondicionaisItens?: CondicionaisItensUpdateManyWithoutCondicionaisNestedInput
  }

  export type CondicionaisUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    data_devolucao?: DateTimeFieldUpdateOperationsInput | Date | string
    devolvido?: BoolFieldUpdateOperationsInput | boolean
    CondicionaisItens?: CondicionaisItensUncheckedUpdateManyWithoutCondicionaisNestedInput
  }

  export type CondicionaisUncheckedUpdateManyWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    data_devolucao?: DateTimeFieldUpdateOperationsInput | Date | string
    devolvido?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ComprasItensCreateManyComprasInput = {
    id?: number
    roupas_id: number
    quatidade: number
    valor_peça: number
  }

  export type ComprasItensUpdateWithoutComprasInput = {
    quatidade?: IntFieldUpdateOperationsInput | number
    valor_peça?: IntFieldUpdateOperationsInput | number
    Roupa?: RoupasUpdateOneRequiredWithoutComprasItensNestedInput
  }

  export type ComprasItensUncheckedUpdateWithoutComprasInput = {
    id?: IntFieldUpdateOperationsInput | number
    roupas_id?: IntFieldUpdateOperationsInput | number
    quatidade?: IntFieldUpdateOperationsInput | number
    valor_peça?: IntFieldUpdateOperationsInput | number
  }

  export type ComprasItensUncheckedUpdateManyWithoutComprasInput = {
    id?: IntFieldUpdateOperationsInput | number
    roupas_id?: IntFieldUpdateOperationsInput | number
    quatidade?: IntFieldUpdateOperationsInput | number
    valor_peça?: IntFieldUpdateOperationsInput | number
  }

  export type CondicionaisItensCreateManyCondicionaisInput = {
    id?: number
    roupas_id: number
    quatidade: number
  }

  export type CondicionaisItensUpdateWithoutCondicionaisInput = {
    quatidade?: IntFieldUpdateOperationsInput | number
    Roupa?: RoupasUpdateOneRequiredWithoutCondicionaisItensNestedInput
  }

  export type CondicionaisItensUncheckedUpdateWithoutCondicionaisInput = {
    id?: IntFieldUpdateOperationsInput | number
    roupas_id?: IntFieldUpdateOperationsInput | number
    quatidade?: IntFieldUpdateOperationsInput | number
  }

  export type CondicionaisItensUncheckedUpdateManyWithoutCondicionaisInput = {
    id?: IntFieldUpdateOperationsInput | number
    roupas_id?: IntFieldUpdateOperationsInput | number
    quatidade?: IntFieldUpdateOperationsInput | number
  }

  export type BaixaCreateManyRoupaInput = {
    id?: number
    quantidade: number
    data_baixa?: Date | string
    motivo: string
  }

  export type ComprasItensCreateManyRoupaInput = {
    id?: number
    compras_id: number
    quatidade: number
    valor_peça: number
  }

  export type CondicionaisItensCreateManyRoupaInput = {
    id?: number
    condicionais_id: number
    quatidade: number
  }

  export type HistoricoStatusCreateManyRoupaInput = {
    id?: number
    status_anterior?: $Enums.Status | null
    status_novo?: $Enums.Status | null
    alterado_em?: Date | string
  }

  export type VendasItensCreateManyRoupaInput = {
    id?: number
    vendas_id: number
    quatidade: number
  }

  export type BaixaUpdateWithoutRoupaInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    data_baixa?: DateTimeFieldUpdateOperationsInput | Date | string
    motivo?: StringFieldUpdateOperationsInput | string
  }

  export type BaixaUncheckedUpdateWithoutRoupaInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    data_baixa?: DateTimeFieldUpdateOperationsInput | Date | string
    motivo?: StringFieldUpdateOperationsInput | string
  }

  export type BaixaUncheckedUpdateManyWithoutRoupaInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    data_baixa?: DateTimeFieldUpdateOperationsInput | Date | string
    motivo?: StringFieldUpdateOperationsInput | string
  }

  export type ComprasItensUpdateWithoutRoupaInput = {
    quatidade?: IntFieldUpdateOperationsInput | number
    valor_peça?: IntFieldUpdateOperationsInput | number
    Compras?: ComprasUpdateOneRequiredWithoutComprasItensNestedInput
  }

  export type ComprasItensUncheckedUpdateWithoutRoupaInput = {
    id?: IntFieldUpdateOperationsInput | number
    compras_id?: IntFieldUpdateOperationsInput | number
    quatidade?: IntFieldUpdateOperationsInput | number
    valor_peça?: IntFieldUpdateOperationsInput | number
  }

  export type ComprasItensUncheckedUpdateManyWithoutRoupaInput = {
    id?: IntFieldUpdateOperationsInput | number
    compras_id?: IntFieldUpdateOperationsInput | number
    quatidade?: IntFieldUpdateOperationsInput | number
    valor_peça?: IntFieldUpdateOperationsInput | number
  }

  export type CondicionaisItensUpdateWithoutRoupaInput = {
    quatidade?: IntFieldUpdateOperationsInput | number
    Condicionais?: CondicionaisUpdateOneRequiredWithoutCondicionaisItensNestedInput
  }

  export type CondicionaisItensUncheckedUpdateWithoutRoupaInput = {
    id?: IntFieldUpdateOperationsInput | number
    condicionais_id?: IntFieldUpdateOperationsInput | number
    quatidade?: IntFieldUpdateOperationsInput | number
  }

  export type CondicionaisItensUncheckedUpdateManyWithoutRoupaInput = {
    id?: IntFieldUpdateOperationsInput | number
    condicionais_id?: IntFieldUpdateOperationsInput | number
    quatidade?: IntFieldUpdateOperationsInput | number
  }

  export type HistoricoStatusUpdateWithoutRoupaInput = {
    status_anterior?: NullableEnumStatusFieldUpdateOperationsInput | $Enums.Status | null
    status_novo?: NullableEnumStatusFieldUpdateOperationsInput | $Enums.Status | null
    alterado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoricoStatusUncheckedUpdateWithoutRoupaInput = {
    id?: IntFieldUpdateOperationsInput | number
    status_anterior?: NullableEnumStatusFieldUpdateOperationsInput | $Enums.Status | null
    status_novo?: NullableEnumStatusFieldUpdateOperationsInput | $Enums.Status | null
    alterado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoricoStatusUncheckedUpdateManyWithoutRoupaInput = {
    id?: IntFieldUpdateOperationsInput | number
    status_anterior?: NullableEnumStatusFieldUpdateOperationsInput | $Enums.Status | null
    status_novo?: NullableEnumStatusFieldUpdateOperationsInput | $Enums.Status | null
    alterado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendasItensUpdateWithoutRoupaInput = {
    quatidade?: IntFieldUpdateOperationsInput | number
    Venda?: VendasUpdateOneRequiredWithoutVendasItensNestedInput
  }

  export type VendasItensUncheckedUpdateWithoutRoupaInput = {
    id?: IntFieldUpdateOperationsInput | number
    vendas_id?: IntFieldUpdateOperationsInput | number
    quatidade?: IntFieldUpdateOperationsInput | number
  }

  export type VendasItensUncheckedUpdateManyWithoutRoupaInput = {
    id?: IntFieldUpdateOperationsInput | number
    vendas_id?: IntFieldUpdateOperationsInput | number
    quatidade?: IntFieldUpdateOperationsInput | number
  }

  export type RoupasCreateManyUsuarioInput = {
    id?: number
    nome: string
    descricao?: string | null
    tipo: string
    tamanho: string
    cor: string
    preco: number
    quantidade?: number
    criado_em?: Date | string
  }

  export type RoupasUpdateWithoutUsuarioInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    Baixa?: BaixaUpdateManyWithoutRoupaNestedInput
    ComprasItens?: ComprasItensUpdateManyWithoutRoupaNestedInput
    CondicionaisItens?: CondicionaisItensUpdateManyWithoutRoupaNestedInput
    HistoricoStatus?: HistoricoStatusUpdateManyWithoutRoupaNestedInput
    VendasItens?: VendasItensUpdateManyWithoutRoupaNestedInput
  }

  export type RoupasUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    Baixa?: BaixaUncheckedUpdateManyWithoutRoupaNestedInput
    ComprasItens?: ComprasItensUncheckedUpdateManyWithoutRoupaNestedInput
    CondicionaisItens?: CondicionaisItensUncheckedUpdateManyWithoutRoupaNestedInput
    HistoricoStatus?: HistoricoStatusUncheckedUpdateManyWithoutRoupaNestedInput
    VendasItens?: VendasItensUncheckedUpdateManyWithoutRoupaNestedInput
  }

  export type RoupasUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: StringFieldUpdateOperationsInput | string
    tamanho?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendasItensCreateManyVendaInput = {
    id?: number
    roupas_id: number
    quatidade: number
  }

  export type VendasItensUpdateWithoutVendaInput = {
    quatidade?: IntFieldUpdateOperationsInput | number
    Roupa?: RoupasUpdateOneRequiredWithoutVendasItensNestedInput
  }

  export type VendasItensUncheckedUpdateWithoutVendaInput = {
    id?: IntFieldUpdateOperationsInput | number
    roupas_id?: IntFieldUpdateOperationsInput | number
    quatidade?: IntFieldUpdateOperationsInput | number
  }

  export type VendasItensUncheckedUpdateManyWithoutVendaInput = {
    id?: IntFieldUpdateOperationsInput | number
    roupas_id?: IntFieldUpdateOperationsInput | number
    quatidade?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}